<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\icontrolmanager.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">daed89878caac248d4dfdbe7763d6eef48ea7150</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>IControlManager</source>
          <target>IControlManager</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>IControlManager</source>
          <target>IControlManager</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>IControlManager</source>
          <target>IControlManager</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Represents the Windows Performance Recorder manager, which controls Event Tracing for Windows (ETW) sessions.</source>
          <target>Represents the Windows Performance Recorder manager, which controls Event Tracing for Windows (ETW) sessions.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](iprofilecollection.md)</data>
        </originalData>
        <segment state="initial">
          <source>The client passes a collection of profiles using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IProfileCollection</pc> interface, and the manager can start, update, cancel, save, stop, or query the ETW session or providers that each profile describes.</source>
          <target>The client passes a collection of profiles using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IProfileCollection</pc> interface, and the manager can start, update, cancel, save, stop, or query the ETW session or providers that each profile describes.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](icontrolprogresshandler.md)</data>
        </originalData>
        <segment state="initial">
          <source>The client can pass in a pointer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IControlProgressHandler</pc> handler to receive updates about the operation that the manager performs.</source>
          <target>The client can pass in a pointer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IControlProgressHandler</pc> handler to receive updates about the operation that the manager performs.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Syntax</source>
          <target>Syntax</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Functions</source>
          <target>Functions</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The following table describes the functions that this interface provides.</source>
          <target>The following table describes the functions that this interface provides.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Function</source>
          <target>Function</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Start</source>
          <target>Start</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Starts a recording.</source>
          <target>Starts a recording.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Update</source>
          <target>Update</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Updates a profile collection.</source>
          <target>Updates a profile collection.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Cancel</source>
          <target>Cancel</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Stops a recording without saving any data.</source>
          <target>Stops a recording without saving any data.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Save</source>
          <target>Save</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Saves a recording that is logged to circular buffers in memory to the specified event trace log (ETL) file.</source>
          <target>Saves a recording that is logged to circular buffers in memory to the specified event trace log (ETL) file.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Stop</source>
          <target>Stop</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Stops a recording and saves it to the specified event trace log (ETL) file.</source>
          <target>Stops a recording and saves it to the specified event trace log (ETL) file.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>QueryXML</source>
          <target>QueryXML</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Indicates the XML format of the currently running profile and whether the profile is running properly.</source>
          <target>Indicates the XML format of the currently running profile and whether the profile is running properly.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Query</source>
          <target>Query</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Queries the properties of session and providers in all profiles.</source>
          <target>Queries the properties of session and providers in all profiles.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>propget</source>
          <target>propget</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Gets the specified property.</source>
          <target>Gets the specified property.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>propput</source>
          <target>propput</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Sets the specified property.</source>
          <target>Sets the specified property.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>GetProviderNameFromGuid</source>
          <target>GetProviderNameFromGuid</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Gets the provider name of the specified GUID.</source>
          <target>Gets the provider name of the specified GUID.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>GetProviderGuidFromName</source>
          <target>GetProviderGuidFromName</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Gets the provider GUID of the specified name.</source>
          <target>Gets the provider GUID of the specified name.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Properties</source>
          <target>Properties</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>The following table describes the parameters of properties that this interface can get or set.</source>
          <target>The following table describes the parameters of properties that this interface can get or set.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Property</source>
          <target>Property</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Parameters</source>
          <target>Parameters</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>ControlProgressHandler</source>
          <target>ControlProgressHandler</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>ppControlProgressHandler<ph dataRef="id1" id="ph1" /> [out]</source>
          <target>ppControlProgressHandler<ph dataRef="id1" id="ph1" /> [out]</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](icontrolprogresshandler.md)</data>
        </originalData>
        <segment state="initial">
          <source>Pointer to the client-side implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IControlProgressHandler</pc> interface.</source>
          <target>Pointer to the client-side implementation of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IControlProgressHandler</pc> interface.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>ControlProgressHandler</source>
          <target>ControlProgressHandler</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pControlProgressHandler<ph dataRef="id1" id="ph1" /> [in]</source>
          <target>pControlProgressHandler<ph dataRef="id1" id="ph1" /> [in]</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Pointer to the client-side implementation of the <ph dataRef="id1" id="ph1" />IControlProgressHandler<ph dataRef="id2" id="ph2" /> interface.</source>
          <target>Pointer to the client-side implementation of the <ph dataRef="id1" id="ph1" />IControlProgressHandler<ph dataRef="id2" id="ph2" /> interface.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>E_POINTER indicates an invalid pointer.</source>
          <target>E_POINTER indicates an invalid pointer.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>TraceMergeTextHandler</source>
          <target>TraceMergeTextHandler</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>ppTraceMergeTextHandler<ph dataRef="id1" id="ph1" /> [out]</source>
          <target>ppTraceMergeTextHandler<ph dataRef="id1" id="ph1" /> [out]</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](itracemergetexthandler.md)</data>
        </originalData>
        <segment state="initial">
          <source>Pointer to the text and some other merge time information in the trace injected by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ITraceMergeTextHandler</pc> interface.</source>
          <target>Pointer to the text and some other merge time information in the trace injected by the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ITraceMergeTextHandler</pc> interface.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>TraceMergeTextHandler</source>
          <target>TraceMergeTextHandler</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pTraceMergeTextHandler<ph dataRef="id1" id="ph1" /> [in]</source>
          <target>pTraceMergeTextHandler<ph dataRef="id1" id="ph1" /> [in]</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Pointer to the text and some other merge time information in the trace injected by the <ph dataRef="id1" id="ph1" />ITraceMergeTextHandler<ph dataRef="id2" id="ph2" /> interface.</source>
          <target>Pointer to the text and some other merge time information in the trace injected by the <ph dataRef="id1" id="ph1" />ITraceMergeTextHandler<ph dataRef="id2" id="ph2" /> interface.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>E_POINTER indicates an invalid pointer.</source>
          <target>E_POINTER indicates an invalid pointer.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>TemporaryTraceDirectory</source>
          <target>TemporaryTraceDirectory</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pbstrTemporaryTraceDirectory<ph dataRef="id1" id="ph1" /> [out]</source>
          <target>pbstrTemporaryTraceDirectory<ph dataRef="id1" id="ph1" /> [out]</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Pointer to the path of the directory where the pre-merged trace files are logged.</source>
          <target>Pointer to the path of the directory where the pre-merged trace files are logged.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>The default is the %temp% folder.</source>
          <target>The default is the %temp% folder.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>TemporaryTraceDirectory<ph dataRef="id1" id="ph1" /> [in]</source>
          <target>TemporaryTraceDirectory<ph dataRef="id1" id="ph1" /> [in]</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>bstrTemporaryTraceDirectory</source>
          <target>bstrTemporaryTraceDirectory</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Path of the directory where the pre-merged trace files are logged.</source>
          <target>Path of the directory where the pre-merged trace files are logged.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Interfaces</source>
          <target>Interfaces</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>