<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\symbol-support.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">9a09737b4e1339460a7fd62420fd8e9dba0780f6</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Symbol Support</source>
          <target>Symbol Support</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Symbol Support</source>
          <target>Symbol Support</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Symbol Support</source>
          <target>Symbol Support</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>When Windows Performance Analyzer (WPA) is correctly configured, WPA shows symbolic names from the symbol files for addresses that are found in the recording.</source>
          <target>When Windows Performance Analyzer (WPA) is correctly configured, WPA shows symbolic names from the symbol files for addresses that are found in the recording.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>To decode symbols, the tools must locate the program database files, known as program database (PDB) files or symbol files, to build complete call stacks.</source>
          <target>To decode symbols, the tools must locate the program database files, known as program database (PDB) files or symbol files, to build complete call stacks.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>The compiler and linker generate PDB files when the system builds a component.</source>
          <target>The compiler and linker generate PDB files when the system builds a component.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Microsoft provides the program database files for many Microsoft products in an online symbol server.</source>
          <target>Microsoft provides the program database files for many Microsoft products in an online symbol server.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>The Microsoft Debugging Tools for Windows and WPA use the online symbol server to look up symbol information.</source>
          <target>The Microsoft Debugging Tools for Windows and WPA use the online symbol server to look up symbol information.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Therefore, the computer must be connected to the Internet if the symbol files are not copied locally.</source>
          <target>Therefore, the computer must be connected to the Internet if the symbol files are not copied locally.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The Windows Performance Toolkit uses the same symbol decoding infrastructure as the Windows debugger, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windbg.exe</pc>.</source>
          <target>The Windows Performance Toolkit uses the same symbol decoding infrastructure as the Windows debugger, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windbg.exe</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=212249)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinDbg</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinDbg</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>To configure symbol support, you must define the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> environment variable.</source>
          <target>To configure symbol support, you must define the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> environment variable.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>The following example sets the symbol path to use the Microsoft public symbol server together with a downstream store in C:<ph dataRef="id1" id="ph1" />symbols:</source>
          <target>The following example sets the symbol path to use the Microsoft public symbol server together with a downstream store in C:<ph dataRef="id1" id="ph1" />symbols:</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Note that this example is a single command line.</source>
          <target>Note that this example is a single command line.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The URL in this symbol path specifies the online Microsoft symbol server.</source>
          <target>The URL in this symbol path specifies the online Microsoft symbol server.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>The path between the asterisks (C:<ph dataRef="id1" id="ph1" />symbols) specifies the downstream store.</source>
          <target>The path between the asterisks (C:<ph dataRef="id1" id="ph1" />symbols) specifies the downstream store.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>This is a local cache in which the symbol resolution system keeps symbol files.</source>
          <target>This is a local cache in which the symbol resolution system keeps symbol files.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>WPA Tools also decode symbols from components that you develop.</source>
          <target>WPA Tools also decode symbols from components that you develop.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>Add one or more paths to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> that contain the PDB files for the components that you want to record.</source>
          <target>Add one or more paths to <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> that contain the PDB files for the components that you want to record.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>For example, the following example shows how the path was set up for the previous example:</source>
          <target>For example, the following example shows how the path was set up for the previous example:</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>When Xperf or WPA decodes symbols, Xperf or WPA caches a condensed version of the original symbol files, or PDBs, on disk in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />symcache</pc> directory.</source>
          <target>When Xperf or WPA decodes symbols, Xperf or WPA caches a condensed version of the original symbol files, or PDBs, on disk in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />symcache</pc> directory.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>To do this, Xperf or WPA uses the symbols that are available at the time.</source>
          <target>To do this, Xperf or WPA uses the symbols that are available at the time.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>The operating system symbols that are available outside Microsoft are public symbols.</source>
          <target>The operating system symbols that are available outside Microsoft are public symbols.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>These symbols contain less information than internal private symbols.</source>
          <target>These symbols contain less information than internal private symbols.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>In black-box testing, public symbols can also include incorrect information.</source>
          <target>In black-box testing, public symbols can also include incorrect information.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Private symbols, which are more reliable, can be obtained under non-disclosure agreements.</source>
          <target>Private symbols, which are more reliable, can be obtained under non-disclosure agreements.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>If a user has decoded a recording by using public symbols, and the user then obtains private symbols, the user must clear the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />symcache</pc> directory before Xperf or WPA can discover the new private symbols.</source>
          <target>If a user has decoded a recording by using public symbols, and the user then obtains private symbols, the user must clear the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />symcache</pc> directory before Xperf or WPA can discover the new private symbols.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Troubleshooting Symbol Decoding</source>
          <target>Troubleshooting Symbol Decoding</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Symbol decoding support is complex.</source>
          <target>Symbol decoding support is complex.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>The following requirements must be met:</source>
          <target>The following requirements must be met:</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">`-symbols`</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>You must specify <ph dataRef="id1" id="ph1" /> on the Xperf command line or select <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Load Symbols</pc> on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Trace</pc> menu in WPA after you open a recording.</source>
          <target>You must specify <ph dataRef="id1" id="ph1" /> on the Xperf command line or select <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Load Symbols</pc> on the <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Trace</pc> menu in WPA after you open a recording.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The environment variables must be configured correctly.</source>
          <target>The environment variables must be configured correctly.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](symbols.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information for Xperf, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">symbols</pc>.</source>
          <target>For more information for Xperf, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">symbols</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The ETW kernel recording file must have been stopped and merged correctly.</source>
          <target>The ETW kernel recording file must have been stopped and merged correctly.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](stop-a-recording.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stopping a Recording</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stopping a Recording</pc>.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Windows Performance Recorder (WPR) or WPA merges the ETW user recording file together with a kernel recording file that is taken at the same time on the same computer.</source>
          <target>Windows Performance Recorder (WPR) or WPA merges the ETW user recording file together with a kernel recording file that is taken at the same time on the same computer.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>You must have access to the binary and symbol sources that <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> specifies.</source>
          <target>You must have access to the binary and symbol sources that <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> specifies.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If you use a symbol server, the symbol server is often just a redirector.</source>
          <target>If you use a symbol server, the symbol server is often just a redirector.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>In this case, you must have access to both the symbol server and the sites that the symbol server points to that host the binaries and symbols.</source>
          <target>In this case, you must have access to both the symbol server and the sites that the symbol server points to that host the binaries and symbols.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> must point to the correct files.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">
              <ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> must point to the correct files.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>If the files exist from a different build or architecture, the files will not work.</source>
          <target>If the files exist from a different build or architecture, the files will not work.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the version of the application binary files is not the same version as the symbols that <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> points to, you cannot view call stacks.</source>
          <target>If the version of the application binary files is not the same version as the symbols that <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />NT<ph dataRef="id4" id="ph2" />SYMBOL<ph dataRef="id5" id="ph3" />PATH</pc> points to, you cannot view call stacks.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>To rule out a symbol mismatch, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Symchk.exe</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging Tools for Windows</pc> distribution to ensure that the symbols match the symbol files on the computer on which the recording was taken.</source>
          <target>To rule out a symbol mismatch, use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Symchk.exe</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Debugging Tools for Windows</pc> distribution to ensure that the symbols match the symbol files on the computer on which the recording was taken.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">`fc /b`</data>
        </originalData>
        <segment state="initial">
          <source>To rule out a binary mismatch, use the <ph dataRef="id1" id="ph1" /> command to ensure that the binaries on the computer on which the recording was taken match the binaries on the drop share.</source>
          <target>To rule out a binary mismatch, use the <ph dataRef="id1" id="ph1" /> command to ensure that the binaries on the computer on which the recording was taken match the binaries on the drop share.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">`PROC_THREAD+LOADER`</data>
        </originalData>
        <segment state="initial">
          <source>In Xperf, you must capture the ETW kernel recording by using at least the <ph dataRef="id1" id="ph1" /> flags.</source>
          <target>In Xperf, you must capture the ETW kernel recording by using at least the <ph dataRef="id1" id="ph1" /> flags.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>These flags provide basic information about process lifetime and image virtual address ranges in process memory.</source>
          <target>These flags provide basic information about process lifetime and image virtual address ranges in process memory.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>This information helps XPerf to decode virtual addresses to images and symbols.</source>
          <target>This information helps XPerf to decode virtual addresses to images and symbols.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">**</data>
          <data id="id18">**</data>
          <data id="id19">**</data>
          <data id="id20">**</data>
        </originalData>
        <segment state="initial">
          <source>To verify that these flags have been enabled in the ETW kernel recording, check that Xperf <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-process</pc> events (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Delete</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Start Rundown</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">End Rundown</pc>) and <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Image</pc> events (<pc dataRefEnd="id14" dataRefStart="id13" id="p7">Load</pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Unload</pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9">Start Rundown</pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p10">End Rundown</pc>) are present in the table that is generated by using the following command:</source>
          <target>To verify that these flags have been enabled in the ETW kernel recording, check that Xperf <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-process</pc> events (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Delete</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Start Rundown</pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p5">End Rundown</pc>) and <pc dataRefEnd="id12" dataRefStart="id11" id="p6">Image</pc> events (<pc dataRefEnd="id14" dataRefStart="id13" id="p7">Load</pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p8">Unload</pc>, <pc dataRefEnd="id18" dataRefStart="id17" id="p9">Start Rundown</pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p10">End Rundown</pc>) are present in the table that is generated by using the following command:</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>All of these events might not be listed in the table, depending on whether these events occurred.</source>
          <target>All of these events might not be listed in the table, depending on whether these events occurred.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Limitation in Xperf Symbol Decoding</source>
          <target>Limitation in Xperf Symbol Decoding</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>Xperf defaults to the system drive if a drive is not specified for an executable image (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Path<ph dataRef="id4" id="ph2" />Library.dll</pc>).</source>
          <target>Xperf defaults to the system drive if a drive is not specified for an executable image (such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />Path<ph dataRef="id4" id="ph2" />Library.dll</pc>).</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">`-d/-merge`</data>
        </originalData>
        <segment state="initial">
          <source>When you run the <ph dataRef="id1" id="ph1" /> command, if Xperf cannot find an executable image that existed in a running process during the recording, Xperf cannot retrieve the corresponding image and symbol file identity information and add the information to the merged recording.</source>
          <target>When you run the <ph dataRef="id1" id="ph1" /> command, if Xperf cannot find an executable image that existed in a running process during the recording, Xperf cannot retrieve the corresponding image and symbol file identity information and add the information to the merged recording.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Without that information, Xperf cannot perform symbol decoding for that image in that recording.</source>
          <target>Without that information, Xperf cannot perform symbol decoding for that image in that recording.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>This issue does not affect other file paths, such as the paths in disk I/O or file I/O.</source>
          <target>This issue does not affect other file paths, such as the paths in disk I/O or file I/O.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>To enable symbol decoding and to help enable correct image load and unload paths in Xperf ETW recordings, you should store all executable images for which you might require symbol decoding or image load and unload paths on the system drive.</source>
          <target>To enable symbol decoding and to help enable correct image load and unload paths in Xperf ETW recordings, you should store all executable images for which you might require symbol decoding or image load and unload paths on the system drive.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Then, run the images from that drive.</source>
          <target>Then, run the images from that drive.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>If that is not possible, create a mirror of the images on the system drive, even if you run the images from another drive.</source>
          <target>If that is not possible, create a mirror of the images on the system drive, even if you run the images from another drive.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">\\</data>
          <data id="id9">\\</data>
          <data id="id10">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, if C: is your system drive, create an identical copy of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D:<ph dataRef="id3" id="ph1" />game<ph dataRef="id4" id="ph2" />bin<ph dataRef="id5" id="ph3" />binkw32.dll</pc> at <pc dataRefEnd="id7" dataRefStart="id6" id="p2">C:<ph dataRef="id8" id="ph4" />game<ph dataRef="id9" id="ph5" />bin<ph dataRef="id10" id="ph6" />binkw32.dll</pc>.</source>
          <target>For example, if C: is your system drive, create an identical copy of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">D:<ph dataRef="id3" id="ph1" />game<ph dataRef="id4" id="ph2" />bin<ph dataRef="id5" id="ph3" />binkw32.dll</pc> at <pc dataRefEnd="id7" dataRefStart="id6" id="p2">C:<ph dataRef="id8" id="ph4" />game<ph dataRef="id9" id="ph5" />bin<ph dataRef="id10" id="ph6" />binkw32.dll</pc>.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Windows Performance Toolkit</source>
          <target>Windows Performance Toolkit</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>symbols</source>
          <target>symbols</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Using CLR 4.0 NGEN PDB Support</source>
          <target>Using CLR 4.0 NGEN PDB Support</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Common In-Depth Analysis Issues</source>
          <target>Common In-Depth Analysis Issues</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>