<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\stack-tags.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">abd8243b8146439d98282e94c507a887f006f8ec</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Stack Tags</source>
          <target>Stack Tags</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>In the Windows® Performance Analyzer (WPA), stack tags is a feature that lets you create labels (tags) to help you better identify which parts of the call stack(s) are affected.</source>
          <target>In the Windows® Performance Analyzer (WPA), stack tags is a feature that lets you create labels (tags) to help you better identify which parts of the call stack(s) are affected.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Stack Tags</source>
          <target>Stack Tags</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>In the Windows® Performance Analyzer (WPA), stack tags is a feature that lets you create labels (tags) to help you better identify which parts of the call stack(s) are affected.</source>
          <target>In the Windows® Performance Analyzer (WPA), stack tags is a feature that lets you create labels (tags) to help you better identify which parts of the call stack(s) are affected.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Understanding differences between stack tags and stack frame tags</source>
          <target>Understanding differences between stack tags and stack frame tags</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>You can think of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">stack (frame tags)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">stack</pc> tags as two views of the same data available in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Stack</pc> column.</source>
          <target>You can think of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">stack (frame tags)</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">stack</pc> tags as two views of the same data available in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Stack</pc> column.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>You can configure a stack column to be viewed as a stack tag or stack column (frame tag) in the View Editor.</source>
          <target>You can configure a stack column to be viewed as a stack tag or stack column (frame tag) in the View Editor.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>A call stack consists of a list of frames.</source>
          <target>A call stack consists of a list of frames.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If a call stack is in the form of A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C, then there are three frames: A, B, and C. Stack columns (frame tags) map each and every call stack frame to a tag or defaults to module!method if no tag is present.</source>
          <target>If a call stack is in the form of A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C, then there are three frames: A, B, and C. Stack columns (frame tags) map each and every call stack frame to a tag or defaults to module!method if no tag is present.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;gt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">\*</data>
          <data id="id10">\\</data>
          <data id="id11">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, call stack A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C-<ph dataRef="id3" id="ph3" /> D, in <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Stack (Frame Tags)</pc> view can become A -<ph dataRef="id6" id="ph4" /> FrameTagB -<ph dataRef="id7" id="ph5" /> FrameTagC -<ph dataRef="id8" id="ph6" /> D. Each of the frame tags can have a hierarchy based on the hierarchy of definition of the tags in the <ph dataRef="id9" id="ph7" />.stacktags file (for example, FrameTagB's actual value can be "HTML<ph dataRef="id10" id="ph8" />Script<ph dataRef="id11" id="ph9" />OM").</source>
          <target>For example, call stack A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C-<ph dataRef="id3" id="ph3" /> D, in <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Stack (Frame Tags)</pc> view can become A -<ph dataRef="id6" id="ph4" /> FrameTagB -<ph dataRef="id7" id="ph5" /> FrameTagC -<ph dataRef="id8" id="ph6" /> D. Each of the frame tags can have a hierarchy based on the hierarchy of definition of the tags in the <ph dataRef="id9" id="ph7" />.stacktags file (for example, FrameTagB's actual value can be "HTML<ph dataRef="id10" id="ph8" />Script<ph dataRef="id11" id="ph9" />OM").</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>A stack tag summarizes an entire call stack by using a single tag name.</source>
          <target>A stack tag summarizes an entire call stack by using a single tag name.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>For example, the bottom most mapped frame tag is typically made the stack tag unless there is priority specified for tags.</source>
          <target>For example, the bottom most mapped frame tag is typically made the stack tag unless there is priority specified for tags.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;gt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Using the same A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C -<ph dataRef="id3" id="ph3" /> D example, where frame tag view is A -<ph dataRef="id4" id="ph4" /> FrameTagB -<ph dataRef="id5" id="ph5" /> FrameTagC -<ph dataRef="id6" id="ph6" /> D, the stack tag view is just: FrameTagC.</source>
          <target>Using the same A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C -<ph dataRef="id3" id="ph3" /> D example, where frame tag view is A -<ph dataRef="id4" id="ph4" /> FrameTagB -<ph dataRef="id5" id="ph5" /> FrameTagC -<ph dataRef="id6" id="ph6" /> D, the stack tag view is just: FrameTagC.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Besides normal Tag for exactly matching module and method, you can also define HintTag with HintOperator as Callee or Caller.</source>
          <target>Besides normal Tag for exactly matching module and method, you can also define HintTag with HintOperator as Callee or Caller.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;gt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, a HintTag with HintOperator as Callee is defined for B. The call stack A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C -<ph dataRef="id3" id="ph3" /> D in <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Stack (FrameTags)</pc> view can become A -<ph dataRef="id6" id="ph4" /> FrameTagB -<ph dataRef="id7" id="ph5" /> ModuleOfC -<ph dataRef="id8" id="ph6" /> D and its StackTag view is FrameTagB -<ph dataRef="id9" id="ph7" /> ModuleOfC.</source>
          <target>For example, a HintTag with HintOperator as Callee is defined for B. The call stack A -<ph dataRef="id1" id="ph1" /> B -<ph dataRef="id2" id="ph2" /> C -<ph dataRef="id3" id="ph3" /> D in <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Stack (FrameTags)</pc> view can become A -<ph dataRef="id6" id="ph4" /> FrameTagB -<ph dataRef="id7" id="ph5" /> ModuleOfC -<ph dataRef="id8" id="ph6" /> D and its StackTag view is FrameTagB -<ph dataRef="id9" id="ph7" /> ModuleOfC.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>The module of C is dynamically created as a new stack tag.</source>
          <target>The module of C is dynamically created as a new stack tag.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Explicitly setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnlyShowModule</pc> attribute of HintTag as false would make C as a new stack tag rather than ModuleOfC.</source>
          <target>Explicitly setting the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnlyShowModule</pc> attribute of HintTag as false would make C as a new stack tag rather than ModuleOfC.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnlyShowModule</pc> attribute is true by default.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OnlyShowModule</pc> attribute is true by default.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>The typical use case is to automatically attribute RPC server functions.</source>
          <target>The typical use case is to automatically attribute RPC server functions.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>Their direct caller function is rpcrt4.dll!Invoke<ph dataRef="id1" id="ph1" />epilog1<ph dataRef="id2" id="ph2" />start.</source>
          <target>Their direct caller function is rpcrt4.dll!Invoke<ph dataRef="id1" id="ph1" />epilog1<ph dataRef="id2" id="ph2" />start.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>You can define a HintTag for this common caller function to achieve this.</source>
          <target>You can define a HintTag for this common caller function to achieve this.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Adding stack tags to the Stack Tags Definition file</source>
          <target>Adding stack tags to the Stack Tags Definition file</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>To add a stack tag definition to the Stack Tags Definition file, do the following:</source>
          <target>To add a stack tag definition to the Stack Tags Definition file, do the following:</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</source>
          <target>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Stack Tags Definition area, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> to the desired location.</source>
          <target>In the Stack Tags Definition area, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Add</pc> to the desired location.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to the area that contains the stack tags file, select it, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open</pc>.</source>
          <target>Navigate to the area that contains the stack tags file, select it, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Removing a stack tag from the stack tags definition file</source>
          <target>Removing a stack tag from the stack tags definition file</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>To remove a stack tag definition from the Stack Tags Definition file, do the following:</source>
          <target>To remove a stack tag definition from the Stack Tags Definition file, do the following:</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</source>
          <target>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Stack Tags Definition area, select the stack tag definitions you want to remove then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove</pc>.</source>
          <target>In the Stack Tags Definition area, select the stack tag definitions you want to remove then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove</pc>.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Warning</pc>  Make sure you want to remove the selected stack tag definition(s), as you will not have the option to cancel once you click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Remove</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Warning</pc>  Make sure you want to remove the selected stack tag definition(s), as you will not have the option to cancel once you click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Remove</pc>.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Reloading the stack tags definition file</source>
          <target>Reloading the stack tags definition file</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>To reload a stack tag definition to the Stack Tags Definition file, do the following:</source>
          <target>To reload a stack tag definition to the Stack Tags Definition file, do the following:</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</source>
          <target>In the menu, choose <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Trace Properties</pc>.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trace Properties</pc> tab opens.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Stack Tags Definition area, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Reload</pc>.</source>
          <target>In the Stack Tags Definition area, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Reload</pc>.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>You can load multiple stack tags by pressing and holding down the Shift key and left-clicking each stack tags definition.</source>
          <target>You can load multiple stack tags by pressing and holding down the Shift key and left-clicking each stack tags definition.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Troubleshooting your stack tags file</source>
          <target>Troubleshooting your stack tags file</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>To investigate issues within your stack tags file in WPA, do the following:</source>
          <target>To investigate issues within your stack tags file in WPA, do the following:</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the menu, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Diagnostic Console</pc>.</source>
          <target>In the menu, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Window</pc>, then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Diagnostic Console</pc>.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The WPA display splits into two - with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Graph Explorer</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Analysis</pc> in the top half of the screen and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Diagnostic Console</pc> on the bottom half of the screen.</source>
          <target>The WPA display splits into two - with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Graph Explorer</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Analysis</pc> in the top half of the screen and the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Diagnostic Console</pc> on the bottom half of the screen.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  You can also access the Diagnostic Console in the lower left corner of WPA by clicking <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Diagnostic Console</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Tip</pc>  You can also access the Diagnostic Console in the lower left corner of WPA by clicking <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Diagnostic Console</pc>.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Once open, you can also drag it out to a separate window or dock it at the top or side.</source>
          <target>Once open, you can also drag it out to a separate window or dock it at the top or side.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>The Diagnostic Console lists information about exceptions that occur during analysis workflow.</source>
          <target>The Diagnostic Console lists information about exceptions that occur during analysis workflow.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>You can diagnose symbol decoding issues from this console</source>
          <target>You can diagnose symbol decoding issues from this console</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Introduction to the WPA User Interface</source>
          <target>Introduction to the WPA User Interface</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Diagnostic Console</source>
          <target>Diagnostic Console</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>