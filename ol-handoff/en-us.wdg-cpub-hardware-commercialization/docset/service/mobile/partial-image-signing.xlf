<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\service\mobile\partial-image-signing.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">c3b53fae6837912090cf2e1ed15d057ba15f20e5</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Partial Image Signing</source>
          <target>Partial Image Signing</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Partial Image Signing</source>
          <target>Partial Image Signing</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Partial Image Signing</source>
          <target>Partial Image Signing</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Previous versions of the ingestion client supported signing only full FFU images.</source>
          <target>Previous versions of the ingestion client supported signing only full FFU images.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>However, there are several valid scenarios where you might want to submit a partial FFU image to be signed rather than a full image, such as:</source>
          <target>However, there are several valid scenarios where you might want to submit a partial FFU image to be signed rather than a full image, such as:</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/dn756781)</data>
        </originalData>
        <segment state="initial">
          <source>Signed package caching functionality as described in detail in Windows Standard Package Configuration (WSPC) scenario, as described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Standard Packaging Configuration (WSPC) requirements for retail images</pc>.</source>
          <target>Signed package caching functionality as described in detail in Windows Standard Package Configuration (WSPC) scenario, as described in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Standard Packaging Configuration (WSPC) requirements for retail images</pc>.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Signing MMOS packages for validation and troubleshooting during manufacture.</source>
          <target>Signing MMOS packages for validation and troubleshooting during manufacture.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Rapid testing of fixes for bugs that do not manifest themselves on test images.</source>
          <target>Rapid testing of fixes for bugs that do not manifest themselves on test images.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>For example, previously there could be a delay of week or more between the time your fix is checked in to the actual build of the binary containing the fix.</source>
          <target>For example, previously there could be a delay of week or more between the time your fix is checked in to the actual build of the binary containing the fix.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>To reduce this latency, you can now build a local copy of the binary, create the package, submit the partial package to be retail signed, and then retrieve the retail signed partial package before re-integrating and flashing it to the phone using IUTool.</source>
          <target>To reduce this latency, you can now build a local copy of the binary, create the package, submit the partial package to be retail signed, and then retrieve the retail signed partial package before re-integrating and flashing it to the phone using IUTool.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Installing testing and debugging tools on retail images to debug issues that only manifest themselves on retail images.</source>
          <target>Installing testing and debugging tools on retail images to debug issues that only manifest themselves on retail images.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>The latest version of the ingestion client now implements functionality to support partial image signing, mitigating the need for you to manually create your own "manufactured" packages and UpdateHistory.xml files when submitting packages to the ingestion client to be signed.</source>
          <target>The latest version of the ingestion client now implements functionality to support partial image signing, mitigating the need for you to manually create your own "manufactured" packages and UpdateHistory.xml files when submitting packages to the ingestion client to be signed.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Note that your account must have permission to sign partial images in order to utilize this new functionality otherwise any such submissions will fail.</source>
          <target>Note that your account must have permission to sign partial images in order to utilize this new functionality otherwise any such submissions will fail.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Contextual Individual Package Signing</source>
          <target>Contextual Individual Package Signing</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>OEMs might leverage a package caching mechanism to optimize their build process.</source>
          <target>OEMs might leverage a package caching mechanism to optimize their build process.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>In this process, retail signed packages are cached so that they may be re-used across multiple images.</source>
          <target>In this process, retail signed packages are cached so that they may be re-used across multiple images.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Therefore any new code must be retail signed and then deposited into the package cache in order to re-use it across multiple images.</source>
          <target>Therefore any new code must be retail signed and then deposited into the package cache in order to re-use it across multiple images.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>To do so, you should create a new package that contains the binary and an image.</source>
          <target>To do so, you should create a new package that contains the binary and an image.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>However, instead of submitting all the packages from the image to be retail signed, you can now submit only the package that contains the fix.</source>
          <target>However, instead of submitting all the packages from the image to be retail signed, you can now submit only the package that contains the fix.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">`Initialize-FirmwareSubmission`</data>
          <data id="id2">`-TypeOfSubmission PartialImage`</data>
        </originalData>
        <segment state="initial">
          <source>To do so, use the ingestion client's <ph dataRef="id1" id="ph1" /> cmdlet with <ph dataRef="id2" id="ph2" />, specifying the directory that contains the new package to be retail signed, along with the UpdateHistory.xml file created during image generation into a directory.</source>
          <target>To do so, use the ingestion client's <ph dataRef="id1" id="ph1" /> cmdlet with <ph dataRef="id2" id="ph2" />, specifying the directory that contains the new package to be retail signed, along with the UpdateHistory.xml file created during image generation into a directory.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>The Ingestion Client will retrieve the package and the UpdateHistory.xml file.</source>
          <target>The Ingestion Client will retrieve the package and the UpdateHistory.xml file.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Microsoft will then validate the submission based on the UpdateHistory.xml file and retail sign the package.</source>
          <target>Microsoft will then validate the submission based on the UpdateHistory.xml file and retail sign the package.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">`Get-SignedFirmwareSubmission`</data>
        </originalData>
        <segment state="initial">
          <source>You can then use the <ph dataRef="id1" id="ph1" /> cmdlet to obtain the retail signed package and place it in the package cache.</source>
          <target>You can then use the <ph dataRef="id1" id="ph1" /> cmdlet to obtain the retail signed package and place it in the package cache.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Note that your account must have permission to sign individual packages in this way in order to utilize this new functionality otherwise any such submissions will fail.</source>
          <target>Note that your account must have permission to sign individual packages in this way in order to utilize this new functionality otherwise any such submissions will fail.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Context Free Individual Package Signing</source>
          <target>Context Free Individual Package Signing</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>OEMs can now also use the ingestion client to create "context free" submissions.</source>
          <target>OEMs can now also use the ingestion client to create "context free" submissions.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>For example, if you need to create a new MMOS package based on changes to a product line that have been made recently, you can place the MMOS package in a directory, specifying the directory when using the Ingestion Client during the submission as well as specifying that the submission is “context free."</source>
          <target>For example, if you need to create a new MMOS package based on changes to a product line that have been made recently, you can place the MMOS package in a directory, specifying the directory when using the Ingestion Client during the submission as well as specifying that the submission is “context free."</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Such package submissions are signed based solely on the EKU combination.</source>
          <target>Such package submissions are signed based solely on the EKU combination.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Partial Image Package Signing Example</source>
          <target>Partial Image Package Signing Example</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>To prepare a partial FFU to be signed:</source>
          <target>To prepare a partial FFU to be signed:</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>