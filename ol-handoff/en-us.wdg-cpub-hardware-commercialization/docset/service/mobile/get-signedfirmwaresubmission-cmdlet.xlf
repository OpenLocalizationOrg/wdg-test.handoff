<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\service\mobile\get-signedfirmwaresubmission-cmdlet.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">8ace00f5a0452b18d2a157cafc9c9d0d6b8882d0</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Get-SignedFirmwareSubmission cmdlet</source>
          <target>Get-SignedFirmwareSubmission cmdlet</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Get-SignedFirmwareSubmission cmdlet</source>
          <target>Get-SignedFirmwareSubmission cmdlet</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Get-SignedFirmwareSubmission cmdlet</source>
          <target>Get-SignedFirmwareSubmission cmdlet</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>The code-signed firmware can be retrieved after a successful submission to Microsoft.</source>
          <target>The code-signed firmware can be retrieved after a successful submission to Microsoft.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>If the submission is successful, the OEM receives a ticket number.</source>
          <target>If the submission is successful, the OEM receives a ticket number.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet to retrieve the signed submission for the code sign ticket number.</source>
          <target>Use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet to retrieve the signed submission for the code sign ticket number.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The following is the syntax for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet.</source>
          <target>The following is the syntax for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Syntax</source>
          <target>Syntax</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Parameters</source>
          <target>Parameters</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Typically, the only parameters that are specified for this cmdlet are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TicketId</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadDirectory</pc>.</source>
          <target>Typically, the only parameters that are specified for this cmdlet are <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TicketId</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DownloadDirectory</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>The cmdlet obtains the default values for the rest of the parameters from a configuration file.</source>
          <target>The cmdlet obtains the default values for the rest of the parameters from a configuration file.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>By default, this configuration file is placed by the installer at: %ProgramFiles(x86)%<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />WP Ingestion Client<ph dataRef="id3" id="ph3" />Modules<ph dataRef="id4" id="ph4" />Microsoft.Phone.PartnerServices.Client<ph dataRef="id5" id="ph5" /> Microsoft.Phone.PartnerServices.Client.dll.config</source>
          <target>By default, this configuration file is placed by the installer at: %ProgramFiles(x86)%<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />WP Ingestion Client<ph dataRef="id3" id="ph3" />Modules<ph dataRef="id4" id="ph4" />Microsoft.Phone.PartnerServices.Client<ph dataRef="id5" id="ph5" /> Microsoft.Phone.PartnerServices.Client.dll.config</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>An example config file is provided in the Config file section of this document.</source>
          <target>An example config file is provided in the Config file section of this document.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>If any of the non-required parameters are explicitly specified on the command line, those values override the default values that are stored in the configuration file.</source>
          <target>If any of the non-required parameters are explicitly specified on the command line, those values override the default values that are stored in the configuration file.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">`Microsoft.Phone.PartnerServices.SignedFirmwareSubmission`</data>
        </originalData>
        <segment state="initial">
          <source>To support Windows PowerShell automation scripts, the cmdlet returns an object of type <ph dataRef="id1" id="ph1" />:</source>
          <target>To support Windows PowerShell automation scripts, the cmdlet returns an object of type <ph dataRef="id1" id="ph1" />:</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>This object can be processed using Windows PowerShell or displayed on the command line.</source>
          <target>This object can be processed using Windows PowerShell or displayed on the command line.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>The following sections show common usage scenarios and common error cases for retrieving signed submissions.</source>
          <target>The following sections show common usage scenarios and common error cases for retrieving signed submissions.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Many of these commands are shown here as multiple lines, but must be entered as a single line in Windows PowerShell.</source>
          <target>Many of these commands are shown here as multiple lines, but must be entered as a single line in Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Exceptions</source>
          <target>Exceptions</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>The following exceptions are thrown for their corresponding error scenarios.</source>
          <target>The following exceptions are thrown for their corresponding error scenarios.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>FaultException<ph dataRef="id1" id="ph1" />ArgumentFaultDetail</source>
          <target>FaultException<ph dataRef="id1" id="ph1" />ArgumentFaultDetail</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>An invalid ticket ID was provided.</source>
          <target>An invalid ticket ID was provided.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>The ticket ID was either null or empty.</source>
          <target>The ticket ID was either null or empty.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>FaultException<ph dataRef="id1" id="ph1" />InvalidOperationFaultDetail</source>
          <target>FaultException<ph dataRef="id1" id="ph1" />InvalidOperationFaultDetail</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>An invalid ticket ID was provided.</source>
          <target>An invalid ticket ID was provided.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The ticket ID is not defined in the service.</source>
          <target>The ticket ID is not defined in the service.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The authenticated user is not the owner of the firmware submission.</source>
          <target>The authenticated user is not the owner of the firmware submission.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>The ticket ID is a resubmission ticket.</source>
          <target>The ticket ID is a resubmission ticket.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Code signing is still in progress.</source>
          <target>Code signing is still in progress.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Code signing is pending manual intervention from Microsoft.</source>
          <target>Code signing is pending manual intervention from Microsoft.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>No OEM action required.</source>
          <target>No OEM action required.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Code signing has failed.</source>
          <target>Code signing has failed.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Scenarios</source>
          <target>Scenarios</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Retrieve a successfully signed submission</source>
          <target>Retrieve a successfully signed submission</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Scenario prerequisites</source>
          <target>Scenario prerequisites</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>A firmware request has been successfully submitted for code signing.</source>
          <target>A firmware request has been successfully submitted for code signing.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>The submission ticket that is returned by the firmware request is available.</source>
          <target>The submission ticket that is returned by the firmware request is available.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>A SUCCESS email notification that indicates that the firmware submission has been successfully signed has been received by the OEM.</source>
          <target>A SUCCESS email notification that indicates that the firmware submission has been successfully signed has been received by the OEM.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Example usage with expected output</source>
          <target>Example usage with expected output</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Retrieve the signed submission for a ticket and store the result object in a Windows PowerShell variable:</source>
          <target>Retrieve the signed submission for a ticket and store the result object in a Windows PowerShell variable:</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Show the result on the console:</source>
          <target>Show the result on the console:</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Attempt to retrieve a signed firmware submission before completion</source>
          <target>Attempt to retrieve a signed firmware submission before completion</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Scenario prerequisites</source>
          <target>Scenario prerequisites</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>A firmware request has been successfully submitted for code signing.</source>
          <target>A firmware request has been successfully submitted for code signing.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>The submission ticket that is returned by the firmware request is available.</source>
          <target>The submission ticket that is returned by the firmware request is available.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>The firmware code signing process is still in progress.</source>
          <target>The firmware code signing process is still in progress.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>That is, the ticket has been issued, but a SUCCESS email has not been received.</source>
          <target>That is, the ticket has been issued, but a SUCCESS email has not been received.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Example usage with expected output</source>
          <target>Example usage with expected output</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Attempt to retrieve the signed submission for a ticket that is still in process:</source>
          <target>Attempt to retrieve the signed submission for a ticket that is still in process:</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>This state is indicated by the returned reason, “Code signing is still in progress”.</source>
          <target>This state is indicated by the returned reason, “Code signing is still in progress”.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>If a custom PowerShell script is being used, it can be programmed to catch an exception (Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException).</source>
          <target>If a custom PowerShell script is being used, it can be programmed to catch an exception (Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException).</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>That exception can be examined to determine if the submission has completed.</source>
          <target>That exception can be examined to determine if the submission has completed.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>The following code sample illustrates how to extract the error information from the returned result object.</source>
          <target>The following code sample illustrates how to extract the error information from the returned result object.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>A loop can be constructed to wait (for at least 30 minutes) and then try again to determine if the submission has completed.</source>
          <target>A loop can be constructed to wait (for at least 30 minutes) and then try again to determine if the submission has completed.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>You are strongly advised that such a polling style must not be invoked with intervals of less than 30 minutes to avoid overwhelming the update server.</source>
          <target>You are strongly advised that such a polling style must not be invoked with intervals of less than 30 minutes to avoid overwhelming the update server.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Attempt to retrieve a signed firmware submission when the request has failed</source>
          <target>Attempt to retrieve a signed firmware submission when the request has failed</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Scenario prerequisites</source>
          <target>Scenario prerequisites</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>A firmware request has been successfully submitted for code signing.</source>
          <target>A firmware request has been successfully submitted for code signing.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>The submission ticket that is returned by the firmware request is available.</source>
          <target>The submission ticket that is returned by the firmware request is available.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>The firmware code signing process has failed permanently.</source>
          <target>The firmware code signing process has failed permanently.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>That is, a FAILURE email notification has been received by the OEM for the ticket.</source>
          <target>That is, a FAILURE email notification has been received by the OEM for the ticket.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Example usage with expected output</source>
          <target>Example usage with expected output</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Attempt to retrieve the signed submission for a ticket that has failed permanently:</source>
          <target>Attempt to retrieve the signed submission for a ticket that has failed permanently:</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Attempt to retrieve a signed firmware submission when the ticket does not exist</source>
          <target>Attempt to retrieve a signed firmware submission when the ticket does not exist</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Scenario prerequisites</source>
          <target>Scenario prerequisites</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>An OEM is attempting to retrieve a ticket number that does not exist.</source>
          <target>An OEM is attempting to retrieve a ticket number that does not exist.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Example usage with expected output</source>
          <target>Example usage with expected output</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Help documentation from PowerShell</source>
          <target>Help documentation from PowerShell</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The following is the help documentation for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet from Windows PowerShell.</source>
          <target>The following is the help documentation for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get-SignedFirmwareSubmission</pc> cmdlet from Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Requirements</source>
          <target>Requirements</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header:</pc> None</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header:</pc> None</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Submit binaries to be retail signed</source>
          <target>Submit binaries to be retail signed</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>