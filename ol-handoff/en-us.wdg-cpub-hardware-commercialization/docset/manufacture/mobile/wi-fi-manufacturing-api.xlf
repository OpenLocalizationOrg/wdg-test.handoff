<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\mobile\wi-fi-manufacturing-api.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">227c6a850aa6b51951dc908f5690a7ea0dc98e10</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Wi-Fi manufacturing API</source>
          <target>Wi-Fi manufacturing API</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Wi-Fi manufacturing API</source>
          <target>Wi-Fi manufacturing API</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Wi-Fi manufacturing API</source>
          <target>Wi-Fi manufacturing API</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>As part of the manufacturing process, you must run tests to ensure that the components are integrated, functioning, and calibrated properly, and that they meet all regulatory requirements.</source>
          <target>As part of the manufacturing process, you must run tests to ensure that the components are integrated, functioning, and calibrated properly, and that they meet all regulatory requirements.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>The API members documented in this section are interfaces defined for IHVs to use to write tests applications for the Wi-Fi chipset.</source>
          <target>The API members documented in this section are interfaces defined for IHVs to use to write tests applications for the Wi-Fi chipset.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This API set requires that the Wi-Fi driver conform to the driver OID specification.</source>
          <target>This API set requires that the Wi-Fi driver conform to the driver OID specification.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>This test API must only be used in manufacturing mode.</source>
          <target>This test API must only be used in manufacturing mode.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](determine-if-mmos-is-running.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Determine if MMOS is running</pc>.</source>
          <target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Determine if MMOS is running</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>In this section</source>
          <target>In this section</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>The following interfaces are defined for this API.</source>
          <target>The following interfaces are defined for this API.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>WlanMTEEnumAdapters</source>
          <target>WlanMTEEnumAdapters</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Returns the list of the adapters that are recognized by the Wi-Fi stack.</source>
          <target>Returns the list of the adapters that are recognized by the Wi-Fi stack.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>WlanMTEOpenHandle</source>
          <target>WlanMTEOpenHandle</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Opens a handle to the driver based on the interface GUID specified and returns the handle to the caller.</source>
          <target>Opens a handle to the driver based on the interface GUID specified and returns the handle to the caller.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>WlanMTECloseHandle</source>
          <target>WlanMTECloseHandle</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wlanmteopenhandle.md)</data>
        </originalData>
        <segment state="initial">
          <source>Closes a handle to the driver previously opened by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WlanMTEOpenHandle</pc>.</source>
          <target>Closes a handle to the driver previously opened by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WlanMTEOpenHandle</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>WlanMTERegisterCallbackHandler</source>
          <target>WlanMTERegisterCallbackHandler</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Registers a handler that will be called whenever the driver invokes a callback for a manufacturing functionality event.</source>
          <target>Registers a handler that will be called whenever the driver invokes a callback for a manufacturing functionality event.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>WlanMTEDeRegisterCallbackHandler</source>
          <target>WlanMTEDeRegisterCallbackHandler</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Unregisters a callback handler so that it will no longer be called when a manufacturing-related functionality event occurs.</source>
          <target>Unregisters a callback handler so that it will no longer be called when a manufacturing-related functionality event occurs.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>WlanMTEGetVendorInfo</source>
          <target>WlanMTEGetVendorInfo</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Requests vendor-specific information, such as the vendor ID and vendor description.</source>
          <target>Requests vendor-specific information, such as the vendor ID and vendor description.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>WlanMTEResetAdapter</source>
          <target>WlanMTEResetAdapter</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Resets the Wi-Fi adapter.</source>
          <target>Resets the Wi-Fi adapter.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>WlanMTEQueryMacAddress</source>
          <target>WlanMTEQueryMacAddress</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Queries the MAC address of the Wi-Fi adapter.</source>
          <target>Queries the MAC address of the Wi-Fi adapter.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>WlanMTEQueryPhyTypes</source>
          <target>WlanMTEQueryPhyTypes</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Queries the list of 802.11 PHY types configured on the adapter.</source>
          <target>Queries the list of 802.11 PHY types configured on the adapter.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>WlanMTEStartSelfTest</source>
          <target>WlanMTEStartSelfTest</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Starts a preconfigured set of self-tests.</source>
          <target>Starts a preconfigured set of self-tests.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>WlanMTEQuerySelfTestResult</source>
          <target>WlanMTEQuerySelfTestResult</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Queries the driver for the results of a previously requested self-test.</source>
          <target>Queries the driver for the results of a previously requested self-test.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>WlanMTERxSignal</source>
          <target>WlanMTERxSignal</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Queries information about the received signal at a specific band and channel.</source>
          <target>Queries information about the received signal at a specific band and channel.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>WlanMTETxSignal</source>
          <target>WlanMTETxSignal</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Requests the driver to transmit a signal at the specified band and channel.</source>
          <target>Requests the driver to transmit a signal at the specified band and channel.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>WlanMTEQueryADC</source>
          <target>WlanMTEQueryADC</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Requests the value of the transmitted signal when performed over an open loop.</source>
          <target>Requests the value of the transmitted signal when performed over an open loop.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>WlanMTESetData</source>
          <target>WlanMTESetData</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Requests that the driver write data to a specified location and offset from that location.</source>
          <target>Requests that the driver write data to a specified location and offset from that location.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>WlanMTEQueryData</source>
          <target>WlanMTEQueryData</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Queries the driver for data at a specific location and offset from that location.</source>
          <target>Queries the driver for data at a specific location and offset from that location.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>WlanMTESleep</source>
          <target>WlanMTESleep</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Requests that the driver to go to sleep either for a specified time interval or indefinitely until an awake request is sent.</source>
          <target>Requests that the driver to go to sleep either for a specified time interval or indefinitely until an awake request is sent.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>WlanMTEAwake</source>
          <target>WlanMTEAwake</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Requests that the driver wake up from its current sleep state.</source>
          <target>Requests that the driver wake up from its current sleep state.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Adding Wi-Fi manufacturing test support to the OID interface</source>
          <target>Adding Wi-Fi manufacturing test support to the OID interface</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>