<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\mobile\wlanmtestartselftest.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">c31eb0c4fdcb55214e30a2cd915ea6138a8f01c9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>WlanMTEStartSelfTest</source>
          <target>WlanMTEStartSelfTest</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>WlanMTEStartSelfTest</source>
          <target>WlanMTEStartSelfTest</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>WlanMTEStartSelfTest</source>
          <target>WlanMTEStartSelfTest</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Starts a preconfigured set of self-tests.</source>
          <target>Starts a preconfigured set of self-tests.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Syntax</source>
          <target>Syntax</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Parameters</source>
          <target>Parameters</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>hAdapter</source>
          <target>hAdapter</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">[</data>
          <data id="id3">](wlanmteopenhandle.md)</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The handle to the Wi-Fi adapter, obtained by calling <pc dataRefEnd="id3" dataRefStart="id2" id="p1">WlanMTEOpenHandle</pc>.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The handle to the Wi-Fi adapter, obtained by calling <pc dataRefEnd="id3" dataRefStart="id2" id="p1">WlanMTEOpenHandle</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>eTestType</source>
          <target>eTestType</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The type of self-test requested.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The type of self-test requested.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The values of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">eTestType</pc> are defined by the DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE enumeration, shown below:</source>
          <target>The values of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">eTestType</pc> are defined by the DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE enumeration, shown below:</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>uTestID</source>
          <target>uTestID</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The ID for the self-test requested.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The ID for the self-test requested.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>pvContext</source>
          <target>pvContext</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The context that uniquely identifies this request in the callback and in the subsequent results query.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The context that uniquely identifies this request in the callback and in the subsequent results query.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>uPinBitMask</source>
          <target>uPinBitMask</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The bit mask for adapter pins to be tested.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The bit mask for adapter pins to be tested.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>uInBufLen</source>
          <target>uInBufLen</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The length of the buffer for passing in any additional information about the self-test.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The length of the buffer for passing in any additional information about the self-test.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>pucInBuffer</source>
          <target>pucInBuffer</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The buffer that will contain additional information about the self-test.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The buffer that will contain additional information about the self-test.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Remarks</source>
          <target>Remarks</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
        </originalData>
        <segment state="initial">
          <source>On completion of the self-test, the application’s callback handler is called, if one was registered, with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">dot11<ph dataRef="id5" id="ph1" />manufacturing<ph dataRef="id6" id="ph2" />callback<ph dataRef="id7" id="ph3" />self<ph dataRef="id8" id="ph4" />test<ph dataRef="id9" id="ph5" />complete</pc>, and the result of the self-test is included.</source>
          <target>On completion of the self-test, the application’s callback handler is called, if one was registered, with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">dot11<ph dataRef="id5" id="ph1" />manufacturing<ph dataRef="id6" id="ph2" />callback<ph dataRef="id7" id="ph3" />self<ph dataRef="id8" id="ph4" />test<ph dataRef="id9" id="ph5" />complete</pc>, and the result of the self-test is included.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Return Value</source>
          <target>Return Value</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the function succeeds, the return value is ERROR<ph dataRef="id1" id="ph1" />SUCCESS.</source>
          <target>If the function succeeds, the return value is ERROR<ph dataRef="id1" id="ph1" />SUCCESS.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>If the function fails, the return value is one of the system error codes.</source>
          <target>If the function fails, the return value is one of the system error codes.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The following table lists the error codes that may be returned.</source>
          <target>The following table lists the error codes that may be returned.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Error code</source>
          <target>Error code</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>ERROR_INVALID_PARAMETER</source>
          <target>ERROR_INVALID_PARAMETER</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
          <data id="id3">&lt;em&gt;</data>
          <data id="id4">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Returned when the <ph dataRef="id1" id="ph1" />uInBufLen<ph dataRef="id2" id="ph2" /> parameter is present but the <ph dataRef="id3" id="ph3" />pucInBuffer<ph dataRef="id4" id="ph4" /> parameter is NULL.</source>
          <target>Returned when the <ph dataRef="id1" id="ph1" />uInBufLen<ph dataRef="id2" id="ph2" /> parameter is present but the <ph dataRef="id3" id="ph3" />pucInBuffer<ph dataRef="id4" id="ph4" /> parameter is NULL.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>ERROR_INVALID_HANDLE</source>
          <target>ERROR_INVALID_HANDLE</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Returned if the adapter handle specified by the <ph dataRef="id1" id="ph1" />hAdapter<ph dataRef="id2" id="ph2" /> parameter is invalid.</source>
          <target>Returned if the adapter handle specified by the <ph dataRef="id1" id="ph1" />hAdapter<ph dataRef="id2" id="ph2" /> parameter is invalid.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>ERROR_OUTOFMEMORY</source>
          <target>ERROR_OUTOFMEMORY</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Returned when sufficient memory to perform the operation cannot be allocated.</source>
          <target>Returned when sufficient memory to perform the operation cannot be allocated.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Requirements</source>
          <target>Requirements</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header:</pc> wifimte.w</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Header:</pc> wifimte.w</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Wi-Fi manufacturing API</source>
          <target>Wi-Fi manufacturing API</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>