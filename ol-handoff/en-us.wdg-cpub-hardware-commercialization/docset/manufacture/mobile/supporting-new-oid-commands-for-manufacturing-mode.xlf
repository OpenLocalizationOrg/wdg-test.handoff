<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\mobile\supporting-new-oid-commands-for-manufacturing-mode.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">700e3af13f4a533baa5e384e5be6bf59b112f58c</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Supporting new OID commands for manufacturing mode</source>
          <target>Supporting new OID commands for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Supporting new OID commands for manufacturing mode</source>
          <target>Supporting new OID commands for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Supporting new OID commands for manufacturing mode</source>
          <target>Supporting new OID commands for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>When running in manufacturing mode, Wi-Fi miniport drivers must add support for the following new OID commands.</source>
          <target>When running in manufacturing mode, Wi-Fi miniport drivers must add support for the following new OID commands.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>The driver should ensure that the device is currently in manufacturing mode prior to calling any of these commands.</source>
          <target>The driver should ensure that the device is currently in manufacturing mode prior to calling any of these commands.</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](determine-if-mmos-is-running.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Determine if MMOS is running</pc>.</source>
          <target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Determine if MMOS is running</pc>.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Some of the parameters specified in the API may be IHV-specific.</source>
          <target>Some of the parameters specified in the API may be IHV-specific.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>OID<ph dataRef="id1" id="ph1" />DOT11<ph dataRef="id2" id="ph2" />MANUFACTURING<ph dataRef="id3" id="ph3" />TEST</source>
          <target>OID<ph dataRef="id1" id="ph1" />DOT11<ph dataRef="id2" id="ph2" />MANUFACTURING<ph dataRef="id3" id="ph3" />TEST</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>OID<ph dataRef="id1" id="ph1" />DOT11<ph dataRef="id2" id="ph2" />MANUFACTURING<ph dataRef="id3" id="ph3" />TEST is called as a method request in the driver to perform a specific test.</source>
          <target>OID<ph dataRef="id1" id="ph1" />DOT11<ph dataRef="id2" id="ph2" />MANUFACTURING<ph dataRef="id3" id="ph3" />TEST is called as a method request in the driver to perform a specific test.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>This OID should never be used during normal operation.</source>
          <target>This OID should never be used during normal operation.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>dot11ManufacturingTestType</source>
          <target>dot11ManufacturingTestType</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> Specifies the manufacturing test to be run.</source>
          <target>in<ph dataRef="id1" id="ph1" /> Specifies the manufacturing test to be run.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The data type for this member is one of the values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />TEST<ph dataRef="id5" id="ph3" />TYPE</pc> enumeration.</source>
          <target>The data type for this member is one of the values of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />TEST<ph dataRef="id5" id="ph3" />TYPE</pc> enumeration.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>The DOT11 manufacturing test type enumeration is defined as follows:</source>
          <target>The DOT11 manufacturing test type enumeration is defined as follows:</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>uBufferLength</source>
          <target>uBufferLength</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The length, in bytes, of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> structure and any additional data specific to the test appended at the end.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The length, in bytes, of the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> structure and any additional data specific to the test appended at the end.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>ucBuffer</source>
          <target>ucBuffer</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The buffer containing optional data as specified by the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11DiagnosticsTestType</pc> member.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The buffer containing optional data as specified by the <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11DiagnosticsTestType</pc> member.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />start</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />start</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />self<ph dataRef="id6" id="ph4" />start</pc> command is called to request the driver to test WLAN IC connectivity, FEM IC connectivity, or the WLAN-BT coexistence interface.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />self<ph dataRef="id6" id="ph4" />start</pc> command is called to request the driver to test WLAN IC connectivity, FEM IC connectivity, or the WLAN-BT coexistence interface.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />DIAGNOSTIC<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />BT<ph dataRef="id7" id="ph5" />COEXISTENCE</pc> is only applicable if the WLAN and Bluetooth chips are on separate ICs.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />DIAGNOSTIC<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />BT<ph dataRef="id7" id="ph5" />COEXISTENCE</pc> is only applicable if the WLAN and Bluetooth chips are on separate ICs.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>If they are on the same module, this test is not supported and the miniport should return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />NOT<ph dataRef="id5" id="ph3" />SUPPORTED</pc>.</source>
          <target>If they are on the same module, this test is not supported and the miniport should return <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />NOT<ph dataRef="id5" id="ph3" />SUPPORTED</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
        </originalData>
        <segment state="initial">
          <source>When called, the driver should run the requested tests as defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />SET<ph dataRef="id7" id="ph5" />PARAMS</pc> structure and return success when the tests have been started.</source>
          <target>When called, the driver should run the requested tests as defined in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />SET<ph dataRef="id7" id="ph5" />PARAMS</pc> structure and return success when the tests have been started.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
          <data id="id13">\_</data>
          <data id="id14">\_</data>
          <data id="id15">\_</data>
        </originalData>
        <segment state="initial">
          <source>On completion, whether the tests have succeeded or failed, the driver should indicate the test status by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback handler, with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />self<ph dataRef="id14" id="ph8" />test<ph dataRef="id15" id="ph9" />complete</pc> and the status describing the result of the test.</source>
          <target>On completion, whether the tests have succeeded or failed, the driver should indicate the test status by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback handler, with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />self<ph dataRef="id14" id="ph8" />test<ph dataRef="id15" id="ph9" />complete</pc> and the status describing the result of the test.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
        </originalData>
        <segment state="initial">
          <source>The driver will then call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OID<ph dataRef="id3" id="ph1" />DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> oid with the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">dot11<ph dataRef="id8" id="ph4" />manufacturing<ph dataRef="id9" id="ph5" />test<ph dataRef="id10" id="ph6" />self<ph dataRef="id11" id="ph7" />query<ph dataRef="id12" id="ph8" />result</pc> command to query the detailed result of the test.</source>
          <target>The driver will then call the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OID<ph dataRef="id3" id="ph1" />DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> oid with the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">dot11<ph dataRef="id8" id="ph4" />manufacturing<ph dataRef="id9" id="ph5" />test<ph dataRef="id10" id="ph6" />self<ph dataRef="id11" id="ph7" />query<ph dataRef="id12" id="ph8" />result</pc> command to query the detailed result of the test.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>SelfTestType</source>
          <target>SelfTestType</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> Specifies the type of self-test to be run by the driver.</source>
          <target>in<ph dataRef="id1" id="ph1" /> Specifies the type of self-test to be run by the driver.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The data type for this member is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE</pc> enumeration with one of the following values:</source>
          <target>The data type for this member is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE</pc> enumeration with one of the following values:</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />INTERFACE</source>
          <target>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />INTERFACE</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Control and data interface to WLAN</source>
          <target>Control and data interface to WLAN</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Clock request</source>
          <target>Clock request</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Sleep clock</source>
          <target>Sleep clock</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Interrupt and power supply lines</source>
          <target>Interrupt and power supply lines</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>All related connections</source>
          <target>All related connections</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />RF<ph dataRef="id5" id="ph5" />INTERFACE</source>
          <target>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />RF<ph dataRef="id5" id="ph5" />INTERFACE</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Control and RF interface to FEM IC</source>
          <target>Control and RF interface to FEM IC</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>FEM power supply</source>
          <target>FEM power supply</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Transmit signal on loopback path from TX interface to RX interface and validate.</source>
          <target>Transmit signal on loopback path from TX interface to RX interface and validate.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />BT<ph dataRef="id5" id="ph5" />COEXISTENCE</source>
          <target>DOT11<ph dataRef="id1" id="ph1" />MANUFACTURING<ph dataRef="id2" id="ph2" />SELF<ph dataRef="id3" id="ph3" />TEST<ph dataRef="id4" id="ph4" />BT<ph dataRef="id5" id="ph5" />COEXISTENCE</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Set line states from Bluetooth side and read line states from WLAN side</source>
          <target>Set line states from Bluetooth side and read line states from WLAN side</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Verify each pin’s state</source>
          <target>Verify each pin’s state</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>uTestID</source>
          <target>uTestID</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> ID of the test to be run.</source>
          <target>in<ph dataRef="id1" id="ph1" /> ID of the test to be run.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>uPinBitMask</source>
          <target>uPinBitMask</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> Bit mask of pins to be tested.</source>
          <target>in<ph dataRef="id1" id="ph1" /> Bit mask of pins to be tested.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>pvContext</source>
          <target>pvContext</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The context value to be returned to the application by using <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11<ph dataRef="id4" id="ph2" />manufacturing<ph dataRef="id5" id="ph3" />callback<ph dataRef="id6" id="ph4" />self<ph dataRef="id7" id="ph5" />test<ph dataRef="id8" id="ph6" />complete callback</pc> when the driver has completed the tests.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The context value to be returned to the application by using <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11<ph dataRef="id4" id="ph2" />manufacturing<ph dataRef="id5" id="ph3" />callback<ph dataRef="id6" id="ph4" />self<ph dataRef="id7" id="ph5" />test<ph dataRef="id8" id="ph6" />complete callback</pc> when the driver has completed the tests.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>uBufferLength</source>
          <target>uBufferLength</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in, optional<ph dataRef="id1" id="ph1" /> The length of the buffer containing additional input for the self-test.</source>
          <target>in, optional<ph dataRef="id1" id="ph1" /> The length of the buffer containing additional input for the self-test.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>ucBufferIn</source>
          <target>ucBufferIn</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in, optional<ph dataRef="id1" id="ph1" /> The buffer that contains additional input for the self-test.</source>
          <target>in, optional<ph dataRef="id1" id="ph1" /> The buffer that contains additional input for the self-test.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />query<ph dataRef="id5" id="ph5" />result</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />query<ph dataRef="id5" id="ph5" />result</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>This command gets the results of a previously requested self-test.</source>
          <target>This command gets the results of a previously requested self-test.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
          <data id="id13">\_</data>
          <data id="id14">\_</data>
          <data id="id15">\_</data>
        </originalData>
        <segment state="initial">
          <source>It should only be called when the driver has indicated that the self-test is complete by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />self<ph dataRef="id14" id="ph8" />test<ph dataRef="id15" id="ph9" />complete</pc> and the status describing the result of the test.</source>
          <target>It should only be called when the driver has indicated that the self-test is complete by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />self<ph dataRef="id14" id="ph8" />test<ph dataRef="id15" id="ph9" />complete</pc> and the status describing the result of the test.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>SelfTestType</source>
          <target>SelfTestType</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> Specifies the type of self-test whose result is being queried.</source>
          <target>in<ph dataRef="id1" id="ph1" /> Specifies the type of self-test whose result is being queried.</target>
        </segment>
      </unit>
      <unit id="157">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The data type for this member is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE</pc> enumeration.</source>
          <target>The data type for this member is the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DOT11<ph dataRef="id3" id="ph1" />MANUFACTURING<ph dataRef="id4" id="ph2" />SELF<ph dataRef="id5" id="ph3" />TEST<ph dataRef="id6" id="ph4" />TYPE</pc> enumeration.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>uTestID</source>
          <target>uTestID</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> ID of the test to be run.</source>
          <target>in<ph dataRef="id1" id="ph1" /> ID of the test to be run.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>bResult</source>
          <target>bResult</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> The result of the test.</source>
          <target>out<ph dataRef="id1" id="ph1" /> The result of the test.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">True</pc> if the test passed, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc> if it failed.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">True</pc> if the test passed, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">False</pc> if it failed.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>uPinFailedBitMask</source>
          <target>uPinFailedBitMask</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> The bit mask of any detected PIN faults.</source>
          <target>out<ph dataRef="id1" id="ph1" /> The bit mask of any detected PIN faults.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>pvContext</source>
          <target>pvContext</target>
        </segment>
      </unit>
      <unit id="166">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The context used when the driver indicated that the tests were complete.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The context used when the driver indicated that the tests were complete.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>uBytesWrittenOut</source>
          <target>uBytesWrittenOut</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> The length of the buffer that contains any additional returned output from the self-test.</source>
          <target>out<ph dataRef="id1" id="ph1" /> The length of the buffer that contains any additional returned output from the self-test.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>ucBufferOut</source>
          <target>ucBufferOut</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source>in, out, optional<ph dataRef="id1" id="ph1" /> The buffer of length <pc dataRefEnd="id3" dataRefStart="id2" id="p1">uBytesWrittenOut</pc> that contains additional output from the self-test.</source>
          <target>in, out, optional<ph dataRef="id1" id="ph1" /> The buffer of length <pc dataRefEnd="id3" dataRefStart="id2" id="p1">uBytesWrittenOut</pc> that contains additional output from the self-test.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />rx</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />rx</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />rx</pc> read-only command tests and verifies that there is connectivity between the antenna port and WLAN IC.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />rx</pc> read-only command tests and verifies that there is connectivity between the antenna port and WLAN IC.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>To test this connectivity, a signal generator generates a non-modulated carrier wave (CW) at a certain frequency and power that will be measured and returned by the device under test (DUT).</source>
          <target>To test this connectivity, a signal generator generates a non-modulated carrier wave (CW) at a certain frequency and power that will be measured and returned by the device under test (DUT).</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the band and/or channel setting are inconsistent, then the driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">STATUS<ph dataRef="id3" id="ph1" />INVALID<ph dataRef="id4" id="ph2" />PARAMETER</pc>.</source>
          <target>If the band and/or channel setting are inconsistent, then the driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">STATUS<ph dataRef="id3" id="ph1" />INVALID<ph dataRef="id4" id="ph2" />PARAMETER</pc>.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>bEnabled</source>
          <target>bEnabled</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">True</pc> if the driver detected a signal at the specified band and channel.</source>
          <target>out<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">True</pc> if the driver detected a signal at the specified band and channel.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">False</pc> if no signal was detected.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">False</pc> if no signal was detected.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Dot11Band</source>
          <target>Dot11Band</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The band on which the signal is to be detected.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The band on which the signal is to be detected.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>uChannel</source>
          <target>uChannel</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The channel on which the signal is to be detected.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The channel on which the signal is to be detected.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>The channel range depends on the band and supported PHYs.</source>
          <target>The channel range depends on the band and supported PHYs.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>PowerLevel</source>
          <target>PowerLevel</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> The power level of the received signal detected at the antenna, returned as the RSSI measured in dBm.</source>
          <target>out<ph dataRef="id1" id="ph1" /> The power level of the received signal detected at the antenna, returned as the RSSI measured in dBm.</target>
        </segment>
      </unit>
      <unit id="185">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>This is valid only if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bEnabled</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc>.</source>
          <target>This is valid only if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bEnabled</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc>.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />tx</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />tx</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />tx</pc> set-only command validates the connection from the chipset to the FEM output.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />tx</pc> set-only command validates the connection from the chipset to the FEM output.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>To perform this test, a signal analyzer is physically connected to the antenna port and the DUT is requested to transmit a CW with specific band, channel, and power level settings.</source>
          <target>To perform this test, a signal analyzer is physically connected to the antenna port and the DUT is requested to transmit a CW with specific band, channel, and power level settings.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>The driver also measures its own ADC reading for the transmitted signal and returns it to the application.</source>
          <target>The driver also measures its own ADC reading for the transmitted signal and returns it to the application.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>bEnable</source>
          <target>bEnable</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> If set, this command enables transmission.</source>
          <target>in<ph dataRef="id1" id="ph1" /> If set, this command enables transmission.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>If not set, transmission at the specified band and channel are disabled.</source>
          <target>If not set, transmission at the specified band and channel are disabled.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>bOpenLoop</source>
          <target>bOpenLoop</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> If set to <pc dataRefEnd="id3" dataRefStart="id2" id="p1">true</pc>, this parameter indicates that the driver is requested to use an open loop power control and return the read signal value in <pc dataRefEnd="id5" dataRefStart="id4" id="p2">ADCPowerLevel</pc>.</source>
          <target>in<ph dataRef="id1" id="ph1" /> If set to <pc dataRefEnd="id3" dataRefStart="id2" id="p1">true</pc>, this parameter indicates that the driver is requested to use an open loop power control and return the read signal value in <pc dataRefEnd="id5" dataRefStart="id4" id="p2">ADCPowerLevel</pc>.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">false</pc>, the driver will not use an open loop power control.</source>
          <target>If set to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">false</pc>, the driver will not use an open loop power control.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>If this value is set and the hardware does not support open loop power control, the driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />NOT<ph dataRef="id5" id="ph3" />SUPPORTED</pc>.</source>
          <target>If this value is set and the hardware does not support open loop power control, the driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />NOT<ph dataRef="id5" id="ph3" />SUPPORTED</pc>.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Dot11Band</source>
          <target>Dot11Band</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The band on which the signal is to be transmitted.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The band on which the signal is to be transmitted.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>uChannel</source>
          <target>uChannel</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The channel on which the signal is to be transmitted.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The channel on which the signal is to be transmitted.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>The channel range depends on the band and supported PHYs.</source>
          <target>The channel range depends on the band and supported PHYs.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>uSetPowerLevel</source>
          <target>uSetPowerLevel</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The power level of the transmitted signal.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The power level of the transmitted signal.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>This is returned as a percentage of the maximum possible power level.</source>
          <target>This is returned as a percentage of the maximum possible power level.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>ADCPowerLevel</source>
          <target>ADCPowerLevel</target>
        </segment>
      </unit>
      <unit id="206">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out, optional<ph dataRef="id1" id="ph1" /> The current signal level detected at the antenna, returned as a RAW value.</source>
          <target>out, optional<ph dataRef="id1" id="ph1" /> The current signal level detected at the antenna, returned as a RAW value.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>The interpretation of this value is specified by the IHV.</source>
          <target>The interpretation of this value is specified by the IHV.</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>This must be set if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bOpenLoop</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc> and the hardware supports it.</source>
          <target>This must be set if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bOpenLoop</pc> is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">True</pc> and the hardware supports it.</target>
        </segment>
      </unit>
      <unit id="209">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />set<ph dataRef="id4" id="ph4" />data</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />set<ph dataRef="id4" id="ph4" />data</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />set<ph dataRef="id6" id="ph4" />data</pc> set-only command enables the application to write data at a specific location.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />set<ph dataRef="id6" id="ph4" />data</pc> set-only command enables the application to write data at a specific location.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>uKey</source>
          <target>uKey</target>
        </segment>
      </unit>
      <unit id="212">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The key is IHV specific and can be either a reference to a specific register or an entry from a named table.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The key is IHV specific and can be either a reference to a specific register or an entry from a named table.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>uOffset</source>
          <target>uOffset</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The offset within the data.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The offset within the data.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>uBufferLength</source>
          <target>uBufferLength</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The number of data bytes to be contained in the buffer of additional test data.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The number of data bytes to be contained in the buffer of additional test data.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>ucBufferIn</source>
          <target>ucBufferIn</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The buffer containing the additional test data of length <pc dataRefEnd="id3" dataRefStart="id2" id="p1">uBufferLength</pc>.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The buffer containing the additional test data of length <pc dataRefEnd="id3" dataRefStart="id2" id="p1">uBufferLength</pc>.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />query<ph dataRef="id4" id="ph4" />data</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />query<ph dataRef="id4" id="ph4" />data</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />query<ph dataRef="id6" id="ph4" />data</pc> command enables the application to read data at a specific location.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />query<ph dataRef="id6" id="ph4" />data</pc> command enables the application to read data at a specific location.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>uKey</source>
          <target>uKey</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The key is IHV specific and can be either a reference to a specific register or an entry from a named table.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The key is IHV specific and can be either a reference to a specific register or an entry from a named table.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>uOffset</source>
          <target>uOffset</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The offset within the data.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The offset within the data.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>uBufferLength</source>
          <target>uBufferLength</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The number of data bytes to be read in the buffer.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The number of data bytes to be read in the buffer.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>uBytesRead</source>
          <target>uBytesRead</target>
        </segment>
      </unit>
      <unit id="228">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> The actual number of data bytes read by the driver.</source>
          <target>out<ph dataRef="id1" id="ph1" /> The actual number of data bytes read by the driver.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>ucBufferOut</source>
          <target>ucBufferOut</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>out<ph dataRef="id1" id="ph1" /> Contains the data read by the driver.</source>
          <target>out<ph dataRef="id1" id="ph1" /> Contains the data read by the driver.</target>
        </segment>
      </unit>
      <unit id="231">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />sleep</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />sleep</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />sleep</pc> command instructs the Wi-Fi chipset to go into its lowest power state, for either a specified time or indefinitely.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />sleep</pc> command instructs the Wi-Fi chipset to go into its lowest power state, for either a specified time or indefinitely.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>For this test, all radios should be turned off and the Wi-Fi chipset should be powered off.</source>
          <target>For this test, all radios should be turned off and the Wi-Fi chipset should be powered off.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>The test verifies that Wi-Fi can enter the sleep state, that the current consumption is within the specified limits, and that there is no current drawn when Wi-Fi is switched off.</source>
          <target>The test verifies that Wi-Fi can enter the sleep state, that the current consumption is within the specified limits, and that there is no current drawn when Wi-Fi is switched off.</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The driver can be awakened from the sleep state at any time by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command.</source>
          <target>The driver can be awakened from the sleep state at any time by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command.</target>
        </segment>
      </unit>
      <unit id="236">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>If the sleep time-out is set to −1, the driver should sleep indefinitely unless asked to wake up by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc>.</source>
          <target>If the sleep time-out is set to −1, the driver should sleep indefinitely unless asked to wake up by using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc>.</target>
        </segment>
      </unit>
      <unit id="237">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
          <data id="id13">\_</data>
          <data id="id14">\_</data>
        </originalData>
        <segment state="initial">
          <source>When the driver wakes up, either due to the time-out expiring or as a result of the awake command, it should indicate its awake status by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback handler with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />sleep<ph dataRef="id14" id="ph8" />complete</pc>.</source>
          <target>When the driver wakes up, either due to the time-out expiring or as a result of the awake command, it should indicate its awake status by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback handler with the <pc dataRefEnd="id8" dataRefStart="id7" id="p2">dot11ManufacturingCallbackType</pc> set to <pc dataRefEnd="id10" dataRefStart="id9" id="p3">dot11<ph dataRef="id11" id="ph5" />manufacturing<ph dataRef="id12" id="ph6" />callback<ph dataRef="id13" id="ph7" />sleep<ph dataRef="id14" id="ph8" />complete</pc>.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>uSleepTime</source>
          <target>uSleepTime</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">\]</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The amount of time for the driver to sleep, in milliseconds.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The amount of time for the driver to sleep, in milliseconds.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>If set to −1, the driver enters sleep state until awakened by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command.</source>
          <target>If set to −1, the driver enters sleep state until awakened by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>pvContext</source>
          <target>pvContext</target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">\]</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
        </originalData>
        <segment state="initial">
          <source>in<ph dataRef="id1" id="ph1" /> The context used when the driver returns the test completion state to the application by using <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11<ph dataRef="id4" id="ph2" />manufacturing<ph dataRef="id5" id="ph3" />callback<ph dataRef="id6" id="ph4" />sleep<ph dataRef="id7" id="ph5" />complete</pc>.</source>
          <target>in<ph dataRef="id1" id="ph1" /> The context used when the driver returns the test completion state to the application by using <pc dataRefEnd="id3" dataRefStart="id2" id="p1">dot11<ph dataRef="id4" id="ph2" />manufacturing<ph dataRef="id5" id="ph3" />callback<ph dataRef="id6" id="ph4" />sleep<ph dataRef="id7" id="ph5" />complete</pc>.</target>
        </segment>
      </unit>
      <unit id="243">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />awake</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />test<ph dataRef="id3" id="ph3" />awake</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command causes the Wi-Fi chipset to wake up from its lowest-power sleep state.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />test<ph dataRef="id5" id="ph3" />awake</pc> command causes the Wi-Fi chipset to wake up from its lowest-power sleep state.</target>
        </segment>
      </unit>
      <unit id="245">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>The driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">STATUS<ph dataRef="id3" id="ph1" />INVALID<ph dataRef="id4" id="ph2" />PARAMETER</pc> if this command is sent when the chipset is already awake.</source>
          <target>The driver returns <pc dataRefEnd="id2" dataRefStart="id1" id="p1">STATUS<ph dataRef="id3" id="ph1" />INVALID<ph dataRef="id4" id="ph2" />PARAMETER</pc> if this command is sent when the chipset is already awake.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Adding Wi-Fi manufacturing test support to the OID interface</source>
          <target>Adding Wi-Fi manufacturing test support to the OID interface</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>