<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\deploy\usmt-general-conventions.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">f2d5b1e399a5768441b5e0e9c07ec0368c1caf6c</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>General Conventions (Windows 10)</source>
          <target>General Conventions (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>General Conventions</source>
          <target>General Conventions</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>General Conventions</source>
          <target>General Conventions</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>This topic describes the XML helper functions.</source>
          <target>This topic describes the XML helper functions.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>In This Topic</source>
          <target>In This Topic</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>General XML Guidelines</source>
          <target>General XML Guidelines</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Helper Functions</source>
          <target>Helper Functions</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>General XML Guidelines</source>
          <target>General XML Guidelines</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Before you modify the .xml files, become familiar with the following guidelines:</source>
          <target>Before you modify the .xml files, become familiar with the following guidelines:</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>XML schema</source>
          <target>XML schema</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>You can use the User State Migration Tool (USMT) 10.0 XML schema, MigXML.xsd, to write and validate migration .xml files.</source>
          <target>You can use the User State Migration Tool (USMT) 10.0 XML schema, MigXML.xsd, to write and validate migration .xml files.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Conflits</source>
          <target>Conflits</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>In general, when there are conflicts within the XML schema, the most specific pattern takes precedence.</source>
          <target>In general, when there are conflicts within the XML schema, the most specific pattern takes precedence.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-conflicts-and-precedence.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Required elements</source>
          <target>Required elements</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
          <data id="id13">**</data>
          <data id="id14">**</data>
          <data id="id15">&amp;lt;</data>
          <data id="id16">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The required elements for a migration .xml file are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />migration<ph dataRef="id4" id="ph2" /></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />component<ph dataRef="id8" id="ph4" /></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />role<ph dataRef="id12" id="ph6" /></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p4"><ph dataRef="id15" id="ph7" />rules<ph dataRef="id16" id="ph8" /></pc>.</source>
          <target>The required elements for a migration .xml file are <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />migration<ph dataRef="id4" id="ph2" /></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />component<ph dataRef="id8" id="ph4" /></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />role<ph dataRef="id12" id="ph6" /></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p4"><ph dataRef="id15" id="ph7" />rules<ph dataRef="id16" id="ph8" /></pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Required child elements</source>
          <target>Required child elements</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>USMT does not fail with an error if you do not specify the required child elements.</source>
          <target>USMT does not fail with an error if you do not specify the required child elements.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>However, you must specify the required child elements for the parent element to affect the migration.</source>
          <target>However, you must specify the required child elements for the parent element to affect the migration.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>The required child elements apply only to the first definition of the element.</source>
          <target>The required child elements apply only to the first definition of the element.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>If these elements are defined and then referred to using their name, the required child elements do not apply.</source>
          <target>If these elements are defined and then referred to using their name, the required child elements do not apply.</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">`&lt;detects name="Example"&gt;`</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">&amp;lt;</data>
          <data id="id5">&amp;gt;</data>
          <data id="id6">`&lt;detects name="Example"/&gt;`</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">**</data>
          <data id="id16">**</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you define <ph dataRef="id1" id="ph1" /> in <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><ph dataRef="id4" id="ph2" />namedElements<ph dataRef="id5" id="ph3" /></pc>, and you specify <ph dataRef="id6" id="ph4" /> in <pc dataRefEnd="id8" dataRefStart="id7" id="p2"><ph dataRef="id9" id="ph5" />component<ph dataRef="id10" id="ph6" /></pc> to refer to this element, the definition inside <pc dataRefEnd="id12" dataRefStart="id11" id="p3"><ph dataRef="id13" id="ph7" />namedElements<ph dataRef="id14" id="ph8" /></pc> must have the required child elements, but the <pc dataRefEnd="id16" dataRefStart="id15" id="p4"><ph dataRef="id17" id="ph9" />component<ph dataRef="id18" id="ph10" /></pc> element does not need to have the required child elements.</source>
          <target>For example, if you define <ph dataRef="id1" id="ph1" /> in <pc dataRefEnd="id3" dataRefStart="id2" id="p1"><ph dataRef="id4" id="ph2" />namedElements<ph dataRef="id5" id="ph3" /></pc>, and you specify <ph dataRef="id6" id="ph4" /> in <pc dataRefEnd="id8" dataRefStart="id7" id="p2"><ph dataRef="id9" id="ph5" />component<ph dataRef="id10" id="ph6" /></pc> to refer to this element, the definition inside <pc dataRefEnd="id12" dataRefStart="id11" id="p3"><ph dataRef="id13" id="ph7" />namedElements<ph dataRef="id14" id="ph8" /></pc> must have the required child elements, but the <pc dataRefEnd="id16" dataRefStart="id15" id="p4"><ph dataRef="id17" id="ph9" />component<ph dataRef="id18" id="ph10" /></pc> element does not need to have the required child elements.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>File names with brackets</source>
          <target>File names with brackets</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>If you are migrating a file that has a bracket character (<ph dataRef="id1" id="ph1" /> or <ph dataRef="id2" id="ph2" />) in the file name, you must insert a carat (^) character directly before the bracket for the bracket character to be valid.</source>
          <target>If you are migrating a file that has a bracket character (<ph dataRef="id1" id="ph1" /> or <ph dataRef="id2" id="ph2" />) in the file name, you must insert a carat (^) character directly before the bracket for the bracket character to be valid.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">`&lt;pattern type="File"&gt;c:\documents\mydocs [file^].txt]&lt;/pattern&gt; `</data>
          <data id="id2">`&lt;pattern type="File"&gt;c:\documents\mydocs [file].txt]&lt;/pattern&gt;`</data>
        </originalData>
        <segment state="initial">
          <source>For example, if there is a file named File.txt, you must specify <ph dataRef="id1" id="ph1" />instead of <ph dataRef="id2" id="ph2" />.</source>
          <target>For example, if there is a file named File.txt, you must specify <ph dataRef="id1" id="ph1" />instead of <ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Using quotation marks</source>
          <target>Using quotation marks</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>When you surround code in quotation marks, you can use either double ("") or single (') quotation marks.</source>
          <target>When you surround code in quotation marks, you can use either double ("") or single (') quotation marks.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Helper Functions</source>
          <target>Helper Functions</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-xml-elements-library.md)</data>
        </originalData>
        <segment state="initial">
          <source>You can use the XML helper functions in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XML Elements Library</pc> to change migration behavior.</source>
          <target>You can use the XML helper functions in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">XML Elements Library</pc> to change migration behavior.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Before you use these functions in an .xml file, note the following:</source>
          <target>Before you use these functions in an .xml file, note the following:</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>All of the parameters are strings</source>
          <target>All of the parameters are strings</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>You can leave NULL parameters blank</source>
          <target>You can leave NULL parameters blank</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>As with parameters with a default value convention, if you have a NULL parameter at the end of a list, you can leave it out.</source>
          <target>As with parameters with a default value convention, if you have a NULL parameter at the end of a list, you can leave it out.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>For example, the following function:</source>
          <target>For example, the following function:</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>is equivalent to:</source>
          <target>is equivalent to:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>The encoded location used in all the helper functions is an unambiguous string representation for the name of an object</source>
          <target>The encoded location used in all the helper functions is an unambiguous string representation for the name of an object</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>It is composed of the node part, optionally followed by the leaf enclosed in square brackets.</source>
          <target>It is composed of the node part, optionally followed by the leaf enclosed in square brackets.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>This makes a clear distinction between nodes and leaves.</source>
          <target>This makes a clear distinction between nodes and leaves.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\\</data>
          <data id="id6">\[</data>
          <data id="id7">\]</data>
        </originalData>
        <segment state="initial">
          <source>For example, specify the file C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />Notepad.exe: <pc dataRefEnd="id4" dataRefStart="id3" id="p1">c:<ph dataRef="id5" id="ph3" />Windows<ph dataRef="id6" id="ph4" />Notepad.exe<ph dataRef="id7" id="ph5" /></pc>.</source>
          <target>For example, specify the file C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />Notepad.exe: <pc dataRefEnd="id4" dataRefStart="id3" id="p1">c:<ph dataRef="id5" id="ph3" />Windows<ph dataRef="id6" id="ph4" />Notepad.exe<ph dataRef="id7" id="ph5" /></pc>.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\[\]</data>
        </originalData>
        <segment state="initial">
          <source>Similarly, specify the directory C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 like this: <pc dataRefEnd="id4" dataRefStart="id3" id="p1">c:<ph dataRef="id5" id="ph3" />Windows<ph dataRef="id6" id="ph4" />System32</pc>; note the absence of the <ph dataRef="id7" id="ph5" /> characters.</source>
          <target>Similarly, specify the directory C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 like this: <pc dataRefEnd="id4" dataRefStart="id3" id="p1">c:<ph dataRef="id5" id="ph3" />Windows<ph dataRef="id6" id="ph4" />System32</pc>; note the absence of the <ph dataRef="id7" id="ph5" /> characters.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>The registry is represented in a similar way.</source>
          <target>The registry is represented in a similar way.</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">\[\]</data>
        </originalData>
        <segment state="initial">
          <source>The default value of a registry key is represented as an empty <ph dataRef="id1" id="ph1" /> construct.</source>
          <target>The default value of a registry key is represented as an empty <ph dataRef="id1" id="ph1" /> construct.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\[\]</data>
        </originalData>
        <segment state="initial">
          <source>For example, the default value for the HKLM<ph dataRef="id1" id="ph1" />SOFTWARE<ph dataRef="id2" id="ph2" />MyKey registry key is <pc dataRefEnd="id4" dataRefStart="id3" id="p1">HKLM<ph dataRef="id5" id="ph3" />SOFTWARE<ph dataRef="id6" id="ph4" />MyKey<ph dataRef="id7" id="ph5" /></pc>.</source>
          <target>For example, the default value for the HKLM<ph dataRef="id1" id="ph1" />SOFTWARE<ph dataRef="id2" id="ph2" />MyKey registry key is <pc dataRefEnd="id4" dataRefStart="id3" id="p1">HKLM<ph dataRef="id5" id="ph3" />SOFTWARE<ph dataRef="id6" id="ph4" />MyKey<ph dataRef="id7" id="ph5" /></pc>.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>You specify a location pattern in a way that is similar to how you specify an actual location</source>
          <target>You specify a location pattern in a way that is similar to how you specify an actual location</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>The exception is that both the node and leaf part accept patterns.</source>
          <target>The exception is that both the node and leaf part accept patterns.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>However, a pattern from the node does not extend to the leaf.</source>
          <target>However, a pattern from the node does not extend to the leaf.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\\*</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, the pattern <pc dataRefEnd="id2" dataRefStart="id1" id="p1">c:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" /></pc> will match the <ph dataRef="id5" id="ph3" />Windows directory and all subdirectories, but it will not match any of the files in those directories.</source>
          <target>For example, the pattern <pc dataRefEnd="id2" dataRefStart="id1" id="p1">c:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" /></pc> will match the <ph dataRef="id5" id="ph3" />Windows directory and all subdirectories, but it will not match any of the files in those directories.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\\*\[\*\]</data>
        </originalData>
        <segment state="initial">
          <source>To match the files as well, you must specify <pc dataRefEnd="id2" dataRefStart="id1" id="p1">c:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" /></pc>.</source>
          <target>To match the files as well, you must specify <pc dataRefEnd="id2" dataRefStart="id1" id="p1">c:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" /></pc>.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>USMT XML Reference</source>
          <target>USMT XML Reference</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>