<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\deploy\usmt-how-it-works.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">bbc21171f271c09590ec000196003229354f590c</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>How USMT Works (Windows 10)</source>
          <target>How USMT Works (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>How USMT Works</source>
          <target>How USMT Works</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>How USMT Works</source>
          <target>How USMT Works</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>USMT includes two tools that migrate settings and data: ScanState and LoadState.</source>
          <target>USMT includes two tools that migrate settings and data: ScanState and LoadState.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>ScanState collects information from the source computer, and LoadState applies that information to the destination computer.</source>
          <target>ScanState collects information from the source computer, and LoadState applies that information to the destination computer.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>ScanState Process</source>
          <target>ScanState Process</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>LoadState Process</source>
          <target>LoadState Process</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-conflicts-and-precedence.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how USMT processes the rules and the XML files, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</source>
          <target>For more information about how USMT processes the rules and the XML files, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>The ScanState Process</source>
          <target>The ScanState Process</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>When you run the ScanState tool on the source computer, it goes through the following process:</source>
          <target>When you run the ScanState tool on the source computer, it goes through the following process:</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>It parses and validates the command-line parameters, creates the ScanState.log file, and then begins logging.</source>
          <target>It parses and validates the command-line parameters, creates the ScanState.log file, and then begins logging.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>It collects information about all of the migration components that need to be migrated.</source>
          <target>It collects information about all of the migration components that need to be migrated.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">migration component</pc> is a logical group of files, registry keys, and values.</source>
          <target>A <pc dataRefEnd="id2" dataRefStart="id1" id="p1">migration component</pc> is a logical group of files, registry keys, and values.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>For example, the set of files, registry keys, and values that store the settings of Adobe Acrobat is grouped into a single migration component.</source>
          <target>For example, the set of files, registry keys, and values that store the settings of Adobe Acrobat is grouped into a single migration component.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>There are three types of components:</source>
          <target>There are three types of components:</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Components that migrate the operating system settings</source>
          <target>Components that migrate the operating system settings</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Components that migrate application settings</source>
          <target>Components that migrate application settings</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Components that migrate users’ files</source>
          <target>Components that migrate users’ files</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>The ScanState tool collects information about the application settings and user data components from the .xml files that are specified on the command line.</source>
          <target>The ScanState tool collects information about the application settings and user data components from the .xml files that are specified on the command line.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>In Windows 7, and Windows 8, the manifest files control how the operating-system settings are migrated.</source>
          <target>In Windows 7, and Windows 8, the manifest files control how the operating-system settings are migrated.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>You cannot modify these files.</source>
          <target>You cannot modify these files.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>If you want to exclude certain operating-system settings, you must create and modify a Config.xml file.</source>
          <target>If you want to exclude certain operating-system settings, you must create and modify a Config.xml file.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>ScanState determines which user profiles should be migrated.</source>
          <target>ScanState determines which user profiles should be migrated.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>By default, all user profiles on the source computer are migrated.</source>
          <target>By default, all user profiles on the source computer are migrated.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>However, you can include and exclude users using the User Options.</source>
          <target>However, you can include and exclude users using the User Options.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>The public profile in a source computer running Windows 7, Windows 8, and Windows 10 is always migrated, and you cannot exclude these profiles from the migration.</source>
          <target>The public profile in a source computer running Windows 7, Windows 8, and Windows 10 is always migrated, and you cannot exclude these profiles from the migration.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>In the "Scanning" phase, ScanState does the following for each user profile selected for migration:</source>
          <target>In the "Scanning" phase, ScanState does the following for each user profile selected for migration:</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>For each component, ScanState checks the type of the component.</source>
          <target>For each component, ScanState checks the type of the component.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>If the current user profile is the system profile and the component type is “System” or “UserAndSystem”, the component is selected for this user.</source>
          <target>If the current user profile is the system profile and the component type is “System” or “UserAndSystem”, the component is selected for this user.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Otherwise, the component is ignored.</source>
          <target>Otherwise, the component is ignored.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Alternatively, if the current user profile is not the system profile and the component type is “User” or “UserAndSystem”, the component is selected for this user.</source>
          <target>Alternatively, if the current user profile is not the system profile and the component type is “User” or “UserAndSystem”, the component is selected for this user.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Otherwise, this component is ignored.</source>
          <target>Otherwise, this component is ignored.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>From this point on, ScanState does not distinguish between components that migrate operating-system settings, those that migrate application settings, and those that migrate users’ files.</source>
          <target>From this point on, ScanState does not distinguish between components that migrate operating-system settings, those that migrate application settings, and those that migrate users’ files.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>ScanState processes all components in the same way.</source>
          <target>ScanState processes all components in the same way.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Each component that is selected in the previous step is processed further.</source>
          <target>Each component that is selected in the previous step is processed further.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Any profile-specific variables (such as CSIDL<ph dataRef="id1" id="ph1" />PERSONAL) are evaluated in the context of the current profile.</source>
          <target>Any profile-specific variables (such as CSIDL<ph dataRef="id1" id="ph1" />PERSONAL) are evaluated in the context of the current profile.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the profile that is being processed belongs to “User1”, then CSIDL<ph dataRef="id1" id="ph1" />PERSONAL would expand to C:<ph dataRef="id2" id="ph2" />Users<ph dataRef="id3" id="ph3" />User1<ph dataRef="id4" id="ph4" />Documents, assuming that the user profiles are stored in the C:<ph dataRef="id5" id="ph5" />Users directory.</source>
          <target>For example, if the profile that is being processed belongs to “User1”, then CSIDL<ph dataRef="id1" id="ph1" />PERSONAL would expand to C:<ph dataRef="id2" id="ph2" />Users<ph dataRef="id3" id="ph3" />User1<ph dataRef="id4" id="ph4" />Documents, assuming that the user profiles are stored in the C:<ph dataRef="id5" id="ph5" />Users directory.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each selected component, ScanState evaluates the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section.</source>
          <target>For each selected component, ScanState evaluates the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the condition in the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section evaluates to false, the component is not processed any further.</source>
          <target>If the condition in the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section evaluates to false, the component is not processed any further.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Otherwise, the processing of this component continues.</source>
          <target>Otherwise, the processing of this component continues.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each selected component, ScanState evaluates the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> sections.</source>
          <target>For each selected component, ScanState evaluates the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> sections.</target>
        </segment>
      </unit>
      <unit id="144">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section, if the current user profile is the system profile and the context of the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> section is “System” or “UserAndSystem”, the rule is processed further.</source>
          <target>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section, if the current user profile is the system profile and the context of the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> section is “System” or “UserAndSystem”, the rule is processed further.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Otherwise, this rule is ignored.</source>
          <target>Otherwise, this rule is ignored.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Alternatively, if the current user profile is not the system profile and the context of the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section is “User” or “UserAndSystem”, the rule is processed further.</source>
          <target>Alternatively, if the current user profile is not the system profile and the context of the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section is “User” or “UserAndSystem”, the rule is processed further.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Otherwise, this rule is ignored.</source>
          <target>Otherwise, this rule is ignored.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>ScanState creates a list of migration units that need to be migrated by processing the various subsections under this <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section.</source>
          <target>ScanState creates a list of migration units that need to be migrated by processing the various subsections under this <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Each unit is collected if it is mentioned in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> subsection, as long as there is not a more specific rule for it in an <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> subsection in the same <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> section.</source>
          <target>Each unit is collected if it is mentioned in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> subsection, as long as there is not a more specific rule for it in an <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> subsection in the same <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> section.</target>
        </segment>
      </unit>
      <unit id="150">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-conflicts-and-precedence.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about precedence in the .xml files, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</source>
          <target>For more information about precedence in the .xml files, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>In addition, any migration unit (such as a file, registry key, or set of registry values) that is in an <ph dataRef="id1" id="ph1" />UnconditionalExclude<ph dataRef="id2" id="ph2" /> section is not migrated.</source>
          <target>In addition, any migration unit (such as a file, registry key, or set of registry values) that is in an <ph dataRef="id1" id="ph1" />UnconditionalExclude<ph dataRef="id2" id="ph2" /> section is not migrated.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>ScanState ignores some subsections such as <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" />.</source>
          <target>ScanState ignores some subsections such as <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>These sections are evaluated only on the destination computer.</source>
          <target>These sections are evaluated only on the destination computer.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>In the "Collecting" phase, ScanState creates a master list of the migration units by combining the lists that were created for each selected user profile.</source>
          <target>In the "Collecting" phase, ScanState creates a master list of the migration units by combining the lists that were created for each selected user profile.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>In the "Saving" phase, ScanState writes the migration units that were collected to the store location.</source>
          <target>In the "Saving" phase, ScanState writes the migration units that were collected to the store location.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>ScanState does not modify the source computer in any way.</source>
          <target>ScanState does not modify the source computer in any way.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>The LoadState Process</source>
          <target>The LoadState Process</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>The LoadState process is very similar to the ScanState process.</source>
          <target>The LoadState process is very similar to the ScanState process.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>The ScanState tool collects migration units such as file, registry key, or registry values from the source computer and saves them to the store.</source>
          <target>The ScanState tool collects migration units such as file, registry key, or registry values from the source computer and saves them to the store.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Similarly, the LoadState tool collects migration units from the store and applies them to the destination computer.</source>
          <target>Similarly, the LoadState tool collects migration units from the store and applies them to the destination computer.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>ScanState parses and validates the command-line parameters, creates the ScanState.log file, and then begins logging.</source>
          <target>ScanState parses and validates the command-line parameters, creates the ScanState.log file, and then begins logging.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>LoadState collects information about the migration components that need to be migrated.</source>
          <target>LoadState collects information about the migration components that need to be migrated.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>LoadState obtains information for the application-settings components and user-data components from the migration .xml files that are specified by the LoadState command.</source>
          <target>LoadState obtains information for the application-settings components and user-data components from the migration .xml files that are specified by the LoadState command.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>In Windows 7, and Windows 8, the manifest files control how the operating-system settings are migrated.</source>
          <target>In Windows 7, and Windows 8, the manifest files control how the operating-system settings are migrated.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>You cannot modify these files.</source>
          <target>You cannot modify these files.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>If you want to exclude certain operating-system settings, you must create and modify a Config.xml file.</source>
          <target>If you want to exclude certain operating-system settings, you must create and modify a Config.xml file.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>LoadState determines which user profiles should be migrated.</source>
          <target>LoadState determines which user profiles should be migrated.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>By default, all user profiles present on the source computer are migrated.</source>
          <target>By default, all user profiles present on the source computer are migrated.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>However, you can include and exclude users using the User Options.</source>
          <target>However, you can include and exclude users using the User Options.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>The system profile, the "All users" profile in a source computer running Windows XP, or the Public profile in a source computer running Windows Vista, Windows 7, and Windows 8, is always migrated and you cannot exclude these profiles from the migration.</source>
          <target>The system profile, the "All users" profile in a source computer running Windows XP, or the Public profile in a source computer running Windows Vista, Windows 7, and Windows 8, is always migrated and you cannot exclude these profiles from the migration.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If you are migrating local user accounts and if the accounts do not already exist on the destination computer, you must use the<pc dataRefEnd="id2" dataRefStart="id1" id="p1">/lac</pc> command-line option.</source>
          <target>If you are migrating local user accounts and if the accounts do not already exist on the destination computer, you must use the<pc dataRefEnd="id2" dataRefStart="id1" id="p1">/lac</pc> command-line option.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If you do not specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/lac</pc> option, any local user accounts that are not already present on the destination computer, are not migrated.</source>
          <target>If you do not specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/lac</pc> option, any local user accounts that are not already present on the destination computer, are not migrated.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/md</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/mu</pc> options are processed to rename the user profile on the destination computer, if they have been included when the LoadState command was specified.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">/md</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">/mu</pc> options are processed to rename the user profile on the destination computer, if they have been included when the LoadState command was specified.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>For each user profile selected from the store, LoadState creates a corresponding user profile on the destination computer.</source>
          <target>For each user profile selected from the store, LoadState creates a corresponding user profile on the destination computer.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>The destination computer does not need to be connected to the domain for domain user profiles to be created.</source>
          <target>The destination computer does not need to be connected to the domain for domain user profiles to be created.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>If USMT cannot determine a domain, it attempts to apply the settings to a local account.</source>
          <target>If USMT cannot determine a domain, it attempts to apply the settings to a local account.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-identify-users.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Identify Users</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Identify Users</pc>.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>In the "Scanning" phase, LoadState does the following for each user profile:</source>
          <target>In the "Scanning" phase, LoadState does the following for each user profile:</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>For each component, LoadState checks the type of the component.</source>
          <target>For each component, LoadState checks the type of the component.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>If the current user profile is the system profile and the component type is “System” or “UserAndSystem”, the component is selected for this user.</source>
          <target>If the current user profile is the system profile and the component type is “System” or “UserAndSystem”, the component is selected for this user.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Otherwise, the component is ignored.</source>
          <target>Otherwise, the component is ignored.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>Alternatively, if the current user profile is not the system profile and the component type is “User” or “UserAndSystem”, the component is selected for this user.</source>
          <target>Alternatively, if the current user profile is not the system profile and the component type is “User” or “UserAndSystem”, the component is selected for this user.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Otherwise, this component is ignored.</source>
          <target>Otherwise, this component is ignored.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>From this point on, LoadState does not distinguish between components that migrate operating-system settings, those that migrate application settings, and those that migrate users’ files.</source>
          <target>From this point on, LoadState does not distinguish between components that migrate operating-system settings, those that migrate application settings, and those that migrate users’ files.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>LoadState evaluates all components in the same way.</source>
          <target>LoadState evaluates all components in the same way.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>Each component that is selected is processed further.</source>
          <target>Each component that is selected is processed further.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Any profile-specific variables (such as CSIDL<ph dataRef="id1" id="ph1" />PERSONAL) are evaluated in the context of the current profile.</source>
          <target>Any profile-specific variables (such as CSIDL<ph dataRef="id1" id="ph1" />PERSONAL) are evaluated in the context of the current profile.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the profile being processed belongs to “User1”, then CSIDL<ph dataRef="id1" id="ph1" />PERSONAL would expand to C:<ph dataRef="id2" id="ph2" />Users<ph dataRef="id3" id="ph3" />User1<ph dataRef="id4" id="ph4" />Documents (assuming that the user profiles are stored in the C:<ph dataRef="id5" id="ph5" />Users directory).</source>
          <target>For example, if the profile being processed belongs to “User1”, then CSIDL<ph dataRef="id1" id="ph1" />PERSONAL would expand to C:<ph dataRef="id2" id="ph2" />Users<ph dataRef="id3" id="ph3" />User1<ph dataRef="id4" id="ph4" />Documents (assuming that the user profiles are stored in the C:<ph dataRef="id5" id="ph5" />Users directory).</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>LoadState ignores the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section specified in a component.</source>
          <target>LoadState ignores the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> section specified in a component.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>At this point, all specified components are considered to be detected and are selected for migration.</source>
          <target>At this point, all specified components are considered to be detected and are selected for migration.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each selected component, LoadState evaluates the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> sections.</source>
          <target>For each selected component, LoadState evaluates the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> sections.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section, if the current user profile is the system profile and the context of the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> section is “System” or “UserAndSystem”, the rule is processed further.</source>
          <target>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section, if the current user profile is the system profile and the context of the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> section is “System” or “UserAndSystem”, the rule is processed further.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Otherwise, this rule is ignored.</source>
          <target>Otherwise, this rule is ignored.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Alternatively, if the current user profile is not the system profile and the context of the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section is “User” or “UserAndSystem”, the rule is processed further.</source>
          <target>Alternatively, if the current user profile is not the system profile and the context of the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section is “User” or “UserAndSystem”, the rule is processed further.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>Otherwise, this rule is ignored.</source>
          <target>Otherwise, this rule is ignored.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>LoadState creates a master list of migration units by processing the various subsections under the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section.</source>
          <target>LoadState creates a master list of migration units by processing the various subsections under the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> section.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Each migration unit that is in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> subsection is migrated as long, as there is not a more specific rule for it in an <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> subsection in the same <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> section.</source>
          <target>Each migration unit that is in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> subsection is migrated as long, as there is not a more specific rule for it in an <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> subsection in the same <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> section.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-conflicts-and-precedence.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about precedence, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</source>
          <target>For more information about precedence, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>LoadState evaluates the destination computer-specific subsections; for example, the <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> subsections.</source>
          <target>LoadState evaluates the destination computer-specific subsections; for example, the <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> subsections.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>If the destination computer is running Windows 7 or Windows 8 then the migunits that were collected by ScanState using downlevel manifest files are processed by LoadState using the corresponding Component Manifest for Windows 7.</source>
          <target>If the destination computer is running Windows 7 or Windows 8 then the migunits that were collected by ScanState using downlevel manifest files are processed by LoadState using the corresponding Component Manifest for Windows 7.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>The downlevel manifest files are not used during LoadState.</source>
          <target>The downlevel manifest files are not used during LoadState.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Important</source>
          <target>Important</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>It is important to specify the .xml files with the LoadState command if you want LoadState to use them.</source>
          <target>It is important to specify the .xml files with the LoadState command if you want LoadState to use them.</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Otherwise, any destination-specific rules, such as <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />, in these .xml files are ignored, even if the same .xml files were provided when the ScanState command ran.</source>
          <target>Otherwise, any destination-specific rules, such as <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />, in these .xml files are ignored, even if the same .xml files were provided when the ScanState command ran.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>In the "Apply" phase, LoadState writes the migration units that were collected to the various locations on the destination computer.</source>
          <target>In the "Apply" phase, LoadState writes the migration units that were collected to the various locations on the destination computer.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there are conflicts and there is not a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule for the object, the default behavior for the registry is for the source to overwrite the destination.</source>
          <target>If there are conflicts and there is not a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule for the object, the default behavior for the registry is for the source to overwrite the destination.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>The default behavior for files is for the source to be renamed incrementally, for example, OriginalFileName(1).OriginalExtension.</source>
          <target>The default behavior for files is for the source to be renamed incrementally, for example, OriginalFileName(1).OriginalExtension.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Some settings, such as fonts, wallpaper, and screen-saver settings, do not take effect until the next time the user logs on.</source>
          <target>Some settings, such as fonts, wallpaper, and screen-saver settings, do not take effect until the next time the user logs on.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>For this reason, you should log off when the LoadState command actions have completed.</source>
          <target>For this reason, you should log off when the LoadState command actions have completed.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>User State Migration Tool (USMT) Command-line Syntax</source>
          <target>User State Migration Tool (USMT) Command-line Syntax</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>