<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\deploy\usmt-conflicts-and-precedence.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">13909db8ff127f7a8e9f4bc9ff325a8a3e963f65</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Conflicts and Precedence (Windows 10)</source>
          <target>Conflicts and Precedence (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Conflicts and Precedence</source>
          <target>Conflicts and Precedence</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Conflicts and Precedence</source>
          <target>Conflicts and Precedence</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>When you include, exclude, and reroute files and settings, it is important to know how User State Migration Tool (USMT) 10.0 deals with conflicts and precedence.</source>
          <target>When you include, exclude, and reroute files and settings, it is important to know how User State Migration Tool (USMT) 10.0 deals with conflicts and precedence.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>When working with USMT, the following are the most important conflicts and precedence guidelines to keep in mind.</source>
          <target>When working with USMT, the following are the most important conflicts and precedence guidelines to keep in mind.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>If there are conflicting rules within a component, the most specific rule is applied.</source>
          <target>If there are conflicting rules within a component, the most specific rule is applied.</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>However, the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule is an exception because it takes precedence over all others.</source>
          <target>However, the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule is an exception because it takes precedence over all others.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Directory names take precedence over file extensions.</source>
          <target>Directory names take precedence over file extensions.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#bkmk1)</data>
          <data id="id3">[</data>
          <data id="id4">](#precexamples)</data>
        </originalData>
        <segment state="initial">
          <source>For examples, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What happens when there are conflicting include and exclude rules?</pc> and the first example in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Include and exclude precedence examples</pc>****later in this topic.</source>
          <target>For examples, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">What happens when there are conflicting include and exclude rules?</pc> and the first example in <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Include and exclude precedence examples</pc>****later in this topic.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Only rules inside the same component can affect each other, depending on specificity.</source>
          <target>Only rules inside the same component can affect each other, depending on specificity.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the rules are equally specific, <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> takes precedence over <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" />.</source>
          <target>If the rules are equally specific, <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> takes precedence over <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you use the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule to exclude a file and use the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule to include the same file, the file will be excluded.</source>
          <target>For example, if you use the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule to exclude a file and use the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule to include the same file, the file will be excluded.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>The ordering of components does not matter.</source>
          <target>The ordering of components does not matter.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>It does not matter which components are listed in which .xml file, because each component is processed independently of the other components across all of the .xml files.</source>
          <target>It does not matter which components are listed in which .xml file, because each component is processed independently of the other components across all of the .xml files.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The ordering of the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules within a component does not matter.</source>
          <target>The ordering of the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules within a component does not matter.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element to globally exclude data.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element to globally exclude data.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>This element excludes objects, regardless of any other <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules that are in the .xml files.</source>
          <target>This element excludes objects, regardless of any other <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules that are in the .xml files.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, you can use the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element to exclude all MP3 files on the computer or to exclude all files from C:<ph dataRef="id3" id="ph3" />UserData.</source>
          <target>For example, you can use the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element to exclude all MP3 files on the computer or to exclude all files from C:<ph dataRef="id3" id="ph3" />UserData.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>In This Topic</source>
          <target>In This Topic</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>General</source>
          <target>General</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>What is the relationship between rules that are located within different components?</source>
          <target>What is the relationship between rules that are located within different components?</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>How does precedence work with the Config.xml file?</source>
          <target>How does precedence work with the Config.xml file?</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>How does USMT process each component in an .xml file with multiple components?</source>
          <target>How does USMT process each component in an .xml file with multiple components?</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>How are rules processed?</source>
          <target>How are rules processed?</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>How does USMT combine all of the .xml files that I specify on the command line?</source>
          <target>How does USMT combine all of the .xml files that I specify on the command line?</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules</source>
          <target>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>What happens when there are conflicting include and exclude rules?</source>
          <target>What happens when there are conflicting include and exclude rules?</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> precedence examples</source>
          <target>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> precedence examples</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>File collisions</source>
          <target>File collisions</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>What is the default behavior when there are file collisions?</source>
          <target>What is the default behavior when there are file collisions?</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>How does the <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule work when there are file collisions?</source>
          <target>How does the <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule work when there are file collisions?</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>General</source>
          <target>General</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>What is the relationship between rules that are located within different components?</source>
          <target>What is the relationship between rules that are located within different components?</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Only rules inside the same component can affect each other, depending on specificity, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>Only rules inside the same component can affect each other, depending on specificity, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Rules that are in different components do not affect each other.</source>
          <target>Rules that are in different components do not affect each other.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and an identical <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule in another component, the data will be migrated because the two rules are independent of each other.</source>
          <target>If there is an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and an identical <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule in another component, the data will be migrated because the two rules are independent of each other.</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If you have an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and a <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule in another component for the same file, the file will be migrated in both places.</source>
          <target>If you have an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and a <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule in another component for the same file, the file will be migrated in both places.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>That is, it will be included based on the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, and it will be migrated based on the <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule.</source>
          <target>That is, it will be included based on the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, and it will be migrated based on the <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The following .xml file migrates all files from C:<ph dataRef="id1" id="ph1" />Userdocs, including .mp3 files, because the <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> rule is specified in a separate component.</source>
          <target>The following .xml file migrates all files from C:<ph dataRef="id1" id="ph1" />Userdocs, including .mp3 files, because the <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> rule is specified in a separate component.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>How does precedence work with the Config.xml file?</source>
          <target>How does precedence work with the Config.xml file?</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`migrate="no"`</data>
        </originalData>
        <segment state="initial">
          <source>Specifying <ph dataRef="id1" id="ph1" /> in the Config.xml file is the same as deleting the corresponding component from the migration .xml file.</source>
          <target>Specifying <ph dataRef="id1" id="ph1" /> in the Config.xml file is the same as deleting the corresponding component from the migration .xml file.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">`migrate="no"`</data>
        </originalData>
        <segment state="initial">
          <source>However, if you set <ph dataRef="id1" id="ph1" /> for My Documents, but you have a rule similar to the one shown below in a migration .xml file (which includes all of the .doc files from My Documents), then only the .doc files will be migrated, and all other files will be excluded.</source>
          <target>However, if you set <ph dataRef="id1" id="ph1" /> for My Documents, but you have a rule similar to the one shown below in a migration .xml file (which includes all of the .doc files from My Documents), then only the .doc files will be migrated, and all other files will be excluded.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>How does USMT process each component in an .xml file with multiple components?</source>
          <target>How does USMT process each component in an .xml file with multiple components?</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>The ordering of components does not matter.</source>
          <target>The ordering of components does not matter.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Each component is processed independently of other components.</source>
          <target>Each component is processed independently of other components.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you have an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and a <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule in another component for the same file, the file will be migrated in both places.</source>
          <target>For example, if you have an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in one component and a <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule in another component for the same file, the file will be migrated in both places.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>That is, it will be included based on the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, and it will be migrated based on the <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule.</source>
          <target>That is, it will be included based on the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, and it will be migrated based on the <ph dataRef="id3" id="ph3" />locationModify<ph dataRef="id4" id="ph4" /> rule.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>How are rules processed?</source>
          <target>How are rules processed?</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>There are two broad categories of rules.</source>
          <target>There are two broad categories of rules.</target>
        </segment>
      </unit>
      <unit id="151">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rules that affect the behavior of both the ScanState and LoadState tools</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rules that affect the behavior of both the ScanState and LoadState tools</pc>.</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />unconditionalExclude<ph dataRef="id6" id="ph6" /> rules are processed for each component in the .xml files.</source>
          <target>For example, the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />unconditionalExclude<ph dataRef="id6" id="ph6" /> rules are processed for each component in the .xml files.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>For each component, USMT creates an include list and an exclude list.</source>
          <target>For each component, USMT creates an include list and an exclude list.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Some of the rules in the component might be discarded due to specificity, but all of the remaining rules are processed.</source>
          <target>Some of the rules in the component might be discarded due to specificity, but all of the remaining rules are processed.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, USMT iterates through the elements to see if any of the locations need to be excluded.</source>
          <target>For each <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, USMT iterates through the elements to see if any of the locations need to be excluded.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>USMT enumerates all of the objects and creates a list of objects it is going to collect for each user.</source>
          <target>USMT enumerates all of the objects and creates a list of objects it is going to collect for each user.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Once the list is complete, each of the objects is stored or migrated to the destination computer.</source>
          <target>Once the list is complete, each of the objects is stored or migrated to the destination computer.</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rules that affect the behavior of only the LoadState tool</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Rules that affect the behavior of only the LoadState tool</pc>.</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />contentModify<ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />destinationCleanup<ph dataRef="id6" id="ph6" /> rules do not affect ScanState.</source>
          <target>For example, the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />contentModify<ph dataRef="id4" id="ph4" />, and <ph dataRef="id5" id="ph5" />destinationCleanup<ph dataRef="id6" id="ph6" /> rules do not affect ScanState.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>They are processed only with LoadState.</source>
          <target>They are processed only with LoadState.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>First, the LoadState tool determines the content and location of each component based on the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />and <ph dataRef="id3" id="ph3" />contentModify<ph dataRef="id4" id="ph4" /> rules.</source>
          <target>First, the LoadState tool determines the content and location of each component based on the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" />and <ph dataRef="id3" id="ph3" />contentModify<ph dataRef="id4" id="ph4" /> rules.</target>
        </segment>
      </unit>
      <unit id="162">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Then, LoadState processes all of the <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> rules and deletes data from the destination computer.</source>
          <target>Then, LoadState processes all of the <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> rules and deletes data from the destination computer.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Lastly, LoadState applies the components to the computer.</source>
          <target>Lastly, LoadState applies the components to the computer.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>How does USMT combine all of the .xml files that I specify on the command line?</source>
          <target>How does USMT combine all of the .xml files that I specify on the command line?</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>USMT does not distinguish the .xml files based on their name or content.</source>
          <target>USMT does not distinguish the .xml files based on their name or content.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>It processes each component within the files separately.</source>
          <target>It processes each component within the files separately.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>USMT supports multiple .xml files only to make it easier to maintain and organize the components within them.</source>
          <target>USMT supports multiple .xml files only to make it easier to maintain and organize the components within them.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Because USMT uses a urlid to distinguish each component from the others, be sure that each .xml file that you specify on the command line has a unique migration urlid.</source>
          <target>Because USMT uses a urlid to distinguish each component from the others, be sure that each .xml file that you specify on the command line has a unique migration urlid.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules</source>
          <target>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>What happens when there are conflicting <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules?</source>
          <target>What happens when there are conflicting <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules?</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there are conflicting rules within a component, the most specific rule is applied, except with the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule, which takes precedence over all other rules.</source>
          <target>If there are conflicting rules within a component, the most specific rule is applied, except with the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule, which takes precedence over all other rules.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>If the rules are equally specific, then the data will be not be migrated.</source>
          <target>If the rules are equally specific, then the data will be not be migrated.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>For example if you exclude a file, and include the same file, the file will not be migrated.</source>
          <target>For example if you exclude a file, and include the same file, the file will not be migrated.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>If there are conflicting rules within different components, the rules do not affect each other because each component is processed independently.</source>
          <target>If there are conflicting rules within different components, the rules do not affect each other because each component is processed independently.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>In the following example, mp3 files will not be excluded from the migration.</source>
          <target>In the following example, mp3 files will not be excluded from the migration.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>This is because directory names take precedence over the file extensions.</source>
          <target>This is because directory names take precedence over the file extensions.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> rules precedence examples</source>
          <target>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> rules precedence examples</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>These examples explain how USMT deals with <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules.</source>
          <target>These examples explain how USMT deals with <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rules.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>When the rules are in different components, the resulting behavior will be the same regardless of whether the components are in the same or in different migration .xml files.</source>
          <target>When the rules are in different components, the resulting behavior will be the same regardless of whether the components are in the same or in different migration .xml files.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Including and excluding files</source>
          <target>Including and excluding files</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Including and excluding registry objects</source>
          <target>Including and excluding registry objects</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Including and excluding files</source>
          <target>Including and excluding files</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>If you have the following code in the same component</source>
          <target>If you have the following code in the same component</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>Resulting behavior</source>
          <target>Resulting behavior</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Explanation</source>
          <target>Explanation</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Migrates all files and subfolders in Dir1 (including all .txt files in C:).</source>
          <target>Migrates all files and subfolders in Dir1 (including all .txt files in C:).</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule does not affect the migration because the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule is more specific.</source>
          <target>The <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule does not affect the migration because the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule is more specific.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Migrates all files and subfolders in C:\Dir1, except the .txt files in C:\Dir1\Dir2 and its subfolders.</source>
          <target>Migrates all files and subfolders in C:\Dir1, except the .txt files in C:\Dir1\Dir2 and its subfolders.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="194">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\ <pc dataRefEnd="id5" dataRefStart="id4" id="p1"> [</pc>.txt]<ph dataRef="id6" id="ph4" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\ <pc dataRefEnd="id5" dataRefStart="id4" id="p1"> [</pc>.txt]<ph dataRef="id6" id="ph4" />/pattern</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Migrates all files and subfolders in C:\Dir1, except the .txt files in C:\Dir1 and its subfolders.</source>
          <target>Migrates all files and subfolders in C:\Dir1, except the .txt files in C:\Dir1 and its subfolders.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>Nothing will be migrated.</source>
          <target>Nothing will be migrated.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The rules are equally specific, so the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule takes precedence over the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule.</source>
          <target>The rules are equally specific, so the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule takes precedence over the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule.</target>
        </segment>
      </unit>
      <unit id="202">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</source>
          <target>Include rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Exclude rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Migrates the .txt files in Dir1 and the .txt files from subfolders other than Dir2.</source>
          <target>Migrates the .txt files in Dir1 and the .txt files from subfolders other than Dir2.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>No files are migrated from Dir2 or its subfolders.</source>
          <target>No files are migrated from Dir2 or its subfolders.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Include rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="208">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</source>
          <target>Exclude rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>Migrates all files and subfolders of Dir2, except the .txt files from Dir1 and any subfolders of Dir1 (including Dir2).</source>
          <target>Migrates all files and subfolders of Dir2, except the .txt files from Dir1 and any subfolders of Dir1 (including Dir2).</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>If you have the following code in different components</source>
          <target>If you have the following code in different components</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Resulting behavior</source>
          <target>Resulting behavior</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Explanation</source>
          <target>Explanation</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Component 1:</source>
          <target>Component 1:</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Component 2:</source>
          <target>Component 2:</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Include rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1\Dir2<ph dataRef="id4" id="ph4" /> [*.txt]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
          <data id="id4">\*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</source>
          <target>Exclude rule: <ph dataRef="id1" id="ph1" />pattern type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />C:\Dir1<ph dataRef="id4" id="ph4" /> [*]<ph dataRef="id5" id="ph5" />/pattern</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Migrates all files and subfolders of C:\Dir1\ (including C:\Dir1\Dir2).</source>
          <target>Migrates all files and subfolders of C:\Dir1\ (including C:\Dir1\Dir2).</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Therefore, in this example, although some .txt files were excluded when Component 1 was processed, they were included when Component 2 was processed.</source>
          <target>Therefore, in this example, although some .txt files were excluded when Component 1 was processed, they were included when Component 2 was processed.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>Component 1:</source>
          <target>Component 1:</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Include rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Component 2:</source>
          <target>Component 2:</target>
        </segment>
      </unit>
      <unit id="226">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</source>
          <target>Exclude rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Migrates all files and subfolders from Dir2 except the .txt files in C:\Dir1 and its subfolders.</source>
          <target>Migrates all files and subfolders from Dir2 except the .txt files in C:\Dir1 and its subfolders.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Component 1:</source>
          <target>Component 1:</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Exclude rule: C:\Dir1\Dir2<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Component 2:</source>
          <target>Component 2:</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</source>
          <target>Include rule: C:\Dir1<ph dataRef="id1" id="ph1" /> [*.txt]</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Migrates all .txt files in Dir1 and any subfolders.</source>
          <target>Migrates all .txt files in Dir1 and any subfolders.</target>
        </segment>
      </unit>
      <unit id="234">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Component 1 does not contain an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, so the <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule is not processed.</source>
          <target>Component 1 does not contain an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule, so the <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule is not processed.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>Including and excluding registry objects</source>
          <target>Including and excluding registry objects</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>If you have the following code in the same component</source>
          <target>If you have the following code in the same component</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Resulting behavior</source>
          <target>Resulting behavior</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Explanation</source>
          <target>Explanation</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Include rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>Exclude Rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Exclude Rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>Migrates all keys in HKLM\Software\Microsoft\Command Processor except DefaultColor.</source>
          <target>Migrates all keys in HKLM\Software\Microsoft\Command Processor except DefaultColor.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>Both rules are processed as intended.</source>
          <target>Both rules are processed as intended.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude Rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Exclude Rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>Migrates only DefaultColor in HKLM\Software\Microsoft\Command Processor.</source>
          <target>Migrates only DefaultColor in HKLM\Software\Microsoft\Command Processor.</target>
        </segment>
      </unit>
      <unit id="246">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>DefaultColor is migrated because the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule is more specific than the <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule.</source>
          <target>DefaultColor is migrated because the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule is more specific than the <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> rule.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>Exclude rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Exclude rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Does not migrate DefaultColor.</source>
          <target>Does not migrate DefaultColor.</target>
        </segment>
      </unit>
      <unit id="250">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The rules are equally specific, so the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule takes precedence over the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule.</source>
          <target>The rules are equally specific, so the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> rule takes precedence over the <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> rule.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>If you have the following code in different components</source>
          <target>If you have the following code in different components</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>Resulting behavior</source>
          <target>Resulting behavior</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Explanation</source>
          <target>Explanation</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Component 1:</source>
          <target>Component 1:</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Include rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Exclude rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Exclude rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>Component 2:</source>
          <target>Component 2:</target>
        </segment>
      </unit>
      <unit id="258">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Include rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</source>
          <target>Include rule: HKLM\Software\Microsoft\Command Processor<ph dataRef="id1" id="ph1" /> [*]</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>Exclude rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</source>
          <target>Exclude rule: HKLM\Software\Microsoft\Command Processor [DefaultColor]</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>Migrates all the keys/values under HKLM\Software\Microsoft\Command Processor.</source>
          <target>Migrates all the keys/values under HKLM\Software\Microsoft\Command Processor.</target>
        </segment>
      </unit>
      <unit id="261">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>Rules that are in different components do not affect each other, except for the <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>Therefore, in this example, the objects that were excluded when Component 1 was processed were included when Component 2 was processed.</source>
          <target>Therefore, in this example, the objects that were excluded when Component 1 was processed were included when Component 2 was processed.</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>File collisions</source>
          <target>File collisions</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>What is the default behavior when there are file collisions?</source>
          <target>What is the default behavior when there are file collisions?</target>
        </segment>
      </unit>
      <unit id="265">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is not a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule, the default behavior for the registry is for the source to overwrite the destination.</source>
          <target>If there is not a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule, the default behavior for the registry is for the source to overwrite the destination.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>The default behavior for files is for the source to be renamed incrementally: for example, OriginalFileName(1).OriginalExtension, OriginalFileName(2).OriginalExtension, and so on.</source>
          <target>The default behavior for files is for the source to be renamed incrementally: for example, OriginalFileName(1).OriginalExtension, OriginalFileName(2).OriginalExtension, and so on.</target>
        </segment>
      </unit>
      <unit id="267">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>How does the <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule work when there are file collisions?</source>
          <target>How does the <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule work when there are file collisions?</target>
        </segment>
      </unit>
      <unit id="268">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When a collision is detected, USMT will select the most specific <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule and apply it to resolve the conflict.</source>
          <target>When a collision is detected, USMT will select the most specific <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule and apply it to resolve the conflict.</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">\\\*</data>
          <data id="id4">\[\*\]</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">\\</data>
          <data id="id10">\\\*</data>
          <data id="id11">\[\*\]</data>
          <data id="id12">**</data>
          <data id="id13">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you have a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule for C:<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> set to <pc dataRefEnd="id6" dataRefStart="id5" id="p1">sourcePriority()</pc> and another <ph dataRef="id7" id="ph5" />merge<ph dataRef="id8" id="ph6" /> rule for C:<ph dataRef="id9" id="ph7" />subfolder<ph dataRef="id10" id="ph8" /><ph dataRef="id11" id="ph9" /> set to <pc dataRefEnd="id13" dataRefStart="id12" id="p2">destinationPriority()</pc> , then USMT uses the destinationPriority() rule because it is the most specific.</source>
          <target>For example, if you have a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule for C:<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> set to <pc dataRefEnd="id6" dataRefStart="id5" id="p1">sourcePriority()</pc> and another <ph dataRef="id7" id="ph5" />merge<ph dataRef="id8" id="ph6" /> rule for C:<ph dataRef="id9" id="ph7" />subfolder<ph dataRef="id10" id="ph8" /><ph dataRef="id11" id="ph9" /> set to <pc dataRefEnd="id13" dataRefStart="id12" id="p2">destinationPriority()</pc> , then USMT uses the destinationPriority() rule because it is the most specific.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>Example scenario</source>
          <target>Example scenario</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>The source computer contains the following files:</source>
          <target>The source computer contains the following files:</target>
        </segment>
      </unit>
      <unit id="272">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleA.txt</source>
          <target>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleA.txt</target>
        </segment>
      </unit>
      <unit id="273">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleB.txt</source>
          <target>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleB.txt</target>
        </segment>
      </unit>
      <unit id="274">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />Folder<ph dataRef="id3" id="ph3" />SampleB.txt</source>
          <target>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />Folder<ph dataRef="id3" id="ph3" />SampleB.txt</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>The destination computer contains the following files:</source>
          <target>The destination computer contains the following files:</target>
        </segment>
      </unit>
      <unit id="276">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleB.txt</source>
          <target>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />SampleB.txt</target>
        </segment>
      </unit>
      <unit id="277">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />Folder<ph dataRef="id3" id="ph3" />SampleB.txt</source>
          <target>C:<ph dataRef="id1" id="ph1" />Data<ph dataRef="id2" id="ph2" />Folder<ph dataRef="id3" id="ph3" />SampleB.txt</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>You have a custom .xml file that contains the following code:</source>
          <target>You have a custom .xml file that contains the following code:</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source>For this example, the following table describes the resulting behavior if you add the code in the first column to your custom .xml file.</source>
          <target>For this example, the following table describes the resulting behavior if you add the code in the first column to your custom .xml file.</target>
        </segment>
      </unit>
      <unit id="280">
        <segment state="initial">
          <source>If you specify the following code</source>
          <target>If you specify the following code</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>Resulting behavior</source>
          <target>Resulting behavior</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>During ScanState, all the files will be added to the store.</source>
          <target>During ScanState, all the files will be added to the store.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>During LoadState, only C:\Data\SampleA.txt will be restored.</source>
          <target>During LoadState, only C:\Data\SampleA.txt will be restored.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>During ScanState, all the files will be added to the store.</source>
          <target>During ScanState, all the files will be added to the store.</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>During LoadState, all the files will be restored, overwriting the existing files on the destination computer.</source>
          <target>During LoadState, all the files will be restored, overwriting the existing files on the destination computer.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>During ScanState, all the files will be added to the store.</source>
          <target>During ScanState, all the files will be added to the store.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source>During LoadState, the following will occur:</source>
          <target>During LoadState, the following will occur:</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source>C:\Data\SampleA.txt will be restored.</source>
          <target>C:\Data\SampleA.txt will be restored.</target>
        </segment>
      </unit>
      <unit id="289">
        <segment state="initial">
          <source>C:\Data\SampleB.txt will be restored, overwriting the existing file on the destination computer.</source>
          <target>C:\Data\SampleB.txt will be restored, overwriting the existing file on the destination computer.</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source>C:\Data\Folder\SampleB.txt will not be restored.</source>
          <target>C:\Data\Folder\SampleB.txt will not be restored.</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source>USMT XML Reference</source>
          <target>USMT XML Reference</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>