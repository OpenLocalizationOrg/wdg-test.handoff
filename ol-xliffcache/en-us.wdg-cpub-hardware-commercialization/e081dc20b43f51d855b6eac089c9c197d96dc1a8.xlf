<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\startkerneltrace.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">e081dc20b43f51d855b6eac089c9c197d96dc1a8</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>StartKernelTrace</source>
          <target>StartKernelTrace</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>StartKernelTrace</source>
          <target>StartKernelTrace</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>StartKernelTrace</source>
          <target>StartKernelTrace</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>This function registers and starts a kernel event tracing session.</source>
          <target>This function registers and starts a kernel event tracing session.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>You can also enable stackwalking for certain kernel events using this function.</source>
          <target>You can also enable stackwalking for certain kernel events using this function.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Parameters</source>
          <target>Parameters</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TraceHandle</pc>
            <ph dataRef="id3" id="ph1" />out</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">TraceHandle</pc>
            <ph dataRef="id3" id="ph1" />out</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Stores a handle to an event tracing session.</source>
          <target>Stores a handle to an event tracing session.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>This parameter is set to zero if the handle is not valid.</source>
          <target>This parameter is set to zero if the handle is not valid.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>This parameter should not be compared to INVALID<ph dataRef="id1" id="ph1" />HANDLE<ph dataRef="id2" id="ph2" />VALUE.</source>
          <target>This parameter should not be compared to INVALID<ph dataRef="id1" id="ph1" />HANDLE<ph dataRef="id2" id="ph2" />VALUE.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Do not use this handle if the function fails.</source>
          <target>Do not use this handle if the function fails.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>
            <ph dataRef="id3" id="ph1" />in, out</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>
            <ph dataRef="id3" id="ph1" />in, out</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?linkid=212231&amp;clcid=0x409)</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>Stores a pointer to an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EVENT<ph dataRef="id3" id="ph1" />TRACE<ph dataRef="id4" id="ph2" />PROPERTIES structure</pc>.</source>
          <target>Stores a pointer to an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EVENT<ph dataRef="id3" id="ph1" />TRACE<ph dataRef="id4" id="ph2" />PROPERTIES structure</pc>.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES configures certain aspects of session behavior.</source>
          <target>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES configures certain aspects of session behavior.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkID=212222&amp;clcid=0x409)</data>
          <data id="id5">\_</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>The first member of the EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES structure is a <pc dataRefEnd="id4" dataRefStart="id3" id="p1">WNODE<ph dataRef="id5" id="ph3" />HEADER structure</pc>, referred to here as <pc dataRefEnd="id7" dataRefStart="id6" id="p2">Wnode</pc>.</source>
          <target>The first member of the EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES structure is a <pc dataRefEnd="id4" dataRefStart="id3" id="p1">WNODE<ph dataRef="id5" id="ph3" />HEADER structure</pc>, referred to here as <pc dataRefEnd="id7" dataRefStart="id6" id="p2">Wnode</pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>The following EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES.Wnode members must be set in order to configure kernel trace control.</source>
          <target>The following EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES.Wnode members must be set in order to configure kernel trace control.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>BufferSize</source>
          <target>BufferSize</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>This member contains the total size, in bytes, of memory allocated for the event tracing session properties.</source>
          <target>This member contains the total size, in bytes, of memory allocated for the event tracing session properties.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>The size of memory must include enough space to store the following data:</source>
          <target>The size of memory must include enough space to store the following data:</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>The EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES structure.</source>
          <target>The EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES structure.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>The session name string.</source>
          <target>The session name string.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The log file name string.</source>
          <target>The log file name string.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Guid</source>
          <target>Guid</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Each tracing session must have a GUID defined to reference the session.</source>
          <target>Each tracing session must have a GUID defined to reference the session.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>For an NT kernel logger session, this member must be set to SystemTraceControlGuid.</source>
          <target>For an NT kernel logger session, this member must be set to SystemTraceControlGuid.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkID=212229&amp;clcid=0x409)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about logging mode constants, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NT Kernel Logger Constants</pc>.</source>
          <target>For more information about logging mode constants, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NT Kernel Logger Constants</pc>.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>ClientContext</source>
          <target>ClientContext</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>This member sets the clock resolution that is used when the logging time stamp for each event is calculated.</source>
          <target>This member sets the clock resolution that is used when the logging time stamp for each event is calculated.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>The default value for this member is a query performance counter.</source>
          <target>The default value for this member is a query performance counter.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>You can specify one of the following values:</source>
          <target>You can specify one of the following values:</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">1:</pc> Query performance counter (QPC).</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">1:</pc> Query performance counter (QPC).</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The QPC provides a high-resolution (100-nanosecond) time stamp, but is comparatively more expensive to retrieve.</source>
          <target>The QPC provides a high-resolution (100-nanosecond) time stamp, but is comparatively more expensive to retrieve.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Use this resolution if you have high event rates or if the consumer merges events from different buffers.</source>
          <target>Use this resolution if you have high event rates or if the consumer merges events from different buffers.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>On older computers, the time stamp may not be accurate because the counter sometimes skips forward due to hardware errors.</source>
          <target>On older computers, the time stamp may not be accurate because the counter sometimes skips forward due to hardware errors.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2:</pc> System time.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2:</pc> System time.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>The system time provides a low-resolution (10-millisecond) time stamp, but is comparatively less expensive to retrieve.</source>
          <target>The system time provides a low-resolution (10-millisecond) time stamp, but is comparatively less expensive to retrieve.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>If the volume of events is high, the resolution for system time may not be fine enough to determine the sequence of events.</source>
          <target>If the volume of events is high, the resolution for system time may not be fine enough to determine the sequence of events.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>In this case, a set of events will have the same time stamp, but the order in which ETW delivers the events may not be correct.</source>
          <target>In this case, a set of events will have the same time stamp, but the order in which ETW delivers the events may not be correct.</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3:</pc> CPU cycle counter.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">3:</pc> CPU cycle counter.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>The CPU counter provides the highest-resolution time stamp and is the least expensive to retrieve.</source>
          <target>The CPU counter provides the highest-resolution time stamp and is the least expensive to retrieve.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>However, the CPU counter is unreliable and should not be used in production.</source>
          <target>However, the CPU counter is unreliable and should not be used in production.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>For example, on some computers, the timer changes frequency due to thermal and power changes, in addition to stopping in some states.</source>
          <target>For example, on some computers, the timer changes frequency due to thermal and power changes, in addition to stopping in some states.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>If your hardware does not support this clock type, ETW uses system time.</source>
          <target>If your hardware does not support this clock type, ETW uses system time.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>In Windows Server 2003, Windows XP with SP1, and Windows XP, this value is not supported.</source>
          <target>In Windows Server 2003, Windows XP with SP1, and Windows XP, this value is not supported.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>It was introduced in Windows Server 2003 with SP1 and Windows XP with SP2.</source>
          <target>It was introduced in Windows Server 2003 with SP1 and Windows XP with SP2.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Flags</source>
          <target>Flags</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>This member must contain WNODE<ph dataRef="id1" id="ph1" />FLAG<ph dataRef="id2" id="ph2" />TRACED<ph dataRef="id3" id="ph3" />GUID to indicate that the structure contains event tracing information and the information is sent to a logger.</source>
          <target>This member must contain WNODE<ph dataRef="id1" id="ph1" />FLAG<ph dataRef="id2" id="ph2" />TRACED<ph dataRef="id3" id="ph3" />GUID to indicate that the structure contains event tracing information and the information is sent to a logger.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>WNODE<ph dataRef="id1" id="ph1" />FLAG<ph dataRef="id2" id="ph2" />TRACED<ph dataRef="id3" id="ph3" />GUID is defined in Evntrace.h.</source>
          <target>WNODE<ph dataRef="id1" id="ph1" />FLAG<ph dataRef="id2" id="ph2" />TRACED<ph dataRef="id3" id="ph3" />GUID is defined in Evntrace.h.</target>
        </segment>
      </unit>
      <unit id="149">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>The following EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES members must also be set:</source>
          <target>The following EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES members must also be set:</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>LogFileMode</source>
          <target>LogFileMode</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Indicates which logging modes are to be used in the kernel event tracing session.</source>
          <target>Indicates which logging modes are to be used in the kernel event tracing session.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>You can use this member to specify that events are to be written to a log file, a real-time consumer, or both.</source>
          <target>You can use this member to specify that events are to be written to a log file, a real-time consumer, or both.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>This member can also be used to specify that the session is a private logger session.</source>
          <target>This member can also be used to specify that the session is a private logger session.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>One or more modes can be specified.</source>
          <target>One or more modes can be specified.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/library/windows/desktop/aa364080.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For a list of possible modes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Logging Mode Constants</pc>.</source>
          <target>For a list of possible modes, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Logging Mode Constants</pc>.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Do not specify real-time logging unless there are real-time consumers ready to consume the events.</source>
          <target>Do not specify real-time logging unless there are real-time consumers ready to consume the events.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>If there are no real-time consumers, the events are written to a playback file.</source>
          <target>If there are no real-time consumers, the events are written to a playback file.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>The size of the playback file is limited.</source>
          <target>The size of the playback file is limited.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>If the limit is reached, no new events are logged to the log file or the playback file.</source>
          <target>If the limit is reached, no new events are logged to the log file or the playback file.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>The logging functions fail with STATUS<ph dataRef="id1" id="ph1" />LOG<ph dataRef="id2" id="ph2" />FILE<ph dataRef="id3" id="ph3" />FULL.</source>
          <target>The logging functions fail with STATUS<ph dataRef="id1" id="ph1" />LOG<ph dataRef="id2" id="ph2" />FILE<ph dataRef="id3" id="ph3" />FULL.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>EnableFlags</source>
          <target>EnableFlags</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>This member is used only for NT kernel logger sessions.</source>
          <target>This member is used only for NT kernel logger sessions.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>It identifies to the kernel logger which events to trace.</source>
          <target>It identifies to the kernel logger which events to trace.</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>By using logical <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OR</pc>, this member can contain one or more values.</source>
          <target>By using logical <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OR</pc>, this member can contain one or more values.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>In addition to the events specified, the kernel logger also logs hardware configuration events.</source>
          <target>In addition to the events specified, the kernel logger also logs hardware configuration events.</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>The following trace control flags are available in addition to the ones provided by EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES:</source>
          <target>The following trace control flags are available in addition to the ones provided by EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />PROPERTIES:</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />FLAG<ph dataRef="id3" id="ph3" />DISPATCHER</source>
          <target>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />FLAG<ph dataRef="id3" id="ph3" />DISPATCHER</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />FLAG<ph dataRef="id3" id="ph3" />VIRTUAL<ph dataRef="id4" id="ph4" />ALLOC</source>
          <target>EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />FLAG<ph dataRef="id3" id="ph3" />VIRTUAL<ph dataRef="id4" id="ph4" />ALLOC</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>LogFileNameOffset</source>
          <target>LogFileNameOffset</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>This number represents the offset from the start of the memory allocated to the structure to the start of the null-terminated string that contains the log file name.</source>
          <target>This number represents the offset from the start of the memory allocated to the structure to the start of the null-terminated string that contains the log file name.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>The following considerations apply:</source>
          <target>The following considerations apply:</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The file name extension should be .etl.</source>
          <target>The file name extension should be .etl.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>All folders in the path must exist.</source>
          <target>All folders in the path must exist.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>The path can be relative, absolute, local, or remote.</source>
          <target>The path can be relative, absolute, local, or remote.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>The path must not contain environment variables, because those variables are not expanded.</source>
          <target>The path must not contain environment variables, because those variables are not expanded.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>The user who initiates the trace must have write permission on the folder.</source>
          <target>The user who initiates the trace must have write permission on the folder.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>The log file name is limited to 1024 characters.</source>
          <target>The log file name is limited to 1024 characters.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
        </originalData>
        <segment state="initial">
          <source>If you set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LogFileMode</pc> to EVENT<ph dataRef="id3" id="ph1" />TRACE<ph dataRef="id4" id="ph2" />PRIVATE<ph dataRef="id5" id="ph3" />LOGGER<ph dataRef="id6" id="ph4" />MODE or EVENT<ph dataRef="id7" id="ph5" />TRACE<ph dataRef="id8" id="ph6" />FILE<ph dataRef="id9" id="ph7" />MODE<ph dataRef="id10" id="ph8" />NEWFILE, be sure to allocate enough memory to include the process identifier that is appended to the file name for private logger sessions and the sequential number that is added to log files created using the new file log mode.</source>
          <target>If you set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LogFileMode</pc> to EVENT<ph dataRef="id3" id="ph1" />TRACE<ph dataRef="id4" id="ph2" />PRIVATE<ph dataRef="id5" id="ph3" />LOGGER<ph dataRef="id6" id="ph4" />MODE or EVENT<ph dataRef="id7" id="ph5" />TRACE<ph dataRef="id8" id="ph6" />FILE<ph dataRef="id9" id="ph7" />MODE<ph dataRef="id10" id="ph8" />NEWFILE, be sure to allocate enough memory to include the process identifier that is appended to the file name for private logger sessions and the sequential number that is added to log files created using the new file log mode.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>If you do not want to log events to a log file (for example, you specify EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />REAL<ph dataRef="id3" id="ph3" />TIME<ph dataRef="id4" id="ph4" />MODE only), set <pc dataRefEnd="id6" dataRefStart="id5" id="p1">LogFileNameOffset</pc> to zero.</source>
          <target>If you do not want to log events to a log file (for example, you specify EVENT<ph dataRef="id1" id="ph1" />TRACE<ph dataRef="id2" id="ph2" />REAL<ph dataRef="id3" id="ph3" />TIME<ph dataRef="id4" id="ph4" />MODE only), set <pc dataRefEnd="id6" dataRefStart="id5" id="p1">LogFileNameOffset</pc> to zero.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>If you specify only real-time logging and also provide an offset with a valid log file name, the log file name is used to create a sequential log file and log events to the log file.</source>
          <target>If you specify only real-time logging and also provide an offset with a valid log file name, the log file name is used to create a sequential log file and log events to the log file.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The sequential log file is also created if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LogFileMode</pc> is zero and you provide an offset with a valid log file name.</source>
          <target>The sequential log file is also created if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LogFileMode</pc> is zero and you provide an offset with a valid log file name.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>If you want to log events to a log file, you must allocate enough memory for this structure to include the log file name and session name following the structure.</source>
          <target>If you want to log events to a log file, you must allocate enough memory for this structure to include the log file name and session name following the structure.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>The log file name must follow the session name in memory.</source>
          <target>The log file name must follow the session name in memory.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Trace files are created using the default security descriptor, meaning that the log file will have the same ACL as the parent directory.</source>
          <target>Trace files are created using the default security descriptor, meaning that the log file will have the same ACL as the parent directory.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>If you want to restrict access to the files, create a parent directory with the appropriate ACLs.</source>
          <target>If you want to restrict access to the files, create a parent directory with the appropriate ACLs.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>LoggerNameOffset</source>
          <target>LoggerNameOffset</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>This member represents the offset from the start of the memory allocated to the structure to the start of the null-terminated string that contains the session name.</source>
          <target>This member represents the offset from the start of the memory allocated to the structure to the start of the null-terminated string that contains the session name.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>The following considerations apply:</source>
          <target>The following considerations apply:</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>The session name is limited to 1024 characters.</source>
          <target>The session name is limited to 1024 characters.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>The session name is case-insensitive and must be unique.</source>
          <target>The session name is case-insensitive and must be unique.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>When allocating memory for this structure, sufficient memory must be reserved to include the session name and log file name following the structure.</source>
          <target>When allocating memory for this structure, sufficient memory must be reserved to include the session name and log file name following the structure.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>The session name must come before the log file name in memory.</source>
          <target>The session name must come before the log file name in memory.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>The log file name must be copied into the offset area.</source>
          <target>The log file name must be copied into the offset area.</target>
        </segment>
      </unit>
      <unit id="195">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>This function writes the session name defined by KERNEL<ph dataRef="id1" id="ph1" />LOGGER<ph dataRef="id2" id="ph2" />NAME.</source>
          <target>This function writes the session name defined by KERNEL<ph dataRef="id1" id="ph1" />LOGGER<ph dataRef="id2" id="ph2" />NAME.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>According to the type of log file chosen, it may be necessary to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaximumFileSize</pc> member.</source>
          <target>According to the type of log file chosen, it may be necessary to set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaximumFileSize</pc> member.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="198">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>It is not necessary to set the logger name at the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoggerNameOffset</pc> because this function always uses the KERNEL<ph dataRef="id3" id="ph1" />LOGGER<ph dataRef="id4" id="ph2" />NAME value to call StartKernelTrace.</source>
          <target>It is not necessary to set the logger name at the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoggerNameOffset</pc> because this function always uses the KERNEL<ph dataRef="id3" id="ph1" />LOGGER<ph dataRef="id4" id="ph2" />NAME value to call StartKernelTrace.</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>This function checks whether the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wnode.Guid</pc> corresponds to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemTraceControlGuid</pc>; if not, it returns ERROR<ph dataRef="id5" id="ph1" />INVALID<ph dataRef="id6" id="ph2" />PARAMETER.</source>
          <target>This function checks whether the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wnode.Guid</pc> corresponds to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">SystemTraceControlGuid</pc>; if not, it returns ERROR<ph dataRef="id5" id="ph1" />INVALID<ph dataRef="id6" id="ph2" />PARAMETER.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wnode.Guid</pc> corresponds to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KernelRundownGuid</pc>, the logger name should be specified.</source>
          <target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wnode.Guid</pc> corresponds to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">KernelRundownGuid</pc>, the logger name should be specified.</target>
        </segment>
      </unit>
      <unit id="201">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KernelRundownGuid</pc> is the control GUID used to log events such as existing process information, thread information, images loaded per process, and hardware configuration such as CPU, video, disk, network cards, services, power, Plug and Play, and disk IDE channels.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KernelRundownGuid</pc> is the control GUID used to log events such as existing process information, thread information, images loaded per process, and hardware configuration such as CPU, video, disk, network cards, services, power, Plug and Play, and disk IDE channels.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Return Value</source>
          <target>Return Value</target>
        </segment>
      </unit>
      <unit id="203">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>ERROR<ph dataRef="id1" id="ph1" />SUCCESS indicates success.</source>
          <target>ERROR<ph dataRef="id1" id="ph1" />SUCCESS indicates success.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Possible error values are described in the following table.</source>
          <target>Possible error values are described in the following table.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>Error Value</source>
          <target>Error Value</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>ERROR_ALREADY_EXISTS</source>
          <target>ERROR_ALREADY_EXISTS</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>Only a single instance of the kernel logger runs on the system.</source>
          <target>Only a single instance of the kernel logger runs on the system.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>If this function attempts to start after another component has started kernel logging, this error is possibly returned.</source>
          <target>If this function attempts to start after another component has started kernel logging, this error is possibly returned.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>ERROR_INVALID_FLAGS</source>
          <target>ERROR_INVALID_FLAGS</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Possibly indicates that there are invalid trace flags in <ph dataRef="id1" id="ph1" />Properties.EnableFlags<ph dataRef="id2" id="ph2" />.</source>
          <target>Possibly indicates that there are invalid trace flags in <ph dataRef="id1" id="ph1" />Properties.EnableFlags<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>ERROR_OUT_OF_MEMORY</source>
          <target>ERROR_OUT_OF_MEMORY</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Possibly indicates failure to allocate memory for EVENT_TRACE_PROPERTIES.</source>
          <target>Possibly indicates failure to allocate memory for EVENT_TRACE_PROPERTIES.</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>If the function fails for a reason other than those listed, a system error code is returned.</source>
          <target>If the function fails for a reason other than those listed, a system error code is returned.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>Remarks</source>
          <target>Remarks</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StackTracingEventIds</pc> contain events that are not enabled in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">EVENT<ph dataRef="id5" id="ph1" />TRACE<ph dataRef="id6" id="ph2" />PROPERTIES.EnableFlags</pc> field or could not be decoded by Kernel Trace Control, those flags are ignored, and no error code is returned.</source>
          <target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StackTracingEventIds</pc> contain events that are not enabled in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">EVENT<ph dataRef="id5" id="ph1" />TRACE<ph dataRef="id6" id="ph2" />PROPERTIES.EnableFlags</pc> field or could not be decoded by Kernel Trace Control, those flags are ignored, and no error code is returned.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Requirements:</source>
          <target>Requirements:</target>
        </segment>
      </unit>
      <unit id="218">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Versions:</pc> Available beginning in Windows Vista.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Versions:</pc> Available beginning in Windows Vista.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>This structure is distributed with Windows Performance Analyzer.</source>
          <target>This structure is distributed with Windows Performance Analyzer.</target>
        </segment>
      </unit>
      <unit id="220">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Headers:</pc> Declared in KernelTraceControl.h.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Headers:</pc> Declared in KernelTraceControl.h.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Include KernelTraceControl.h.</source>
          <target>Include KernelTraceControl.h.</target>
        </segment>
      </unit>
      <unit id="222">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Library:</pc> Contained in KernelTraceControl.dll.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Library:</pc> Contained in KernelTraceControl.dll.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>Functions</source>
          <target>Functions</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Custom Injection of System Information</source>
          <target>Custom Injection of System Information</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>