<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\desktop\winpe-debug-apps.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">b321ee0b90df4d07947ba482e26e69dcdfb8d2ae</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>WinPE: Debug Apps</source>
          <target>WinPE: Debug Apps</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>WinPE: Debug Apps</source>
          <target>WinPE: Debug Apps</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>WinPE: Debug Apps</source>
          <target>WinPE: Debug Apps</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>You can use Windows Debuggers, such as Ntsd.exe, Cdb.exe, and Windbg.exe, and supporting tools to debug applications on Windows PE and to debug the Windows PE kernel.</source>
          <target>You can use Windows Debuggers, such as Ntsd.exe, Cdb.exe, and Windbg.exe, and supporting tools to debug applications on Windows PE and to debug the Windows PE kernel.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( http://go.microsoft.com/fwlink/?LinkId=526807)</data>
        </originalData>
        <segment state="initial">
          <source>Debugging tools are included in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 10 SDK</pc>.</source>
          <target>Debugging tools are included in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 10 SDK</pc>.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>You must make the debugging tools available on the Windows PE computer by either copying them locally or using them from a share.</source>
          <target>You must make the debugging tools available on the Windows PE computer by either copying them locally or using them from a share.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>To debug Windows PE remotely, you may need to turn off the built-in firewall on the PC:</source>
          <target>To debug Windows PE remotely, you may need to turn off the built-in firewall on the PC:</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>User-mode debugging</source>
          <target>User-mode debugging</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The easiest user-mode debugging method is to run a process server on the Windows PE computer, and connect to it by using a debugger on another computer.</source>
          <target>The easiest user-mode debugging method is to run a process server on the Windows PE computer, and connect to it by using a debugger on another computer.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( http://go.microsoft.com/fwlink/?LinkId=526807)</data>
        </originalData>
        <segment state="initial">
          <source>The process server is included with the debugging tools in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 10 SDK</pc>.</source>
          <target>The process server is included with the debugging tools in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows 10 SDK</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>To run a process server in user-mode</source>
          <target>To run a process server in user-mode</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">]( http://go.microsoft.com/fwlink/?LinkId=526807)</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
          <data id="id9">\\</data>
        </originalData>
        <segment state="initial">
          <source>Copy the Windows Debugging Process Server tool: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dbgsrv.exe</pc>, from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows 10 SDK</pc> debugging tools folder (example: C:<ph dataRef="id5" id="ph1" />Program Files (x86)<ph dataRef="id6" id="ph2" />Windows Kits<ph dataRef="id7" id="ph3" />10.0<ph dataRef="id8" id="ph4" />Debuggers<ph dataRef="id9" id="ph5" />x64), to the Windows PE computer.</source>
          <target>Copy the Windows Debugging Process Server tool: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dbgsrv.exe</pc>, from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows 10 SDK</pc> debugging tools folder (example: C:<ph dataRef="id5" id="ph1" />Program Files (x86)<ph dataRef="id6" id="ph2" />Windows Kits<ph dataRef="id7" id="ph3" />10.0<ph dataRef="id8" id="ph4" />Debuggers<ph dataRef="id9" id="ph5" />x64), to the Windows PE computer.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>At the Windows PE command prompt, disable the firewall.</source>
          <target>At the Windows PE command prompt, disable the firewall.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Start the Windows Debugging Process Server, specifying a connection method to the PC, for example, a TCP port:</source>
          <target>Start the Windows Debugging Process Server, specifying a connection method to the PC, for example, a TCP port:</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">]( http://go.microsoft.com/fwlink/p/?LinkId=698645)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Activating a Process Server (Windows Debuggers)</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Activating a Process Server (Windows Debuggers)</pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>From the remote computer, use the process server to attach to or start processes on the Windows PE destination computer:</source>
          <target>From the remote computer, use the process server to attach to or start processes on the Windows PE destination computer:</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=698646)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Activating a Smart Client (Windows Debuggers)</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Activating a Smart Client (Windows Debuggers)</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>It is also possible to run the debugger directly on the Windows PE computer.</source>
          <target>It is also possible to run the debugger directly on the Windows PE computer.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>However, doing so requires setting up symbol and source paths after every reboot of the Windows PE computer.</source>
          <target>However, doing so requires setting up symbol and source paths after every reboot of the Windows PE computer.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>We recommend that you perform debugging from a computer running a full version of Windows, as described in this procedure.</source>
          <target>We recommend that you perform debugging from a computer running a full version of Windows, as described in this procedure.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>The following debugging procedure is useful when you want to bypass startnet.cmd or setup.exe, and proceed directly to a command prompt for debugging purposes.</source>
          <target>The following debugging procedure is useful when you want to bypass startnet.cmd or setup.exe, and proceed directly to a command prompt for debugging purposes.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>This procedure bypasses all initialization, including setup, and runs no commands, such as Wpeinit.exe.</source>
          <target>This procedure bypasses all initialization, including setup, and runs no commands, such as Wpeinit.exe.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>This procedure must be performed online on an online operating system.</source>
          <target>This procedure must be performed online on an online operating system.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>To enable user-mode debugging prior to any initialization</source>
          <target>To enable user-mode debugging prior to any initialization</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Delete the winpeshl.ini file, if it exists.</source>
          <target>Delete the winpeshl.ini file, if it exists.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>If the winpeshl.ini file does not exist, then user-mode debugging can be accessed by default.</source>
          <target>If the winpeshl.ini file does not exist, then user-mode debugging can be accessed by default.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Hold down the Ctrl key during boot before the command prompt is shown.</source>
          <target>Hold down the Ctrl key during boot before the command prompt is shown.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>A command prompt appears.</source>
          <target>A command prompt appears.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Proceed with debugging.</source>
          <target>Proceed with debugging.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Kernel-mode debugging</source>
          <target>Kernel-mode debugging</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>To debug in kernel-mode, you must enable kernel-mode debugging before the system is booted.</source>
          <target>To debug in kernel-mode, you must enable kernel-mode debugging before the system is booted.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>The boot configuration file has a setting for kernel mode debugging, which is enabled by using the bcdedit.exe command-line tool to modify the Boot Configuration Data (BCD) store.</source>
          <target>The boot configuration file has a setting for kernel mode debugging, which is enabled by using the bcdedit.exe command-line tool to modify the Boot Configuration Data (BCD) store.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Kernel debugging can only be performed by using bcdedit.exe.</source>
          <target>Kernel debugging can only be performed by using bcdedit.exe.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>Bcdedit.exe is located in the <ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 directory of the Windows partition.</source>
          <target>Bcdedit.exe is located in the <ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 directory of the Windows partition.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>The default debugger settings are as follows:</source>
          <target>The default debugger settings are as follows:</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>For creating ISOs for VM environments, enable the kernel with BCD entries before creating the ISO.</source>
          <target>For creating ISOs for VM environments, enable the kernel with BCD entries before creating the ISO.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=698647)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to modify the default BCD store (default.bcd), see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to Modify the BCD Store Using Bcdedit</pc>.</source>
          <target>For information about how to modify the default BCD store (default.bcd), see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to Modify the BCD Store Using Bcdedit</pc>.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>To enable kernel-mode debugging</source>
          <target>To enable kernel-mode debugging</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Locate the BCD store, which is contained in a file named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bcd</pc>.</source>
          <target>Locate the BCD store, which is contained in a file named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">bcd</pc>.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>This file is located within the boot directory in the root of the media containing the Windows PE image.</source>
          <target>This file is located within the boot directory in the root of the media containing the Windows PE image.</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">`debug on`</data>
        </originalData>
        <segment state="initial">
          <source>At the command prompt, type the following bcdedit command to set the debug flag of the BCD store used to boot the image to <ph dataRef="id1" id="ph1" />:</source>
          <target>At the command prompt, type the following bcdedit command to set the debug flag of the BCD store used to boot the image to <ph dataRef="id1" id="ph1" />:</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">`{default}`</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" /> might need to be replaced by the unique identifier (UID) of the boot option for Windows PE.</source>
          <target>The <ph dataRef="id1" id="ph1" /> might need to be replaced by the unique identifier (UID) of the boot option for Windows PE.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Alternatively, you can also enable kernel debugging by pressing F8 during boot and selecting the debug option.</source>
          <target>Alternatively, you can also enable kernel debugging by pressing F8 during boot and selecting the debug option.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">`net use`</data>
        </originalData>
        <segment state="initial">
          <source>To use a symbol server from within Windows PE, use the <ph dataRef="id1" id="ph1" /> command on the server’s symbols and file shares.</source>
          <target>To use a symbol server from within Windows PE, use the <ph dataRef="id1" id="ph1" /> command on the server’s symbols and file shares.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=526808)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about command-line options that control debugging, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCDEdit Command-Line Options</pc>.</source>
          <target>For more information about command-line options that control debugging, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">BCDEdit Command-Line Options</pc>.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>WinPE for Windows 10</source>
          <target>WinPE for Windows 10</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>WinPE: Mount and Customize</source>
          <target>WinPE: Mount and Customize</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Wpeutil Command-Line Options</source>
          <target>Wpeutil Command-Line Options</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Winpeshl.ini Reference: Launching an app when WinPE starts</source>
          <target>Winpeshl.ini Reference: Launching an app when WinPE starts</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>BCDEdit Command-Line Options</source>
          <target>BCDEdit Command-Line Options</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>