{"nodes":[{"content":"IoT Core Add-ons command-line options","pos":[303,340]},{"pos":[430,467],"content":"IoT Core Add-ons command-line options"},{"content":"These tools are part of the <bpt id=\"p1\">[</bpt>Windows 10 IoT Core (IoT Core) ADK Add-Ons<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=735028)</ept>, in the <ph id=\"ph1\">\\\\</ph>Tools folder.","pos":[470,613]},{"content":"To learn more about these tools, see <bpt id=\"p1\">[</bpt>What's in the Windows ADK IoT Core Add-ons<ept id=\"p1\">](iot-core-adk-addons.md)</ept>.","pos":[614,720]},{"pos":[795,811],"content":"IoTCoreShell.lnk"},{"content":"Opens the IoT Core Shell.","pos":[814,839]},{"content":"You should run this program as an administrator.","pos":[840,888]},{"content":"If you have installed the IoTCore ADK Addons in a different path, modify the shortcut to the installed path:","pos":[890,998]},{"content":"To set this command to always run as an administrator:","pos":[1093,1147]},{"pos":[1155,1228],"content":"In Windows Explorer, right-click the shortcut, and select <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>."},{"pos":[1233,1336],"content":"In the Shortcut tab, click <bpt id=\"p1\">**</bpt>Advanced<ept id=\"p1\">**</ept>, and check <bpt id=\"p2\">**</bpt>Run as administrator<ept id=\"p2\">**</ept> <ph id=\"ph1\">&amp;gt;</ph> <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept> <ph id=\"ph2\">&amp;gt;</ph> <bpt id=\"p4\">**</bpt>Apply<ept id=\"p4\">**</ept>."},{"content":"After you open IoTCoreShell, you'll be prompted to choose a default architecture (ARM or x86) for the devices you'll be building.","pos":[1338,1467]},{"content":"This sets your default starting set of system variables.","pos":[1468,1524]},{"pos":[1561,1571],"content":"setenv.cmd"},{"pos":[1572,1578],"content":"Usage:"},{"content":"Parameters:","pos":[1596,1607]},{"content":": Architecture to be set.","pos":[1621,1646]},{"content":"(<ph id=\"ph1\">`arm`</ph> or <ph id=\"ph2\">`x86`</ph>).","pos":[1647,1664]},{"content":"Description: This command resets your environment variables.","pos":[1666,1726]},{"pos":[1729,1864],"content":"Common variables used include <bpt id=\"p1\">**</bpt>IOTADK<ph id=\"ph1\">\\_</ph>ROOT<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>COMMON<ph id=\"ph2\">\\_</ph>DIR<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>SRC<ph id=\"ph3\">\\_</ph>DIR<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>BLD<ph id=\"ph4\">\\_</ph>DIR<ept id=\"p4\">**</ept>, <bpt id=\"p5\">**</bpt>PKGBLD<ph id=\"ph5\">\\_</ph>DIR<ept id=\"p5\">**</ept>, <bpt id=\"p6\">**</bpt>TOOLS<ph id=\"ph6\">\\_</ph>DIR<ept id=\"p6\">**</ept>, and more."},{"content":"Open setenv.cmd in a text editor to see the full list of variables set.","pos":[1867,1938]},{"content":"Example:","pos":[1940,1948]},{"pos":[2017,2031],"content":"setversion.cmd"},{"pos":[2034,2040],"content":"Usage:"},{"content":"Parameters:","pos":[2063,2074]},{"pos":[2089,2139],"content":": Four-part version number to be used for packages"},{"pos":[2141,2297],"content":"Description: This command sets the version numbers used when creating a package with <bpt id=\"p1\">**</bpt>createpkg.cmd<ept id=\"p1\">**</ept> or a provisioning package with <bpt id=\"p2\">**</bpt>createprovpkg.cmd<ept id=\"p2\">**</ept>."},{"content":"(Why a four-part version number?","pos":[2299,2331]},{"content":"Learn about versioning schemes in <bpt id=\"p1\">[</bpt>Update requirements<ept id=\"p1\">](../../service/mobile/update-requirements.md)</ept>.)","pos":[2332,2434]},{"content":"This version information is stored in <bpt id=\"p1\">**</bpt>%PRJ<ph id=\"ph1\">\\_</ph>DIR%<ph id=\"ph2\">\\\\</ph>versioninfo.txt<ept id=\"p1\">**</ept> and loaded back when the IoT Core Shell is launched again.","pos":[2436,2564]},{"content":"Note that whenever the package contents are changed, the version has to be updated and all packages need to be recreated.","pos":[2565,2686]},{"content":"Example:","pos":[2688,2696]},{"pos":[2768,2780],"content":"buildpkg.cmd"},{"pos":[2782,2788],"content":"Usage:"},{"content":"Parameters:","pos":[2870,2881]},{"pos":[2911,2985],"content":": Use this to refer to the package by its ComponentName.SubComponent Name."},{"pos":[3014,3084],"content":": Use this to refer to the package by its package definition XML file."},{"content":": Use this to build all packages in the \\Sources-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages folder.","pos":[3097,3175]},{"content":"This is the same as the buildallpackages command.","pos":[3176,3225]},{"content":": Use this to erase everything in the \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs folder.","pos":[3240,3310]},{"content":"Recommended before building all packages.","pos":[3311,3352]},{"content":": Optional, used to specify a version number.","pos":[3369,3414]},{"content":"If you don't specify one, the default is to use the version defined in the variable %BSP<ph id=\"ph1\">\\_</ph>VERSION%.","pos":[3415,3514]},{"content":"Description: Builds a package from \\Sources-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages.","pos":[3518,3584]},{"content":"Buildpkg saves the package in the \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs folder as a .cab file (example: Contoso.Provisioning.Auto.cab).","pos":[3586,3708]},{"content":"For troubleshooting, Buildpkg saves logs at \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs\\logs.","pos":[3710,3784]},{"content":"Example:","pos":[3787,3795]},{"pos":[4002,4015],"content":"createpkg.cmd"},{"pos":[4017,4102],"content":"Usage: <ph id=\"ph1\">`createpkg &lt;packagefile.pkg.xml&gt;/&lt;CompName.SubCompName&gt; [version]`</ph> Parameters:"},{"pos":[4131,4201],"content":": Use this to identify the package by its package definition XML file."},{"pos":[4231,4305],"content":": Use this to identify the package by its ComponentName.SubComponent Name."},{"content":": Optional, used to specify a version number.","pos":[4325,4370]},{"content":"If you don't specify one, the default is to use the version defined in the variable %BSP<ph id=\"ph1\">\\_</ph>VERSION%.","pos":[4371,4470]},{"pos":[4473,4648],"content":"Description: Creates a packaging definition file (.pkg.xml) using the pkggen tool and parameters set in the environment defined by <bpt id=\"p1\">**</bpt>IoTCoreShell.lnk<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>setversion.cmd<ept id=\"p2\">**</ept>."},{"content":"Createpkg saves the package in the \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs folder as a .cab file (example: Contoso.Provisioning.Auto.cab).","pos":[4651,4774]},{"content":"Examples:","pos":[4776,4785]},{"pos":[5000,5017],"content":"createprovpkg.cmd"},{"pos":[5020,5026],"content":"Usage:"},{"content":"Parameters:","pos":[5082,5093]},{"pos":[5121,5170],"content":": Input file with Windows Customizations contents"},{"pos":[5193,5233],"content":": Output filename (.ppkg) with full path"},{"content":"Description: Creates a provisioning package using the icd.exe tool and parameters set in the environment defined by <bpt id=\"p1\">**</bpt>IoTCoreShell.lnk<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>setversion.cmd<ept id=\"p2\">**</ept>.","pos":[5235,5395]},{"content":"The output file (.ppkg) is created at the specified output location.","pos":[5396,5464]},{"content":"Example:","pos":[5466,5474]},{"pos":[5653,5673],"content":"createupdatepkgs.cmd"},{"pos":[5676,5682],"content":"Usage:"},{"content":"Parameters:","pos":[5716,5727]},{"pos":[5747,5768],"content":": Name of the update."},{"content":"Description: Creates an update package using the packaging definition files (.pkg.xml) in the update folder.","pos":[5770,5878]},{"content":"It uses the pkggen tool and parameters set in the environment defined by <bpt id=\"p1\">**</bpt>IoTCoreShell.lnk<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>setversion.cmd<ept id=\"p2\">**</ept>.","pos":[5879,5996]},{"content":"The output files are stored in the Build directory (%BLD<ph id=\"ph1\">\\_</ph>DIR%), in the <ph id=\"ph2\">&amp;lt;</ph>updatename<ph id=\"ph3\">&amp;gt;</ph> folder.","pos":[5998,6096]},{"content":"Example:","pos":[6098,6106]},{"content":"In this example, the output is stored at %BLD<ph id=\"ph1\">\\_</ph>DIR%<ph id=\"ph2\">\\\\</ph>Update1<ph id=\"ph3\">\\\\</ph>.","pos":[6149,6212]},{"pos":[6251,6266],"content":"createimage.cmd"},{"pos":[6269,6275],"content":"Usage:"},{"content":"Parameters:","pos":[6317,6328]},{"pos":[6349,6383],"content":": Name of the product to be built."},{"pos":[6401,6425],"content":": <bpt id=\"p1\">**</bpt>Retail<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>Test<ept id=\"p2\">**</ept>"},{"content":"Description: Creates the image file (FFU), using the product-specific packages.","pos":[6427,6506]},{"content":"It uses the createpkg.cmd with the imggen tool and the parameters set in the command environment.","pos":[6507,6604]},{"content":"The output files are available in the Build (%BLD<ph id=\"ph1\">\\_</ph>DIR%) folder.","pos":[6605,6669]},{"content":"Example:","pos":[6671,6679]},{"pos":[6729,6806],"content":"createupdatepkgs saves the FFU at %BLD<ph id=\"ph1\">\\_</ph>DIR%<ph id=\"ph2\">\\\\&lt;productname&gt;\\\\</ph>(Test or Retail)"},{"pos":[7520,7531],"content":"inf2cab.cmd"},{"pos":[7533,7539],"content":"Usage:"},{"content":"Parameters:","pos":[7587,7598]},{"pos":[7618,7656],"content":": Required, input file for the driver."},{"pos":[7686,7766],"content":": Optional, refers to the driver package by its ComponentName.SubComponent Name."},{"content":"Description: Converts a .inf driver package to a .cab file.","pos":[7768,7827]},{"content":"Inf2cab saves the package in the \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs folder  (example: Drivers.GPIO.cab).","pos":[7829,7923]},{"content":"Example:","pos":[7925,7933]},{"pos":[8062,8076],"content":"newappxpkg.cmd"},{"pos":[8078,8084],"content":"Usage:"},{"content":"Parameters:","pos":[8136,8147]},{"pos":[8168,8212],"content":": Required, input file for the Appx package."},{"pos":[8242,8324],"content":": Optional, creates the working folder using the name: ComponentName.SubComponent."},{"content":"Description: Creates a new working folder to help you convert Appx packages to .cab files.","pos":[8326,8416]},{"content":"After using this command, use the buildpkg command to create your final .cab file.","pos":[8417,8499]},{"content":"Note: This tool expects a subfolder named \"dependencies\" with any of the .appx dependency packages.","pos":[8501,8600]},{"content":"This command creates the working folder in the \\Source-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages\\ folder.","pos":[8602,8687]},{"content":"If you run this command without any variables, you'll also see the other working folders in the \\Source-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages\\ folder.","pos":[8689,8823]},{"content":"Example:","pos":[8825,8833]},{"pos":[8941,8954],"content":"newdrvpkg.cmd"},{"pos":[8956,8962],"content":"Usage:"},{"content":"Parameters:","pos":[9012,9023]},{"pos":[9043,9094],"content":": Required, input .inf file for the driver package."},{"content":": Optional, creates the working folder using the name: ComponentName.SubComponent.","pos":[9124,9206]},{"content":"The default is Drivers.<ph id=\"ph1\">&amp;lt;</ph>filename<ph id=\"ph2\">&amp;gt;</ph>.","pos":[9207,9247]},{"content":"Description: Creates a new working folder to help you convert driver packages to .cab files.","pos":[9249,9341]},{"content":"After using this command, use the buildpkg command to create your final .cab file.","pos":[9342,9424]},{"content":"This command creates the working folder in the \\Source-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages\\ folder.","pos":[9426,9511]},{"content":"If you run this command without any variables, you'll also see the other working folders in the \\Source-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages\\ folder.","pos":[9513,9647]},{"content":"Example:","pos":[9649,9657]},{"pos":[9753,9769],"content":"newcommonpkg.cmd"},{"pos":[9771,9777],"content":"Usage:"},{"content":"Parameters:","pos":[9815,9826]},{"pos":[9856,9937],"content":": Required, creates the working folder using the name ComponentName.SubComponent."},{"content":"Description: Creates a new working folder to help you save files, folders, registry keys, and provisioning packages as .cab files.","pos":[9939,10069]},{"content":"After using this command, use the buildpkg command to create your final .cab file.","pos":[10070,10152]},{"content":"This command creates the working folder in the \\Common\\Packages\\ folder.","pos":[10154,10226]},{"content":"If you run this command without any variables, you'll also see the other working folders in the \\Common\\Packages\\ folder.","pos":[10228,10349]},{"content":"Example:","pos":[10351,10359]},{"pos":[10452,10466],"content":"newproduct.cmd"},{"pos":[10469,10475],"content":"Usage:"},{"content":"Parameters:","pos":[10504,10515]},{"pos":[10536,10571],"content":": Name of the product to be created"},{"content":"Description: Creates a new working product directory under Products and copies the contents from the template file.","pos":[10573,10688]},{"content":"Example:","pos":[10690,10698]},{"pos":[10771,10784],"content":"newupdate.cmd"},{"pos":[10787,10793],"content":"Usage:"},{"content":"Parameters:","pos":[10831,10842]},{"pos":[10862,10896],"content":": Name of the update to be created"},{"pos":[10912,10938],"content":": Version number (x.y.z.a)"},{"content":"Description: Creates a new working directory under Updates and copies the contents from the template file.","pos":[10940,11046]},{"content":"Example:","pos":[11048,11056]},{"pos":[11135,11146],"content":"Older tools"},{"pos":[11191,11211],"content":"buildallpackages.cmd"},{"content":"This tool has been replaced with the tool: buildpkg All.","pos":[11213,11269]},{"pos":[11271,11277],"content":"Usage:"},{"content":"Description: Builds all of the packages in \\Sources-<ph id=\"ph1\">&amp;lt;</ph>arch<ph id=\"ph2\">&amp;gt;</ph>\\Packages, including a few sample packages that help do things like install apps.","pos":[11298,11443]},{"content":"Buildallpackages saves the packages in the \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs folder as .cab files (example: Contoso.Provisioning.Auto.cab).","pos":[11445,11575]},{"content":"For troubleshooting, BuildAllPackages saves logs at \\Build<ph id=\"ph1\">\\&amp;</ph>lt;arch<ph id=\"ph2\">&amp;gt;</ph>\\pkgs\\logs.","pos":[11577,11659]},{"content":"Example:","pos":[11662,11670]},{"pos":[11742,11752],"content":"newpkg.cmd"},{"pos":[11754,11760],"content":"Usage:"},{"content":"This tool has been replaced with the tools: newappxpkg, newdrvpkg, and newcommonpkg.","pos":[11824,11908]},{"content":"Parameters:","pos":[11910,11921]},{"content":":       The type of package created.","pos":[11943,11979]},{"content":"Must be: <bpt id=\"p1\">**</bpt>pkgAppx<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>pkgDrv<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>pkgFile<ept id=\"p3\">**</ept>.","pos":[11980,12029]},{"content":":     Component name for the package.","pos":[12053,12090]},{"content":"Examples include \"App\", \"Driver\", \"File\", \"Registry\", though you can use any naming scheme you like.","pos":[12091,12191]},{"content":": Sub-component name for the package.","pos":[12218,12255]},{"content":"Examples include \"Blinky\"","pos":[12256,12281]},{"content":"Description: Creates a new working package directory under Packages, and creates a package definition file using a template file.","pos":[12284,12413]},{"content":"Some of these package definition files include sample entries to help you add more items.","pos":[12414,12503]},{"content":"For example, the pkgFile type includes a sample entry for a Registry Key.","pos":[12504,12577]},{"content":"Example:","pos":[12579,12587]},{"pos":[12761,12775],"content":"Related topics"},{"content":"What's in the Windows ADK IoT Core Add-ons","pos":[12779,12821]},{"content":"IoT Core manufacturing guides","pos":[12849,12878]}],"content":"---\nauthor: kpacquer\nDescription: 'These tools are part of the Windows 10 IoT Core (IoT Core) ADK Add-Ons, in the \\\\Tools folder. To learn more about these tools, see What''s in the Windows ADK IoT Core Add-ons.'\nms.assetid: ae043bb0-656e-4439-bdbe-a8d370629ab7\nMSHAttr: 'PreferredLib:/library'\ntitle: 'IoT Core Add-ons command-line options'\n---\n\n# <span id=\"p_iot_core.command-line_options_to_manufacture_iot_core_images\"></span>IoT Core Add-ons command-line options\n\n\nThese tools are part of the [Windows 10 IoT Core (IoT Core) ADK Add-Ons](http://go.microsoft.com/fwlink/?LinkId=735028), in the \\\\Tools folder. To learn more about these tools, see [What's in the Windows ADK IoT Core Add-ons](iot-core-adk-addons.md).\n\n## <span id=\"iotcoreshell.lnk\"></span><span id=\"IOTCORESHELL.LNK\"></span>IoTCoreShell.lnk\n\n\nOpens the IoT Core Shell. You should run this program as an administrator.\n\nIf you have installed the IoTCore ADK Addons in a different path, modify the shortcut to the installed path:\n\n``` syntax\nC:\\Windows\\System32\\cmd.exe /k \"C:\\IoT-ADK-AddonKit\\Tools\\LaunchTool.cmd\"\n```\n\n **To set this command to always run as an administrator:**\n\n1.  In Windows Explorer, right-click the shortcut, and select **Properties**.\n2.  In the Shortcut tab, click **Advanced**, and check **Run as administrator** &gt; **OK** &gt; **Apply**.\n\nAfter you open IoTCoreShell, you'll be prompted to choose a default architecture (ARM or x86) for the devices you'll be building. This sets your default starting set of system variables.  \n\n\n## <span id=\"SETENV.CMD\"></span>setenv.cmd\nUsage: `setenv <arch>`\n\nParameters:\n\n-   `<arch>`: Architecture to be set. (`arm` or `x86`).\n\nDescription: This command resets your environment variables. \n\nCommon variables used include **IOTADK\\_ROOT**, **COMMON\\_DIR**, **SRC\\_DIR**, **BLD\\_DIR**, **PKGBLD\\_DIR**, **TOOLS\\_DIR**, and more. \n\nOpen setenv.cmd in a text editor to see the full list of variables set.\n\nExample:\n\n``` syntax\nsetenv.cmd arm\n```\n\n## <span id=\"SETVERSION.CMD\"></span>setversion.cmd\n\n\nUsage: `setversion x.y.z.a`\n\nParameters:\n\n-   `x.y.z.a`: Four-part version number to be used for packages\n\nDescription: This command sets the version numbers used when creating a package with **createpkg.cmd** or a provisioning package with **createprovpkg.cmd**.\n\n(Why a four-part version number? Learn about versioning schemes in [Update requirements](../../service/mobile/update-requirements.md).)\n\nThis version information is stored in **%PRJ\\_DIR%\\\\versioninfo.txt** and loaded back when the IoT Core Shell is launched again. Note that whenever the package contents are changed, the version has to be updated and all packages need to be recreated.\n\nExample:\n\n``` syntax\nsetversion 10.0.0.1\n```\n\n## <span id=\"BUILDPKG.CMD\"></span>buildpkg.cmd\n\nUsage: `buildpkg [CompName.SubCompName]/[packagefile.pkg.xml]/[All]/[Clean] [version]`\n\nParameters:\n\n-   `<CompName.SubCompName>`: Use this to refer to the package by its ComponentName.SubComponent Name.\n\n-   `<packagefile.pkg.xml>`: Use this to refer to the package by its package definition XML file.\n\n-   `<All>`: Use this to build all packages in the \\Sources-&lt;arch&gt;\\Packages folder. This is the same as the buildallpackages command.\n\n-   `<Clean>`: Use this to erase everything in the \\Build\\&lt;arch&gt;\\pkgs folder. Recommended before building all packages.\n\n-   `<version>`: Optional, used to specify a version number. If you don't specify one, the default is to use the version defined in the variable %BSP\\_VERSION%. \n\n\nDescription: Builds a package from \\Sources-&lt;arch&gt;\\Packages.\n\nBuildpkg saves the package in the \\Build\\&lt;arch&gt;\\pkgs folder as a .cab file (example: Contoso.Provisioning.Auto.cab).\n\nFor troubleshooting, Buildpkg saves logs at \\Build\\&lt;arch&gt;\\pkgs\\logs. \n\nExample:\n\n``` syntax\nbuildpkg Appx.Main\nbuildpkg Appx.Main 10.0.1.0\nbuildpkg sample.pkg.xml\nbuildpkg sample.pkg.xml 10.0.1.0\nbuildpkg All\nbuildpkg All 10.0.2.0\nbuildpkg Clean\n```\n\n## <span id=\"CREATEPKG.CMD\"></span>createpkg.cmd\n\nUsage: `createpkg <packagefile.pkg.xml>/<CompName.SubCompName> [version]`\nParameters:\n\n-   `<packagefile.pkg.xml>`: Use this to identify the package by its package definition XML file.\n\n-   `<CompName.SubCompName>`: Use this to identify the package by its ComponentName.SubComponent Name.   \n\n-   `<version>`: Optional, used to specify a version number. If you don't specify one, the default is to use the version defined in the variable %BSP\\_VERSION%. \n\nDescription: Creates a packaging definition file (.pkg.xml) using the pkggen tool and parameters set in the environment defined by **IoTCoreShell.lnk** and **setversion.cmd**. \n\nCreatepkg saves the package in the \\Build\\&lt;arch&gt;\\pkgs folder as a .cab file (example: Contoso.Provisioning.Auto.cab).\n\nExamples:\n\n``` syntax\ncreatepkg %SRC_DIR%\\Packages\\Appx.Main\\Appx.Main.pkg.xml\ncreatepkg %SRC_DIR%\\Packages\\Appx.Main\\Appx.Main.pkg.xml 10.0.1.0\ncreatepkg Registry.ConfigSettings \n```\n\n## <span id=\"CREATEPROVPKG.CMD\"></span>createprovpkg.cmd\n\n\nUsage: `createprovpkg <customizations.xml> <outputfilename>`\n\nParameters:\n\n-   `<customizations.xml>`: Input file with Windows Customizations contents\n-   `<outputfilename>`: Output filename (.ppkg) with full path\n\nDescription: Creates a provisioning package using the icd.exe tool and parameters set in the environment defined by **IoTCoreShell.lnk** and **setversion.cmd**. The output file (.ppkg) is created at the specified output location.\n\nExample:\n\n``` syntax\ncreateprovpkg %PRJ_DIR%\\Products\\SampleA\\Prov\\customizations.xml %PRJ_DIR%\\Products\\SampleA\\Prov\\SampleAProv.ppkg\n```\n\n## <span id=\"____CREATEUPDATEPKGS.CMD\"></span> createupdatepkgs.cmd\n\n\nUsage: `createupdatepkgs <updatename>`\n\nParameters:\n\n-   `<updatename>`: Name of the update.\n\nDescription: Creates an update package using the packaging definition files (.pkg.xml) in the update folder. It uses the pkggen tool and parameters set in the environment defined by **IoTCoreShell.lnk** and **setversion.cmd**.\n\nThe output files are stored in the Build directory (%BLD\\_DIR%), in the &lt;updatename&gt; folder.\n\nExample:\n\n``` syntax\ncreateupdatepkgs Update1\n```\n\nIn this example, the output is stored at %BLD\\_DIR%\\\\Update1\\\\.\n\n## <span id=\"CREATEIMAGE.CMD\"></span>createimage.cmd\n\n\nUsage: `createimage <productname> <buildtype>`\n\nParameters:\n\n-   `<productname>`: Name of the product to be built.\n-   `<buildtype>`: **Retail** or **Test**\n\nDescription: Creates the image file (FFU), using the product-specific packages. It uses the createpkg.cmd with the imggen tool and the parameters set in the command environment. The output files are available in the Build (%BLD\\_DIR%) folder.\n\nExample:\n\n``` syntax\ncreateimage.cmd ProductA Retail\n```\n\ncreateupdatepkgs saves the FFU at %BLD\\_DIR%\\\\<productname>\\\\(Test or Retail)\\\\\n\n<!--- ## <span id=\"_UPDATEIMAGE.CMD\"></span> updateimage.cmd\n\n\nUsage: `updateimage <productname> <buildtype> <updatename>`\n\nParameters:\n\n-   `<productname>`: Name of the product to be updated.\n-   `<buildtype>`: **Retail** or **Test**\n-   `<updatename>`: Name of the update to be applied\n\nDescription: This tool copies the specified product build and updates with the contents specified by &lt;updatename&gt; using ImageApp tool with the correct parameters set in the environment. The output files are available in the Build (%BLD\\_DIR%) folder.\n\nExample:\n\n``` syntax\nupdateimage ProductA Retail Update1\n```\n\nOutput is available at %BLD\\_DIR%\\\\ProductA\\\\Update1\\\\Retail\n\n--->\n\n## <span id=\"INF2CAB.CMD\"></span>inf2cab.cmd\n\nUsage: `inf2cab filename.inf [CompName.SubCompName]`\n\nParameters:\n\n-   `filename.inf`: Required, input file for the driver.\n\n-   `<CompName.SubCompName>`: Optional, refers to the driver package by its ComponentName.SubComponent Name.\n\nDescription: Converts a .inf driver package to a .cab file.\n\nInf2cab saves the package in the \\Build\\&lt;arch&gt;\\pkgs folder  (example: Drivers.GPIO.cab).\n\nExample:\n\n``` syntax\ninf2cab C:\\test\\gpiodriver.inf\ninf2cab C:\\test\\gpiodriver.inf Drivers.GPIO\n```\n\n## <span id=\"NEWAPPXPKG.CMD\"></span>newappxpkg.cmd\n\nUsage: `newappxpkg filename.appx [CompName.SubCompName]`\n\nParameters:\n\n-   `filename.appx`: Required, input file for the Appx package.\n\n-   `<CompName.SubCompName>`: Optional, creates the working folder using the name: ComponentName.SubComponent.\n\nDescription: Creates a new working folder to help you convert Appx packages to .cab files. After using this command, use the buildpkg command to create your final .cab file.\n\nNote: This tool expects a subfolder named \"dependencies\" with any of the .appx dependency packages.\n\nThis command creates the working folder in the \\Source-&lt;arch&gt;\\Packages\\ folder.\n\nIf you run this command without any variables, you'll also see the other working folders in the \\Source-&lt;arch&gt;\\Packages\\ folder.\n\nExample:\n\n``` syntax\nnewappxpkg C:\\test\\MainAppx_1.0.0.0_arm.appx AppX.Main\n```\n\n## <span id=\"NEWDRVPKG.CMD\"></span>newdrvpkg.cmd\n\nUsage: `newdrvpkg filename.inf [CompName.SubCompName]`\n\nParameters:\n\n-   `filename.inf`: Required, input .inf file for the driver package.\n\n-   `<CompName.SubCompName>`: Optional, creates the working folder using the name: ComponentName.SubComponent. The default is Drivers.&lt;filename&gt;.\n\nDescription: Creates a new working folder to help you convert driver packages to .cab files. After using this command, use the buildpkg command to create your final .cab file.\n\nThis command creates the working folder in the \\Source-&lt;arch&gt;\\Packages\\ folder.\n\nIf you run this command without any variables, you'll also see the other working folders in the \\Source-&lt;arch&gt;\\Packages\\ folder.\n\nExample:\n\n``` syntax\nnewdrvpkg C:\\test\\GPIO.inf Drivers.GPIO\n```\n\n## <span id=\"NEWCOMMONPKG.CMD\"></span>newcommonpkg.cmd\n\nUsage: `newcommonpkg CompName.SubCompName`\n\nParameters:\n\n-   `<CompName.SubCompName>`: Required, creates the working folder using the name ComponentName.SubComponent.\n\nDescription: Creates a new working folder to help you save files, folders, registry keys, and provisioning packages as .cab files. After using this command, use the buildpkg command to create your final .cab file.\n\nThis command creates the working folder in the \\Common\\Packages\\ folder.\n\nIf you run this command without any variables, you'll also see the other working folders in the \\Common\\Packages\\ folder.\n\nExample:\n\n``` syntax\nnewcommonpkg Registry.ConfigSettings\n```\n\n## <span id=\"_NEWPRODUCT.CMD\"></span> newproduct.cmd\n\n\nUsage: `newproduct <productname>`\n\nParameters:\n\n-   `<productname>`: Name of the product to be created\n\nDescription: Creates a new working product directory under Products and copies the contents from the template file.\n\nExample:\n\n``` syntax\nnewproduct ProductA\n```\n\n## <span id=\"NEWUPDATE.CMD\"></span>newupdate.cmd\n\n\nUsage: `newupdate <UpdateName>  <Version>`\n\nParameters:\n\n-   `<UpdateName>`: Name of the update to be created\n-   `<Version>`: Version number (x.y.z.a)\n\nDescription: Creates a new working directory under Updates and copies the contents from the template file.\n\nExample:\n\n``` syntax\nnewupdate Update2 10.0.2.0\n```\n\n\n## <span id=\"older_tools\"></span>Older tools\n\n### <span id=\"BUILDALLPACKAGES.CMD\"></span>buildallpackages.cmd\n\nThis tool has been replaced with the tool: buildpkg All.\n\nUsage: `buildallpackages`\n\nDescription: Builds all of the packages in \\Sources-&lt;arch&gt;\\Packages, including a few sample packages that help do things like install apps.\n\nBuildallpackages saves the packages in the \\Build\\&lt;arch&gt;\\pkgs folder as .cab files (example: Contoso.Provisioning.Auto.cab).\n\nFor troubleshooting, BuildAllPackages saves logs at \\Build\\&lt;arch&gt;\\pkgs\\logs. \n\nExample:\n\n``` syntax\nbuildallpackages\n```\n  \n### <span id=\"_NEWPKG.CMD\"></span> newpkg.cmd\n\nUsage: `newpkg <package type> <component name> <sub-component name>`\n\nThis tool has been replaced with the tools: newappxpkg, newdrvpkg, and newcommonpkg.\n\nParameters:\n\n-   `<package type>`:       The type of package created. Must be: **pkgAppx**, **pkgDrv**, or **pkgFile**. \n-   `<component name>`:     Component name for the package. Examples include \"App\", \"Driver\", \"File\", \"Registry\", though you can use any naming scheme you like.\n-   `<sub-component name>`: Sub-component name for the package. Examples include \"Blinky\"\n\n\nDescription: Creates a new working package directory under Packages, and creates a package definition file using a template file. Some of these package definition files include sample entries to help you add more items. For example, the pkgFile type includes a sample entry for a Registry Key.\n\nExample:\n\n``` syntax\nnewpkg pkgAppx Appx HelloWorld\nnewpkg pkgDrv Driver Blinky\nnewpkg pkgFile File MyFile\nnewpkg pkgFile Registry MyRegKey\n```\n\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[What's in the Windows ADK IoT Core Add-ons](iot-core-adk-addons.md)\n\n[IoT Core manufacturing guides](iot-core-manufacturing-guide.md)\n\n \n\n \n\n\n\n"}