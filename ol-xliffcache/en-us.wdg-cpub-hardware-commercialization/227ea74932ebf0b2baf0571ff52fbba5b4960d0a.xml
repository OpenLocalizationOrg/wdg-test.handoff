{"nodes":[{"content":"WlanMTEDeRegisterCallbackHandler","pos":[34,66]},{"content":"WlanMTEDeRegisterCallbackHandler","pos":[173,205]},{"content":"WlanMTEDeRegisterCallbackHandler","pos":[213,245]},{"content":"Unregisters a callback handler so that it will no longer be called when a manufacturing-related functionality event occurs.","pos":[248,371]},{"pos":[451,457],"content":"Syntax"},{"pos":[662,672],"content":"Parameters"},{"content":"hAdapter","pos":[757,765]},{"content":"in<ph id=\"ph1\">\\]</ph> The handle to the Wi-Fi adapter, obtained by calling <bpt id=\"p1\">[</bpt>WlanMTEOpenHandle<ept id=\"p1\">](wlanmteopenhandle.md)</ept>.","pos":[771,871]},{"pos":[954,961],"content":"Remarks"},{"pos":[964,1109],"content":"The calling application must have previously registered a callback by calling <bpt id=\"p1\">[</bpt>WlanMTERegisterCallbackHandler<ept id=\"p1\">](wlanmteregistercallbackhandler.md)</ept>"},{"pos":[1207,1219],"content":"Return Value"},{"content":"If the function succeeds, the return value is ERROR<ph id=\"ph1\">\\_</ph>SUCCESS.","pos":[1222,1283]},{"content":"If the function fails, the return value is one of the system error codes.","pos":[1285,1358]},{"content":"The following table lists the error codes that may be returned.","pos":[1359,1422]},{"content":"Error code","pos":[1540,1550]},{"content":"Description","pos":[1573,1584]},{"content":"ERROR_INVALID_PARAMETER","pos":[1650,1673]},{"content":"Returned if the adapter handle specified by the <ph id=\"ph1\">&lt;em&gt;</ph>hAdapter<ph id=\"ph2\">&lt;/em&gt;</ph> parameter is invalid or NULL.","pos":[1703,1798]},{"pos":[1932,1944],"content":"Requirements"},{"pos":[1947,1968],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> wifimte.w"},{"pos":[2006,2020],"content":"Related topics"},{"content":"Wi-Fi manufacturing API","pos":[2024,2047]}],"content":"---\nauthor: kpacquer\nDescription: WlanMTEDeRegisterCallbackHandler\nms.assetid: 0c787146-75f6-4dbe-8e7e-b4c7834142a1\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: WlanMTEDeRegisterCallbackHandler\n---\n\n# WlanMTEDeRegisterCallbackHandler\n\n\nUnregisters a callback handler so that it will no longer be called when a manufacturing-related functionality event occurs.\n\n## <span id=\"Syntax\"></span><span id=\"syntax\"></span><span id=\"SYNTAX\"></span>Syntax\n\n\n``` syntax\nDWORD WlanMTEDeRegisterCallbackHandler(\n    __in    HANDLE                          hAdapter\n);\n```\n\n## <span id=\"Parameters\"></span><span id=\"parameters\"></span><span id=\"PARAMETERS\"></span>Parameters\n\n\n<span id=\"hAdapter\"></span><span id=\"hadapter\"></span><span id=\"HADAPTER\"></span>*hAdapter*  \n\\[in\\] The handle to the Wi-Fi adapter, obtained by calling [WlanMTEOpenHandle](wlanmteopenhandle.md).\n\n## <span id=\"Remarks\"></span><span id=\"remarks\"></span><span id=\"REMARKS\"></span>Remarks\n\n\nThe calling application must have previously registered a callback by calling [WlanMTERegisterCallbackHandler](wlanmteregistercallbackhandler.md)\n\n## <span id=\"Return_Value\"></span><span id=\"return_value\"></span><span id=\"RETURN_VALUE\"></span>Return Value\n\n\nIf the function succeeds, the return value is ERROR\\_SUCCESS.\n\nIf the function fails, the return value is one of the system error codes. The following table lists the error codes that may be returned.\n\n<table>\n<colgroup>\n<col width=\"50%\" />\n<col width=\"50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">Error code</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>ERROR_INVALID_PARAMETER</p></td>\n<td align=\"left\"><p>Returned if the adapter handle specified by the <em>hAdapter</em> parameter is invalid or NULL.</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n## <span id=\"Requirements\"></span><span id=\"requirements\"></span><span id=\"REQUIREMENTS\"></span>Requirements\n\n\n**Header:** wifimte.w\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Wi-Fi manufacturing API](wi-fi-manufacturing-api.md)\n\n \n\n \n\n\n\n\n\n\n"}