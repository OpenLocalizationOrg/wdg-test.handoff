{"nodes":[{"content":"IControlManager","pos":[11,26]},{"content":"IControlManager","pos":[40,55]},{"content":"IControlManager","pos":[244,259]},{"content":"Represents the Windows Performance Recorder manager, which controls Event Tracing for Windows (ETW) sessions.","pos":[262,371]},{"content":"The client passes a collection of profiles using the <bpt id=\"p1\">[</bpt>IProfileCollection<ept id=\"p1\">](iprofilecollection.md)</ept> interface, and the manager can start, update, cancel, save, stop, or query the ETW session or providers that each profile describes.","pos":[372,601]},{"content":"The client can pass in a pointer to the <bpt id=\"p1\">[</bpt>IControlProgressHandler<ept id=\"p1\">](icontrolprogresshandler.md)</ept> handler to receive updates about the operation that the manager performs.","pos":[602,769]},{"content":"Syntax","pos":[774,780]},{"content":"Functions","pos":[2964,2973]},{"content":"The following table describes the functions that this interface provides.","pos":[2976,3049]},{"content":"Function","pos":[3154,3162]},{"content":"Description","pos":[3172,3183]},{"content":"Start","pos":[3237,3242]},{"content":"Starts a recording.","pos":[3286,3305]},{"content":"Update","pos":[3347,3353]},{"content":"Updates a profile collection.","pos":[3398,3427]},{"content":"Cancel","pos":[3468,3474]},{"content":"Stops a recording without saving any data.","pos":[3503,3545]},{"content":"Save","pos":[3587,3591]},{"content":"Saves a recording that is logged to circular buffers in memory to the specified event trace log (ETL) file.","pos":[3634,3741]},{"content":"Stop","pos":[3782,3786]},{"content":"Stops a recording and saves it to the specified event trace log (ETL) file.","pos":[3829,3904]},{"content":"QueryXML","pos":[3946,3954]},{"content":"Indicates the XML format of the currently running profile and whether the profile is running properly.","pos":[3985,4087]},{"content":"Query","pos":[4128,4133]},{"content":"Queries the properties of session and providers in all profiles.","pos":[4177,4241]},{"content":"propget","pos":[4290,4297]},{"content":"Gets the specified property.","pos":[4323,4351]},{"content":"propput","pos":[4399,4406]},{"content":"Sets the specified property.","pos":[4432,4460]},{"content":"GetProviderNameFromGuid","pos":[4502,4525]},{"content":"Gets the provider name of the specified GUID.","pos":[4571,4616]},{"content":"GetProviderGuidFromName","pos":[4657,4680]},{"content":"Gets the provider GUID of the specified name.","pos":[4726,4771]},{"content":"Properties","pos":[4812,4822]},{"content":"The following table describes the parameters of properties that this interface can get or set.","pos":[4825,4919]},{"content":"Property","pos":[5044,5052]},{"content":"Parameters","pos":[5062,5072]},{"content":"Description","pos":[5082,5093]},{"content":"ControlProgressHandler","pos":[5154,5176]},{"content":"ppControlProgressHandler<ph id=\"ph1\">&lt;/em&gt;</ph> [out]","pos":[5206,5241]},{"content":"Pointer to the client-side implementation of the <bpt id=\"p1\">[</bpt>IControlProgressHandler<ept id=\"p1\">](icontrolprogresshandler.md)</ept> interface.","pos":[5258,5371]},{"content":"ControlProgressHandler","pos":[5420,5442]},{"content":"pControlProgressHandler<ph id=\"ph1\">&lt;/em&gt;</ph> [in]","pos":[5472,5505]},{"content":"Pointer to the client-side implementation of the <ph id=\"ph1\">&lt;strong&gt;</ph>IControlProgressHandler<ph id=\"ph2\">&lt;/strong&gt;</ph> interface.","pos":[5522,5622]},{"content":"E_POINTER indicates an invalid pointer.","pos":[5623,5662]},{"content":"TraceMergeTextHandler","pos":[5710,5731]},{"content":"ppTraceMergeTextHandler<ph id=\"ph1\">&lt;/em&gt;</ph> [out]","pos":[5761,5795]},{"content":"Pointer to the text and some other merge time information in the trace injected by the <bpt id=\"p1\">[</bpt>ITraceMergeTextHandler<ept id=\"p1\">](itracemergetexthandler.md)</ept> interface.","pos":[5812,5961]},{"content":"TraceMergeTextHandler","pos":[6010,6031]},{"content":"pTraceMergeTextHandler<ph id=\"ph1\">&lt;/em&gt;</ph> [in]","pos":[6061,6093]},{"content":"Pointer to the text and some other merge time information in the trace injected by the <ph id=\"ph1\">&lt;strong&gt;</ph>ITraceMergeTextHandler<ph id=\"ph2\">&lt;/strong&gt;</ph> interface.","pos":[6110,6247]},{"content":"E_POINTER indicates an invalid pointer.","pos":[6248,6287]},{"content":"TemporaryTraceDirectory","pos":[6335,6358]},{"content":"pbstrTemporaryTraceDirectory<ph id=\"ph1\">&lt;/em&gt;</ph> [out]","pos":[6388,6427]},{"content":"Pointer to the path of the directory where the pre-merged trace files are logged.","pos":[6444,6525]},{"content":"The default is the %temp% folder.","pos":[6526,6559]},{"content":"TemporaryTraceDirectory<ph id=\"ph1\">&lt;/strong&gt;</ph> [in]","pos":[6608,6645]},{"content":"bstrTemporaryTraceDirectory","pos":[6666,6693]},{"content":"Path of the directory where the pre-merged trace files are logged.","pos":[6715,6781]},{"content":"Related topics","pos":[6822,6836]},{"content":"Interfaces","pos":[6840,6850]}],"content":"---\ntitle: IControlManager\ndescription: IControlManager\nMSHAttr:\n- 'PreferredSiteName:MSDN'\n- 'PreferredLib:/library/windows/hardware'\nms.assetid: 4c6d4a0b-5a66-4fcc-ad8a-69c68a7e7fcc\nms.prod: W10\nms.mktglfcycl: operate\nms.sitesec: msdn\n---\n\n# IControlManager\n\n\nRepresents the Windows Performance Recorder manager, which controls Event Tracing for Windows (ETW) sessions. The client passes a collection of profiles using the [IProfileCollection](iprofilecollection.md) interface, and the manager can start, update, cancel, save, stop, or query the ETW session or providers that each profile describes. The client can pass in a pointer to the [IControlProgressHandler](icontrolprogresshandler.md) handler to receive updates about the operation that the manager performs.\n\n## Syntax\n\n\n``` syntax\n{\n  [propget, id(1), helpstring(\"property ControlProgressHandler\")] HRESULT ControlProgressHandler\n    ([out, retval] IControlProgressHandler** ppControlProgressHandler);\n  [propput, id(1), helpstring(\"property ControlProgressHandler\")] HRESULT ControlProgressHandler\n    ([in] IControlProgressHandler* pControlProgressHandler);\n  [id(2), helpstring(\"Start\")] HRESULT Start\n    ([in] IProfileCollection* pProfileCollection);\n  [id(3), helpstring(\"Update\")] HRESULT Update\n    ([in] IProfileCollection* pProfileCollection);\n  [id(4), helpstring(\"Cancel\")] HRESULT Cancel\n    ([in] IProfileCollection* pProfileCollection);\n  [id(5), helpstring(\"Save\")] HRESULT Save\n    ([in] BSTR bstrFileName,\n    [in] IProfileCollection* pProfileCollection,\n    [in] ITraceMergeProperties* pTraceMergeProperties);\n  [id(6), helpstring(\"Stop\")] HRESULT Stop\n    ([in] BSTR bstrFileName,\n    [in] IProfileCollection* pProfileCollection,\n    [in] ITraceMergeProperties* pTraceMergeProperties);\n  [id(7), helpstring(\"QueryXML\")] HRESULT QueryXML\n    ([out] BSTR* pbstrResults,\n    [in] VARIANT_BOOL fValidateRuntimeState);\n  [id(8), helpstring(\"Query\")] HRESULT Query\n    ([out] IProfileCollection** ppProfileCollection,\n    [in] VARIANT_BOOL fValidateRuntimeState);\n  [propget, id(9), helpstring(\"property TraceMergeTextHandler\")] HRESULT TraceMergeTextHandler\n    ([out, retval] ITraceMergeTextHandler** ppTraceMergeTextHandler);\n  [propput, id(9), helpstring(\"property TraceMergeTextHandler\")] HRESULT TraceMergeTextHandler\n    ([in] ITraceMergeTextHandler* pTraceMergeTextHandler);\n  [propget, id(10), helpstring(\"property TemporaryTraceDirectory\")] HRESULT TemporaryTraceDirectory\n    ([out, retval] BSTR* pbstrTemporaryTraceDirectory);\n  [propput, id(10), helpstring(\"property TemporaryTraceDirectory\")] HRESULT TemporaryTraceDirectory\n    ([in] BSTR bstrTemporaryTraceDirectory);\n  [id(11), helpstring(\"GetProviderNameFromGuid\")] HRESULT GetProviderNameFromGuid\n    ([out] BSTR* bstrProviderIdStr,\n    [in] REFGUID ProviderId);\n  [id(12), helpstring(\"GetProviderGuidFromName\")] HRESULT GetProviderGuidFromName\n    ([out] GUID* ProviderId,\n    [in] BSTR bstrProViderName);\n};\n```\n\n## Functions\n\n\nThe following table describes the functions that this interface provides.\n\n<table>\n<colgroup>\n<col width=\"50%\" />\n<col width=\"50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p>[Start](start-icontrolmanager.md)</p></td>\n<td><p>Starts a recording.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>[Update](update-icontrolmanager.md)</p></td>\n<td><p>Updates a profile collection.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>[Cancel](cancel.md)</p></td>\n<td><p>Stops a recording without saving any data.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>[Save](save-icontrolmanager.md)</p></td>\n<td><p>Saves a recording that is logged to circular buffers in memory to the specified event trace log (ETL) file.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>[Stop](stop-icontrolmanager.md)</p></td>\n<td><p>Stops a recording and saves it to the specified event trace log (ETL) file.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>[QueryXML](queryxml.md)</p></td>\n<td><p>Indicates the XML format of the currently running profile and whether the profile is running properly.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>[Query](query-icontrolmanager.md)</p></td>\n<td><p>Queries the properties of session and providers in all profiles.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p><strong>propget</strong></p></td>\n<td><p>Gets the specified property.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p><strong>propput</strong></p></td>\n<td><p>Sets the specified property.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p>[GetProviderNameFromGuid](getprovidernamefromguid.md)</p></td>\n<td><p>Gets the provider name of the specified GUID.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p>[GetProviderGuidFromName](getproviderguidfromname.md)</p></td>\n<td><p>Gets the provider GUID of the specified name.</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n## Properties\n\n\nThe following table describes the parameters of properties that this interface can get or set.\n\n<table>\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Property</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td><p><strong>ControlProgressHandler</strong></p></td>\n<td><p><em>ppControlProgressHandler</em> [out]</p></td>\n<td><p>Pointer to the client-side implementation of the [IControlProgressHandler](icontrolprogresshandler.md) interface.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p><strong>ControlProgressHandler</strong></p></td>\n<td><p><em>pControlProgressHandler</em> [in]</p></td>\n<td><p>Pointer to the client-side implementation of the <strong>IControlProgressHandler</strong> interface. E_POINTER indicates an invalid pointer.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p><strong>TraceMergeTextHandler</strong></p></td>\n<td><p><em>ppTraceMergeTextHandler</em> [out]</p></td>\n<td><p>Pointer to the text and some other merge time information in the trace injected by the [ITraceMergeTextHandler](itracemergetexthandler.md) interface.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p><strong>TraceMergeTextHandler</strong></p></td>\n<td><p><em>pTraceMergeTextHandler</em> [in]</p></td>\n<td><p>Pointer to the text and some other merge time information in the trace injected by the <strong>ITraceMergeTextHandler</strong> interface. E_POINTER indicates an invalid pointer.</p></td>\n</tr>\n<tr class=\"odd\">\n<td><p><strong>TemporaryTraceDirectory</strong></p></td>\n<td><p><em>pbstrTemporaryTraceDirectory</em> [out]</p></td>\n<td><p>Pointer to the path of the directory where the pre-merged trace files are logged. The default is the %temp% folder.</p></td>\n</tr>\n<tr class=\"even\">\n<td><p><strong>TemporaryTraceDirectory</strong> [in]</p></td>\n<td><p><em>bstrTemporaryTraceDirectory</em></p></td>\n<td><p>Path of the directory where the pre-merged trace files are logged.</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n## Related topics\n\n\n[Interfaces](interfaces-wprcontrol.md)\n\n \n\n \n\n\n\n\n\n\n\n"}