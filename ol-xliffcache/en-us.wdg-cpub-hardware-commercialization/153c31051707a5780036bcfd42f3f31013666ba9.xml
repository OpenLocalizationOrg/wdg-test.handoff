{"nodes":[{"content":"The following scripts are used in the lab.","pos":[35,77]},{"content":"It may be helpful to create these all at once, or to download the samples from the web.","pos":[78,165]},{"content":"Sample scripts","pos":[273,287]},{"content":"Sample scripts","pos":[295,309]},{"content":"The following scripts are used in the lab.","pos":[311,353]},{"content":"It may be helpful to create these all at once, or to <bpt id=\"p1\">[</bpt>download the samples<ept id=\"p1\">](http://go.microsoft.com/fwlink/p/?LinkId=800657)</ept> from the web.","pos":[354,492]},{"pos":[626,650],"content":"Image deployment scripts"},{"content":"The following scripts set up Windows devices by using an image file, and configure push-button reset features.","pos":[653,763]},{"pos":[919,950],"content":"CreatePartitions-(firmware).txt"},{"content":"Use these scripts together with DiskPart to format and set up the hard disk partitions for Windows, including recovery tools.","pos":[952,1077]},{"content":"Adjust the partition sizes to fill the drive as necessary.","pos":[1078,1136]},{"pos":[1138,1168],"content":"<bpt id=\"p1\">**</bpt>CreatePartitions-UEFI.txt<ept id=\"p1\">**</ept>:"},{"content":"Creates the System, MSR, Windows, and recovery tools partitions for UEFI-based PCs.","pos":[1170,1253]},{"content":"This script temporarily assigns these drive letters: System=S, Windows=W, and Recovery=R.","pos":[1255,1344]},{"content":"The MSR partition doesn't get a letter.","pos":[1345,1384]},{"content":"The letter W is used to avoid potential drive letter conflicts.","pos":[1385,1448]},{"content":"After the device reboots, the Windows partition is assigned the letter C, and the other partitions don’t receive drive letters.","pos":[1449,1576]},{"content":"The following diagram shows the resulting partition configuration:","pos":[1578,1644]},{"content":"diagram of default partition layout: system, msr, windows, and recovery","pos":[1648,1719]},{"pos":[3045,3075],"content":"<bpt id=\"p1\">**</bpt>CreatePartitions-BIOS.txt<ept id=\"p1\">**</ept>:"},{"content":"Creates the System, Windows, and recovery tools partitions for BIOS-based PCs.","pos":[3077,3155]},{"content":"This script temporarily assigns these drive letters: System=S, Windows=W, and Recovery=R.","pos":[3157,3246]},{"content":"The letter W is used to avoid potential drive letter conflicts.","pos":[3247,3310]},{"content":"After the device reboots, the Windows partition is assigned the letter C, and the other partitions don’t receive drive letters.","pos":[3311,3438]},{"content":"The following diagram shows the resulting partition configuration:","pos":[3440,3506]},{"content":"diagram of default partition layout: system, windows, and recovery","pos":[3510,3576]},{"pos":[4783,4811],"content":"Hide the recovery partitions"},{"content":"Use these scripts with DiskPart to hide the recovery partitions after they have been configured.","pos":[4813,4909]},{"pos":[4911,4947],"content":"<bpt id=\"p1\">**</bpt>HideRecoveryPartitions-UEFI.txt<ept id=\"p1\">**</ept>:"},{"content":"HideRecoveryPartitions-BIOS.txt:","pos":[5141,5173]},{"content":"ApplyImage.bat","pos":[5303,5317]},{"content":"Use this script to launch the other scripts that deploy Windows to a new device.","pos":[5319,5399]},{"content":"ApplyRecovery.bat","pos":[8725,8742]},{"content":"Use this script to prepare the Windows recovery partition.","pos":[8744,8802]},{"pos":[11776,11798],"content":"Walkthrough-Deploy.bat"},{"content":"Use this script to launch the other scripts, deploying Windows to a new device.","pos":[11800,11879]},{"pos":[16212,16249],"content":"Start layout (LayoutModification.xml)"},{"content":"The Start tile layout in Windows 10 provides OEMs the ability to append tiles to the default Start layout to include Web links, secondary tiles, Windows apps, and Classic Windows applications.","pos":[16252,16444]},{"content":"OEMs can use this layout to make it applicable to multiple regions or markets without duplicating a lot of the work.","pos":[16445,16561]},{"content":"In addition, OEMs can add up to three default apps to the frequently used apps section in the system area, which delivers sytem-driven lists o the user including important or frequently accessed system locations and recently installed apps.","pos":[16562,16802]},{"content":"To take advantage of all these new features and have the most robust and complete Start customization experience for Windows 10, consider creating a LayoutModification.xml file.","pos":[16804,16981]},{"content":"This file specifies how the OEM tiles should be laid out in Start.","pos":[16982,17048]},{"content":"For more information about how to customize the new Start layout, see the topic <bpt id=\"p1\">[</bpt>Customize the Windows 10 Start screen<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/mt170651)</ept> in the Windows 10 Partner Documentation.","pos":[17049,17271]},{"pos":[17273,17307],"content":"Sample <bpt id=\"p1\">**</bpt>LayoutModification.xml<ept id=\"p1\">**</ept>:"},{"content":"Start layout walkthrough","pos":[19796,19820]},{"pos":[19828,19907],"content":"If you don’t already have one, create a file called <bpt id=\"p1\">**</bpt>LayoutModification.xml<ept id=\"p1\">**</ept>."},{"content":"If you need to specify whether the append groups must only be applied to specific regions, use the optional <bpt id=\"p1\">**</bpt>Region<ept id=\"p1\">**</ept> attribute in the <bpt id=\"p2\">**</bpt>RequiredStartGroups<ept id=\"p2\">**</ept> element.","pos":[19912,20080]},{"content":"The Region value must be equal to two-letter country/region codes.","pos":[20081,20147]},{"content":"Use a pipe “|” delimiter if you need to specify multiple countries/regions.","pos":[20148,20223]},{"content":"Specify the tiles you want to add within an <bpt id=\"p1\">**</bpt>AppendGroup<ept id=\"p1\">**</ept>.","pos":[20316,20376]},{"content":"OEMs can add a maximum of two <bpt id=\"p1\">**</bpt>AppendGroup<ept id=\"p1\">**</ept>.","pos":[20377,20423]},{"content":"The following example shows two groups called “Fabrikam Group 1” and “Fabrikam Group 2”, which contain tiles that will be applied if the device country/region matches what’s specified in <bpt id=\"p1\">**</bpt>Region<ept id=\"p1\">**</ept> (in this case, the regions are Germany, Spain, France, United Kingdom, Italy, and United States).","pos":[20424,20719]},{"content":"Each group contains three tiles and the various elements you need to use depending on the tile that you want to pin to Start.","pos":[20720,20845]},{"content":"The following example shows one group called “Fabrikam Group 1”, which will be applied if the device country/region doesn’t match any of the ones specified in the previous RequiredStartGroups.","pos":[23279,23471]},{"content":"Keep the following in mind when creating your LayoutModification.xml file:","pos":[24185,24259]},{"pos":[24269,24512],"content":"If you are pinning a Classic Windows applications using the <bpt id=\"p1\">**</bpt>start:DesktopApplicationTile<ept id=\"p1\">**</ept> tag and you don’t know the application’s application user model ID, you need to create a .lnk file in a legacy Start Menu directory before first boot."},{"pos":[24521,24710],"content":"If you use the <bpt id=\"p1\">**</bpt>start:DesktopApplicationTile<ept id=\"p1\">**</ept> tag to pin a legacy .url shortcut to Start, you must create a .url file and add this file to a legacy Start Menu directory before first boot."},{"content":"For the above scenarios, you can use the following directories to put the .url or .lnk files:","pos":[24716,24809]},{"content":"%APPDATA%<ph id=\"ph1\">\\\\</ph>Microsoft<ph id=\"ph2\">\\\\</ph>Windows<ph id=\"ph3\">\\\\</ph>Start Menu<ph id=\"ph4\">\\\\</ph>Programs","pos":[24819,24870]},{"content":"%ALLUSERSPROFILE%<ph id=\"ph1\">\\\\</ph>Microsoft<ph id=\"ph2\">\\\\</ph>Windows<ph id=\"ph3\">\\\\</ph>Start Menu<ph id=\"ph4\">\\\\</ph>Programs","pos":[24881,24940]},{"content":"Optionally, you can add up to 3 apps to the frequently used section of the system area.","pos":[24948,25035]},{"content":"The following example shows how to add the calculator app to the frequently used system area.","pos":[25036,25129]},{"content":"Save the LayoutModification.xml file.","pos":[25351,25388]},{"content":"Once you’ve created the LayoutModification.xml file, you’ll need to place this file in the correct system location using either Windows ICD or classic-style deployment.","pos":[25394,25562]},{"content":"For more information on how to do this, see:","pos":[25563,25607]},{"content":"Windows ICD - Lab 1, Step 7: Customize the Start layout","pos":[25617,25672]},{"content":"Classic-style deployment - Lab 2a, Step 5: Add the files you need to modify the Start layout","pos":[25681,25773]},{"content":"If you don’t create a LayoutModification.xml file and you continue to use the Start Unattend settings, the OS will use the Unattend answer file and take the first 12 SquareTiles or DesktoporSquareTiles settings specified in the Unattend file.","pos":[25779,26021]},{"content":"The system then places these tiles automatically within the newly-created groups at the end of Start—the first six tiles are placed in the first OEM group and the second set of six tiles are placed in the second OEM group.","pos":[26022,26244]},{"content":"If OEMName is specified in the Unattend file, the value for this element is used to name the OEM groups that will be created.","pos":[26245,26370]},{"pos":[26491,26530],"content":"Microphone settings (SpeechSetting.cmd)"},{"content":"Use this script to tune your device’s microphone to help maximize speech accuracy for features like Cortana.","pos":[26533,26641]},{"content":"To learn how to test for the appropriate values for your device, see <bpt id=\"p1\">[</bpt>Cortana Device Test Setup<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/dn957009)</ept> in the Hardware WEG.","pos":[26642,26821]},{"pos":[26823,26845],"content":"<bpt id=\"p1\">**</bpt>SpeechSetting.cmd<ept id=\"p1\">**</ept>:"},{"pos":[29370,29389],"content":"Remove Windows apps"},{"content":"When you add language packs to an image, you’ll need to remove and reinstall each of your Windows apps to make sure they include the language assets.","pos":[29392,29541]},{"content":"Here's two scripts, one which can be used to remove the apps from an offline image, and another that can be used in audit mode to remove apps from a running image:","pos":[29543,29706]},{"content":"Remove<ph id=\"ph1\">\\_</ph>apps<ph id=\"ph2\">\\_</ph>in<ph id=\"ph3\">\\_</ph>offline<ph id=\"ph4\">\\_</ph>image.cmd:","pos":[29710,29747]},{"content":"This script assumes the file name is install.wim, that the script is being run from the same folder as install.wim, that the index being modified is <ph id=\"ph1\">\\#</ph>1, and that there are no other Windows images in other index locations (<ph id=\"ph2\">\\#</ph>2, <ph id=\"ph3\">\\#</ph>3) that need to be preserved.","pos":[29751,30010]},{"content":"Remove<ph id=\"ph1\">\\_</ph>apps<ph id=\"ph2\">\\_</ph>in<ph id=\"ph3\">\\_</ph>audit<ph id=\"ph4\">\\_</ph>mode.cmd","pos":[31121,31154]},{"content":"This script assumes you’re running in audit mode on the reference PC.","pos":[31158,31227]},{"pos":[32315,32326],"content":"BootToAudit"},{"content":"Add an answer file to the Windows image in C:<ph id=\"ph1\">\\\\</ph>mount<ph id=\"ph2\">\\\\</ph>windows<ph id=\"ph3\">\\\\</ph>Windows<ph id=\"ph4\">\\\\</ph>Panther<ph id=\"ph5\">\\\\</ph>unattend.xml to instruct it to boot into audit mode.","pos":[32329,32462]},{"content":"You can create this answer file in Windows System Image Manager.","pos":[32463,32527]},{"content":"BootToAudit-x64:","pos":[32531,32547]},{"content":"BootToAudit-x86:","pos":[33128,33144]},{"pos":[33910,33953],"content":"Keeping Windows settings through a recovery"},{"content":"Windows doesn't automatically save settings created through unattend.xml setup files, nor Windows Start Menu customizations created with LayoutModification.xml during a full-system reset, nor first-login info from oobe.xml.","pos":[33956,34179]},{"content":"To make sure your customizations are saved, that includes steps to put the unattend.xml, LayoutModification.xml, and oobe.xml files back into place.","pos":[34181,34329]},{"content":"Here's some sample scripts that show how to retain these settings and put them back into the right spots.","pos":[34330,34435]},{"content":"Save copies of unattend.xml, LayoutModification.xml, oobe.xml, plus these two text files, in C:<ph id=\"ph1\">\\\\</ph>Recovery<ph id=\"ph2\">\\\\</ph>OEM<ph id=\"ph3\">\\\\</ph>:","pos":[34436,34549]},{"content":"ResetConfig.xml","pos":[34553,34568]},{"content":"EnableCustomizationsAfterRecovery.cmd","pos":[34941,34978]},{"content":"For multilingual deployments, OOBE.xml uses a more complicated folder structure.","pos":[36536,36616]},{"content":"It's OK to just copy the entire folder structure into C:<ph id=\"ph1\">\\\\</ph>Recovery<ph id=\"ph2\">\\\\</ph>OEM, and then modify the script to copy the entire folder:","pos":[36617,36743]},{"pos":[36826,36992],"content":"To learn more about using extensibility points for push-button reset, see <bpt id=\"p1\">[</bpt>Add a script to push-button reset features<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=618946)</ept>."}],"content":"---\nauthor: Justinha\nDescription: 'The following scripts are used in the lab. It may be helpful to create these all at once, or to download the samples from the web.'\nms.assetid: 621503da-e74f-4eef-8315-72c8be67747a\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: Sample scripts\n---\n\n# Sample scripts\n\nThe following scripts are used in the lab. It may be helpful to create these all at once, or to [download the samples](http://go.microsoft.com/fwlink/p/?LinkId=800657) from the web.\n\n## <span id=\"Image_deployment_scripts\"></span><span id=\"image_deployment_scripts\"></span><span id=\"IMAGE_DEPLOYMENT_SCRIPTS\"></span>Image deployment scripts\n\n\nThe following scripts set up Windows devices by using an image file, and configure push-button reset features.\n\n### <span id=\"CreatePartitions-_firmware_.txt\"></span><span id=\"createpartitions-_firmware_.txt\"></span><span id=\"CREATEPARTITIONS-_FIRMWARE_.TXT\"></span>CreatePartitions-(firmware).txt\n\nUse these scripts together with DiskPart to format and set up the hard disk partitions for Windows, including recovery tools. Adjust the partition sizes to fill the drive as necessary.\n\n**CreatePartitions-UEFI.txt**:\n\nCreates the System, MSR, Windows, and recovery tools partitions for UEFI-based PCs.\n\nThis script temporarily assigns these drive letters: System=S, Windows=W, and Recovery=R. The MSR partition doesn't get a letter. The letter W is used to avoid potential drive letter conflicts. After the device reboots, the Windows partition is assigned the letter C, and the other partitions don’t receive drive letters.\n\nThe following diagram shows the resulting partition configuration:\n\n![diagram of default partition layout: system, msr, windows, and recovery](images/dep-win10-partitions-uefi.png)\n\n``` syntax\nrem == CreatePartitions-UEFI.txt ==\nrem == These commands are used with DiskPart to\nrem    create four partitions\nrem    for a UEFI/GPT-based PC.\nrem    Adjust the partition sizes to fill the drive\nrem    as necessary. ==\nselect disk 0\nclean\nconvert gpt\nrem == 1. System partition =========================\ncreate partition efi size=100\nrem    ** NOTE: For Advanced Format 4Kn drives,\nrem               change this value to size = 260 ** \nformat quick fs=fat32 label=\"System\"\nassign letter=\"S\"\nrem == 2. Microsoft Reserved (MSR) partition =======\ncreate partition msr size=16\nrem == 3. Windows partition ========================\nrem ==    a. Create the Windows partition ==========\ncreate partition primary \nrem ==    b. Create space for the recovery tools ===\nshrink minimum=500\nrem       ** NOTE: Update this size to match the\nrem                size of the recovery tools \nrem                (winre.wim)                    **\nrem ==    c. Prepare the Windows partition ========= \nformat quick fs=ntfs label=\"Windows\"\nassign letter=\"W\"\nrem === 4. Recovery partition ======================\ncreate partition primary\nformat quick fs=ntfs label=\"Recovery\"\nassign letter=\"R\"\nset id=\"de94bba4-06d1-4d40-a16a-bfd50179d6ac\"\ngpt attributes=0x8000000000000001\nlist volume\nexit\n```\n\n**CreatePartitions-BIOS.txt**:\n\nCreates the System, Windows, and recovery tools partitions for BIOS-based PCs.\n\nThis script temporarily assigns these drive letters: System=S, Windows=W, and Recovery=R. The letter W is used to avoid potential drive letter conflicts. After the device reboots, the Windows partition is assigned the letter C, and the other partitions don’t receive drive letters.\n\nThe following diagram shows the resulting partition configuration:\n\n![diagram of default partition layout: system, windows, and recovery](images/dep-win10-partitions-bios.png)\n\n``` syntax\nrem == CreatePartitions-BIOS.txt ==\nrem == These commands are used with DiskPart to\nrem    create three partitions\nrem    for a BIOS/MBR-based computer.\nrem    Adjust the partition sizes to fill the drive\nrem    as necessary. ==\nselect disk 0\nclean\nrem == 1. System partition ======================\ncreate partition primary size=100\nformat quick fs=ntfs label=\"System\"\nassign letter=\"S\"\nactive\nrem == 2. Windows partition =====================\nrem ==    a. Create the Windows partition =======\ncreate partition primary\nrem ==    b. Create space for the recovery tools  \nshrink minimum=500\nrem       ** NOTE: Update this size to match the\nrem                size of the recovery tools \nrem                (winre.wim)                 **\nrem ==    c. Prepare the Windows partition ====== \nformat quick fs=ntfs label=\"Windows\"\nassign letter=\"W\"\nrem == 3. Recovery partition ====================\ncreate partition primary\nformat quick fs=ntfs label=\"Recovery image\"\nassign letter=\"R\"\nset id=27\nlist volume\nexit\n```\n\n### <span id=\"Hide_the_recovery_partitions\"></span><span id=\"hide_the_recovery_partitions\"></span><span id=\"HIDE_THE_RECOVERY_PARTITIONS\"></span>Hide the recovery partitions\n\nUse these scripts with DiskPart to hide the recovery partitions after they have been configured.\n\n**HideRecoveryPartitions-UEFI.txt**:\n\n``` syntax\nrem === HideRecoveryPartitions-UEFI.txt ===\nselect disk 0\nselect partition 4\nset id=de94bba4-06d1-4d40-a16a-bfd50179d6ac\ngpt attributes=0x8000000000000001\nremove\nlist volume\n```\n\n**HideRecoveryPartitions-BIOS.txt:**\n\n``` syntax\nrem === HideRecoveryPartitions-BIOS.txt ===\nselect disk 0\nselect partition 3\nset id=27\nremove\nlist volume\n```\n\n### ApplyImage.bat\n\nUse this script to launch the other scripts that deploy Windows to a new device.\n\n``` syntax\n@echo ApplyImage.bat\n@echo     Run from the reference device in the WinPE environment\n@echo     This script erases the primary hard drive and applies a new image\n@if not exist X:\\Windows\\System32 echo ERROR: This script is built to run in Windows PE.\n@if not exist X:\\Windows\\System32 goto END\n@if %1.==. echo ERROR: To run this script, add a path to a Windows image file.\n@if %1.==. echo Example: ApplyImage D:\\WindowsWithFrench.wim\n@if %1.==. goto END\n@echo *********************************************************************\n@echo Checking to see if the PC is booted in BIOS or UEFI mode.\nwpeutil UpdateBootInfo\nfor /f \"tokens=2* delims=    \" %%A in ('reg query HKLM\\System\\CurrentControlSet\\Control /v PEFirmwareType') DO SET Firmware=%%B\n@echo            Note: delims is a TAB followed by a space.\n@if x%Firmware%==x echo ERROR: Can't figure out which firmware we're on.\n@if x%Firmware%==x echo        Common fix: In the command above:\n@if x%Firmware%==x echo             for /f \"tokens=2* delims=    \"\n@if x%Firmware%==x echo        ...replace the spaces with a TAB character followed by a space.\n@if x%Firmware%==x goto END\n@if %Firmware%==0x1 echo The PC is booted in BIOS mode. \n@if %Firmware%==0x2 echo The PC is booted in UEFI mode. \n@echo *********************************************************************\n@echo Formatting the primary disk...\n@if %Firmware%==0x1 echo    ...using BIOS (MBR) format and partitions.\n@if %Firmware%==0x2 echo    ...using UEFI (GPT) format and partitions. \n@echo CAUTION: All the data on the disk will be DELETED.\n@SET /P READY=Erase all data and continue? (Y or N):\n@if %READY%.==y. set READY=Y\n@if not %READY%.==Y. goto END\nif %Firmware%==0x1 diskpart /s %~dp0CreatePartitions-BIOS.txt\nif %Firmware%==0x2 diskpart /s %~dp0CreatePartitions-UEFI.txt\n@echo *********************************************************************\n@echo  == Set high-performance power scheme to speed deployment ==\ncall powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\n@echo *********************************************************************\n@echo  == Apply the image to the Windows partition ==\n@SET /P COMPACTOS=Deploy as Compact OS? (Y or N):\n@if %COMPACTOS%.==y. set COMPACTOS=Y\n@echo Does this image include Extended Attributes?\n@echo    (If you're not sure, type N).\n@SET /P EA=(Y or N):\n@if %EA%.==y. set EA=Y\nif %COMPACTOS%.==Y.     if %EA%.==Y.     dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\ /Compact /EA\nif not %COMPACTOS%.==Y. if %EA%.==Y.     dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\ /EA\nif %COMPACTOS%.==Y.     if not %EA%.==Y. dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\ /Compact\nif not %COMPACTOS%.==Y. if not %EA%.==Y. dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\\n@echo *********************************************************************\n@echo == Copy boot files to the System partition ==\nW:\\Windows\\System32\\bcdboot W:\\Windows /s S:\n@echo *********************************************************************\n@echo   Next steps:\n@echo   * Add Windows Classic apps (optional):\n@echo       DISM /Apply-SiloedPackage /ImagePath:W:\\ \n@echo            /PackagePath:\"D:\\App1.spp\" /PackagePath:\"D:\\App2.spp\"  ...\n@echo   * Add the recovery image:\n@echo       ApplyRecovery.bat\n@echo   * Reboot:\n@echo       exit\n:END\n```\n\n### ApplyRecovery.bat\n\nUse this script to prepare the Windows recovery partition.\n\n``` syntax\n@echo == ApplyRecovery.bat ==\n@echo  *********************************************************************\n@echo  == Copy the Windows RE image to the Windows RE Tools partition ==\nmd R:\\Recovery\\WindowsRE\nxcopy /h W:\\Windows\\System32\\Recovery\\Winre.wim R:\\Recovery\\WindowsRE\\\n@echo  *********************************************************************\n@echo  == Register the location of the recovery tools ==\nW:\\Windows\\System32\\Reagentc /Setreimage /Path R:\\Recovery\\WindowsRE /Target W:\\Windows\n@echo  *********************************************************************\n@echo  == If Compact OS, single-instance the recovery provisioning package ==\n@echo     Options: N: No\n@echo              Y: Yes\n@echo              D: Yes, but defer cleanup steps to first boot.\n@echo                 Use this if the cleanup steps take more than 30 minutes.\n@echo                 defer the cleanup steps to the first boot.\n@SET /P COMPACTOS=Deploy as Compact OS? (Y, N, or D):\n@if %COMPACTOS%.==y. set COMPACTOS=Y\n@if %COMPACTOS%.==d. set COMPACTOS=D\nif %COMPACTOS%.==Y. dism /Apply-CustomDataImage /CustomDataImage:W:\\Recovery\\Customizations\\USMT.ppkg /ImagePath:W:\\ /SingleInstance\nif %COMPACTOS%.==D. dism /Apply-CustomDataImage /CustomDataImage:W:\\Recovery\\Customizations\\USMT.ppkg /ImagePath:W:\\ /SingleInstance /Defer\n@rem *********************************************************************\n@echo Checking to see if the PC is booted in BIOS or UEFI mode.\nwpeutil UpdateBootInfo\nfor /f \"tokens=2* delims=    \" %%A in ('reg query HKLM\\System\\CurrentControlSet\\Control /v PEFirmwareType') DO SET Firmware=%%B\n@echo            Note: delims is a TAB followed by a space.\n@if x%Firmware%==x echo ERROR: Can't figure out which firmware we're on.\n@if x%Firmware%==x echo        Common fix: In the command above:\n@if x%Firmware%==x echo             for /f \"tokens=2* delims=    \"\n@if x%Firmware%==x echo        ...replace the spaces with a TAB character followed by a space.\n@if x%Firmware%==x goto END\n@if %Firmware%==0x1 echo The PC is booted in BIOS mode. \n@if %Firmware%==0x2 echo The PC is booted in UEFI mode. \n@echo  *********************************************************************\n@echo == Hiding the recovery tools partition\nif %Firmware%==0x1 diskpart /s %~dp0HideRecoveryPartitions-BIOS.txt\nif %Firmware%==0x2 diskpart /s %~dp0HideRecoveryPartitions-UEFI.txt\n@echo *********************************************************************\n@echo == Verify the configuration status of the images. ==\nW:\\Windows\\System32\\Reagentc /Info /Target W:\\Windows\n@echo    (Note: Windows RE status may appear as Disabled, this is OK.)\n@echo *********************************************************************\n@echo      All done!\n@echo      Disconnect the USB drive from the reference device.\n@echo      Type exit to reboot.\n@echo.\n:END\n```\n\n### <span id=\"Walkthrough-Deploy.bat\"></span><span id=\"walkthrough-deploy.bat\"></span><span id=\"WALKTHROUGH-DEPLOY.BAT\"></span>Walkthrough-Deploy.bat\n\nUse this script to launch the other scripts, deploying Windows to a new device.\n\n``` syntax\n@echo Walkthrough-Deploy.bat\n@echo     Run from the reference device in the WinPE environment\n@echo     This script erases the primary hard drive and applies a new image\n@echo.\n@echo UPDATE (JUNE 2016):\n@echo   To apply siloed provisioning packages (SPPs), use these scripts instead:\n@echo     ApplyImage.bat install.wim\n@echo       (apply your SPPs)\n@echo     ApplyRecovery.bat\n@echo.\n@if not exist X:\\Windows\\System32 echo ERROR: This script is built to run in Windows PE.\n@if not exist X:\\Windows\\System32 goto END\n@if %1.==. echo ERROR: To run this script, add a path to a Windows image file.\n@if %1.==. echo Example: Walkthrough-Deploy D:\\WindowsWithFrench.wim\n@if %1.==. goto END\n@echo *********************************************************************\nSET /P M=Deploy as Compact OS? (Y or N):\n@if %M%.==Y. set COMPACTOS=True\n@if %M%.==y. set COMPACTOS=True\n@if %COMPACTOS%==True echo Deploying as Compact OS.\n@rem *********************************************************************\n@echo Checking to see if the PC is booted in BIOS or UEFI mode.\nwpeutil UpdateBootInfo\nfor /f \"tokens=2* delims=    \" %%A in ('reg query HKLM\\System\\CurrentControlSet\\Control /v PEFirmwareType') DO SET Firmware=%%B\n@echo            Note: delims is a TAB followed by a space.\n@if x%Firmware%==x echo ERROR: Can't figure out which firmware we're on.\n@if x%Firmware%==x echo        Common fix: In the command above:\n@if x%Firmware%==x echo             for /f \"tokens=2* delims=    \"\n@if x%Firmware%==x echo        ...replace the spaces with a TAB character followed by a space.\n@if x%Firmware%==x goto END\n@if %Firmware%==0x1 echo The PC is booted in BIOS mode. \n@if %Firmware%==0x2 echo The PC is booted in UEFI mode. \n@rem *********************************************************************\n@echo Formatting the primary disk...\n@if %Firmware%==0x1 echo ...using BIOS (MBR) format and partitions.\n@if %Firmware%==0x2 echo ...using UEFI (GPT) format and partitions. \n@echo CAUTION: All the data on the disk will be DELETED.\n@SET /P READY=Erase all data and continue? (Y or N):\n@if %READY%.==y. set READY=Y\n@if not %READY%.==Y. goto END\nif %Firmware%==0x1 diskpart /s %~dp0CreatePartitions-BIOS.txt\nif %Firmware%==0x2 diskpart /s %~dp0CreatePartitions-UEFI.txt\n@echo *********************************************************************\n@echo  == Set high-performance power scheme to speed deployment ==\ncall powercfg /s 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c\n@echo *********************************************************************\n@echo  == Apply the image to the Windows partition ==\n@SET /P COMPACTOS=Deploy as Compact OS? (Y or N):\n@if %COMPACTOS%.==y. set COMPACTOS=Y\nif %COMPACTOS%.==Y.     dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\ /Compact\nif not %COMPACTOS%.==Y. dism /Apply-Image /ImageFile:%1 /Index:1 /ApplyDir:W:\\\n@echo  *********************************************************************\n@echo == Copy boot files to the System partition ==\nW:\\Windows\\System32\\bcdboot W:\\Windows /s S:\n@echo  *********************************************************************\n@echo  == Copy the Windows RE image to the Windows RE Tools partition ==\nmd R:\\Recovery\\WindowsRE\nxcopy /h W:\\Windows\\System32\\Recovery\\Winre.wim R:\\Recovery\\WindowsRE\\\n@echo  *********************************************************************\n@echo  == Register the location of the recovery tools ==\nW:\\Windows\\System32\\Reagentc /Setreimage /Path R:\\Recovery\\WindowsRE /Target W:\\Windows\n@echo  *********************************************************************\n@echo == Verify the configuration status of the images. ==\n@echo    Note: Windows RE may appear as Disabled, this is OK.\nW:\\Windows\\System32\\Reagentc /Info /Target W:\\Windows\npause\n@echo  *********************************************************************\n@echo == Hiding the recovery tools partition\nif %Firmware%==0x1 diskpart /s %~dp0HideRecoveryPartitions-BIOS.txt\nif %Firmware%==0x2 diskpart /s %~dp0HideRecoveryPartitions-UEFI.txt\n@echo *********************************************************************\n@echo      All done!\n@echo      Disconnect the USB drive from the reference device.\n@echo      Type   exit   to reboot.\n@echo.\n:END\n```\n\n## <span id=\"start_layout__layoutmodification.xml_\"></span><span id=\"START_LAYOUT__LAYOUTMODIFICATION.XML_\"></span>Start layout (LayoutModification.xml)\n\n\nThe Start tile layout in Windows 10 provides OEMs the ability to append tiles to the default Start layout to include Web links, secondary tiles, Windows apps, and Classic Windows applications. OEMs can use this layout to make it applicable to multiple regions or markets without duplicating a lot of the work. In addition, OEMs can add up to three default apps to the frequently used apps section in the system area, which delivers sytem-driven lists o the user including important or frequently accessed system locations and recently installed apps.\n\nTo take advantage of all these new features and have the most robust and complete Start customization experience for Windows 10, consider creating a LayoutModification.xml file. This file specifies how the OEM tiles should be laid out in Start. For more information about how to customize the new Start layout, see the topic [Customize the Windows 10 Start screen](https://msdn.microsoft.com/library/windows/hardware/mt170651) in the Windows 10 Partner Documentation.\n\nSample **LayoutModification.xml**:\n\n``` syntax\n<LayoutModificationTemplate\n    xmlns=\"http://schemas.microsoft.com/Start/2014/LayoutModification\"\n    xmlns:defaultlayout=\"http://schemas.microsoft.com/Start/2014/FullDefaultLayout\"\n    xmlns:start=\"http://schemas.microsoft.com/Start/2014/StartLayout\"\n    Version=\"1\">\n  <RequiredStartGroupsCollection>\n    <RequiredStartGroups\n      Region=\"DE|ES|FR|GB|IT|US\">\n      <AppendGroup\n        Name=\"Fabrikam Group 1\">\n        <start:Tile\n          AppUserModelID=\"Microsoft.Office.Word_8wekyb3d8bbwe!microsoft.word\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"0\"/>\n        <start:DesktopApplicationTile\n          DesktopApplicationID=\"Microsoft.Windows.Explorer\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"2\"/>\n        <start:Tile\n          AppUserModelID=\"Microsoft.Office.Excel_8wekyb3d8bbwe!microsoft.excel\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"4\"/>\n      </AppendGroup>    \n      <AppendGroup\n        Name=\"Fabrikam Group 2\">\n        <start:Tile\n          AppUserModelID=\"Microsoft.Reader_8wekyb3d8bbwe!Microsoft.Reader\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"0\"/>\n        <start:DesktopApplicationTile\n          DesktopApplicationID=\"http://www.bing.com/\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"2\"/>\n        <start:DesktopApplicationTile\n          DesktopApplicationLinkPath=\"%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Paint.lnk\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"4\"/>\n      </AppendGroup>\n    </RequiredStartGroups>\n    <RequiredStartGroups>\n      <AppendGroup\n        Name=\"Fabrikam Group 1\">\n        <start:Tile\n          AppUserModelID=\"Microsoft.Office.Word_8wekyb3d8bbwe!microsoft.word\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"0\"/>\n        <start:SecondaryTile\n          AppUserModelID=\"Microsoft.Windows.Spartan_cw5n1h2txyewy!Microsoft.Spartan.Spartan\"\n          TileID=\"FabrikamWeblinkTile\"\n          Arguments=\"http://www.fabrikam.com\"\n          DisplayName=\"Fabrikam\"\n          Square150x150LogoUri=\"ms-appx:///Assets/SpartanMedium.png\"\n          ShowNameOnSquare150x150Logo=\"true\"\n          BackgroundColor=\"#FF112233\"\n          Size=\"2x2\"\n          Row=\"0\"\n          Column=\"2\"/>\n      </AppendGroup>    \n    </RequiredStartGroups>\n  </RequiredStartGroupsCollection> \n  <TopMFUApps>\n    <Tile AppUserModelID=\"Microsoft.WindowsCalculator_8wekyb3d8bbwe!App\" />\n  </TopMFUApps>  \n</LayoutModificationTemplate>\n```\n\n**Start layout walkthrough**\n\n1.  If you don’t already have one, create a file called **LayoutModification.xml**.\n2.  If you need to specify whether the append groups must only be applied to specific regions, use the optional **Region** attribute in the **RequiredStartGroups** element. The Region value must be equal to two-letter country/region codes. Use a pipe “|” delimiter if you need to specify multiple countries/regions.\n\n    ``` syntax\n    <RequiredStartGroups\n          Region=\"DE|ES|FR|GB|IT|US\">\n    ```\n\n3.  Specify the tiles you want to add within an **AppendGroup**. OEMs can add a maximum of two **AppendGroup**. The following example shows two groups called “Fabrikam Group 1” and “Fabrikam Group 2”, which contain tiles that will be applied if the device country/region matches what’s specified in **Region** (in this case, the regions are Germany, Spain, France, United Kingdom, Italy, and United States). Each group contains three tiles and the various elements you need to use depending on the tile that you want to pin to Start.\n\n    ``` syntax\n    <RequiredStartGroups\n          Region=\"DE|ES|FR|GB|IT|US\">\n          \n          <!-- OEMs can add a maximum of two AppendGroup. Each AppendGroup specifies a group of\n               tiles that will be appended to Start. -->\n          <AppendGroup\n            Name=\"Fabrikam Group 1\">\n            <!-- Add the News Universal Windows app to Start -->\n            <start:Tile\n              AppUserModelID=\"Microsoft.Office.Word_8wekyb3d8bbwe!microsoft.word\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"0\"/>\n            <!-- Add a Classic Windows application with a known AppUserModelID  -->\n            <start:DesktopApplicationTile\n              DesktopApplicationID=\"Microsoft.Windows.Explorer\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"2\"/>\n            <!-- Add the Excel Preview Universal Windows app -->\n            <start:Tile\n              AppUserModelID=\"Microsoft.Office.Excel_8wekyb3d8bbwe!microsoft.excel\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"4\"/>\n          </AppendGroup>\n          \n          <AppendGroup\n            Name=\"Fabrikam Group 2\">\n            <!-- Add a Windows 8.1 app -->\n            <start:Tile\n              AppUserModelID=\"Microsoft.Reader_8wekyb3d8bbwe!Microsoft.Reader\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"0\"/>\n            <!-- Web link tile with associated .url file is in legacy Start Menu folder. This requires\n                 a shortcut or .url file to be added in one of several legacy Start Menu directories, such as\n                 \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\\" \n                 or the all users profile \"%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\\" -->\n            <start:DesktopApplicationTile\n              DesktopApplicationID=\"http://www.bing.com/\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"2\"/>\n            <!-- Add a Classic Windows application link in a legacy Start Menu folder. You must add the .lnk file \n                 in the specified location when the device first boots. -->\n            <start:DesktopApplicationTile\n              DesktopApplicationLinkPath=\"%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Paint.lnk\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"4\"/>\n          </AppendGroup>\n        </RequiredStartGroups>\n    ```\n\n    The following example shows one group called “Fabrikam Group 1”, which will be applied if the device country/region doesn’t match any of the ones specified in the previous RequiredStartGroups.\n\n    ``` syntax\n        <!-- Non-region specific group -->\n        <RequiredStartGroups>\n          <AppendGroup\n            Name=\"Fabrikam Group 1\">\n            <!-- Add the Word Preview Universal Windows app -->\n            <start:Tile\n              AppUserModelID=\"Microsoft.Office.Word_8wekyb3d8bbwe!microsoft.word\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"0\"/>\n            <!-- Add the Excel Preview Universal Windows app -->\n            <start:Tile\n              AppUserModelID=\"Microsoft.Office.Excel_8wekyb3d8bbwe!microsoft.excel\"\n              Size=\"2x2\"\n              Row=\"0\"\n              Column=\"2\"/>\n          </AppendGroup>    \n        </RequiredStartGroups>\n    ```\n\n    Keep the following in mind when creating your LayoutModification.xml file:\n\n    -   If you are pinning a Classic Windows applications using the **start:DesktopApplicationTile** tag and you don’t know the application’s application user model ID, you need to create a .lnk file in a legacy Start Menu directory before first boot.\n    -   If you use the **start:DesktopApplicationTile** tag to pin a legacy .url shortcut to Start, you must create a .url file and add this file to a legacy Start Menu directory before first boot.\n\n    For the above scenarios, you can use the following directories to put the .url or .lnk files:\n\n    -   %APPDATA%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\\n    -   %ALLUSERSPROFILE%\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\\n\n4.  Optionally, you can add up to 3 apps to the frequently used section of the system area. The following example shows how to add the calculator app to the frequently used system area.\n\n    ``` syntax\n      <!-- Add the calculator app to the frequently used system area -->\n      <TopMFUApps>\n        <Tile AppUserModelID=\"Microsoft.WindowsCalculator_8wekyb3d8bbwe!App\" />\n      </TopMFUApps>\n    ```\n\n5.  Save the LayoutModification.xml file.\n\n    Once you’ve created the LayoutModification.xml file, you’ll need to place this file in the correct system location using either Windows ICD or classic-style deployment. For more information on how to do this, see:\n\n    -   Windows ICD - Lab 1, Step 7: Customize the Start layout\n    -   Classic-style deployment - Lab 2a, Step 5: Add the files you need to modify the Start layout\n\n    If you don’t create a LayoutModification.xml file and you continue to use the Start Unattend settings, the OS will use the Unattend answer file and take the first 12 SquareTiles or DesktoporSquareTiles settings specified in the Unattend file. The system then places these tiles automatically within the newly-created groups at the end of Start—the first six tiles are placed in the first OEM group and the second set of six tiles are placed in the second OEM group. If OEMName is specified in the Unattend file, the value for this element is used to name the OEM groups that will be created.\n\n## <span id=\"microphone_settings__speechsetting.cmd_\"></span><span id=\"MICROPHONE_SETTINGS__SPEECHSETTING.CMD_\"></span>Microphone settings (SpeechSetting.cmd)\n\n\nUse this script to tune your device’s microphone to help maximize speech accuracy for features like Cortana. To learn how to test for the appropriate values for your device, see [Cortana Device Test Setup](https://msdn.microsoft.com/library/windows/hardware/dn957009) in the Hardware WEG.\n\n**SpeechSetting.cmd**:\n\n``` syntax\n@echo off\n@echo.\n@echo This script will set the Device.SpeechRecognition.DefaultMicGain values.\n@echo.\n \nsetlocal\nsetlocal ENABLEDELAYEDEXPANSION\n \nif \"%1\"==\"\" goto :InputPrompt\n call :tohex %1\n@echo %_DECVAL% == 0x%_HEXVAL%\nset /a Percentage=%_DECVAL%/100\n \nset RegPath=HKLM\\Software\\Microsoft\\Speech_OneCore\\AudioInput\\MicWiz\nset RegKey=DefaultDefaultMicGain\nset RegValue=0x%_HEXVAL%\n \n@echo reg add %RegPath% /v %RegKey% /t REG_DWORD /d %RegValue% /f\nreg add %RegPath% /v %RegKey% /t REG_DWORD /d %RegValue% /f\nif %errorlevel% NEQ 0 echo Reg Add function failed. && goto :Error\n@echo.\n@echo Successfully set the MicGain value to %Percentage% percent.\n@echo.\ngoto :end\n \n:ToHex\n     set _DECVAL=%1\n     set _HEXVAL=\n     set _VAL=%1\n     if %1 LSS 0 (\n         REM break the number into two parts so that we can output the\n         REM full value within the bounds of a 32 bit signed value\n         set /A _offset=\"-(-2147483647 - !_VAL!) + 2\"\n         set /A _VAL=\"!_offset! / 16 + 0x7FFFFFF\"\n         set /A _P=\"!_offset! %% 16 + 0xF\"\n \n         if !_P! GEQ 16 (\n         set /A _VAL=\"!_VAL! + 1\"\n         set /A _P=\"!_P! %% 16\"\n         )\n         if !_P! LEQ 9 set _HEXVAL=!_P!!_HEXVAL!\n         if \"!_P!\" == \"10\" set _HEXVAL=A!_HEXVAL!\n         if \"!_P!\" == \"11\" set _HEXVAL=B!_HEXVAL!\n         if \"!_P!\" == \"12\" set _HEXVAL=C!_HEXVAL!\n         if \"!_P!\" == \"13\" set _HEXVAL=D!_HEXVAL!\n         if \"!_P!\" == \"14\" set _HEXVAL=E!_HEXVAL!\n         if \"!_P!\" == \"15\" set _HEXVAL=F!_HEXVAL!\n     )\n \n     :hexloop\n     set /A _P=\"%_VAL% %% 16\"\n     if %_P% LEQ 9 set _HEXVAL=%_P%%_HEXVAL%\n     if \"%_P%\" == \"10\" set _HEXVAL=A%_HEXVAL%\n     if \"%_P%\" == \"11\" set _HEXVAL=B%_HEXVAL%\n     if \"%_P%\" == \"12\" set _HEXVAL=C%_HEXVAL%\n     if \"%_P%\" == \"13\" set _HEXVAL=D%_HEXVAL%\n     if \"%_P%\" == \"14\" set _HEXVAL=E%_HEXVAL%\n     if \"%_P%\" == \"15\" set _HEXVAL=F%_HEXVAL%\n     set /A _VAL=\"%_VAL% / 16\"\n     if \"%_VAL%\" == \"0\" goto :endloop\n     goto :hexloop\n \n:InputPrompt\n      @echo.\n      @echo Incorrect Usage.\n      @echo.\n      @echo Please input a decimal value as a parameter.\n      @echo.\n      @echo Example:\n      @echo SpeechSetting.cmd 4200\n      @echo.\n      @echo This example sets the MicGain as 42 percent which is 0x1068.\n      @echo.\ngoto :end\n \n:Error\n@echo.\n@echo Error occurred.\n@echo.\ngoto :end\n \n:endloop\n     set _offset=\n     set _P=\n     set _VAL=\ngoto :eof\n \n:end \n```\n\n## <span id=\"Remove_Windows_apps\"></span><span id=\"remove_windows_apps\"></span><span id=\"REMOVE_WINDOWS_APPS\"></span>Remove Windows apps\n\n\nWhen you add language packs to an image, you’ll need to remove and reinstall each of your Windows apps to make sure they include the language assets.\n\nHere's two scripts, one which can be used to remove the apps from an offline image, and another that can be used in audit mode to remove apps from a running image:\n\n**Remove\\_apps\\_in\\_offline\\_image.cmd:**\n\nThis script assumes the file name is install.wim, that the script is being run from the same folder as install.wim, that the index being modified is \\#1, and that there are no other Windows images in other index locations (\\#2, \\#3) that need to be preserved.\n\n``` syntax\n@echo off\n@rem Run this script from the same folder that includes install.wim \ncls\nmd mount\ndism /mount-image /mountdir:mount /imagefile:install.wim /index:1\nif exist appx.txt del appx.txt\nif exist applist.txt del applist.txt\nif exist appremove.cmd del appremove.cmd\ndism /image:mount /get-provisionedappxpackages > appx.txt\nfindstr /c:\"PackageName\" appx.txt > applist.txt\nsetlocal enabledelayedexpansion\nset INTEXTFILE=applist.txt\nset OUTTEXTFILE=appremove.cmd\nset SEARCHTEXT=PackageName : \nset REPLACETEXT=dism /image:mount /remove-provisionedappxpackage /packagename:\nset OUTPUTLINE=\n\nfor /f \"tokens=1,* delims=¶\" %%A in ( '\"type %INTEXTFILE%\"') do (\nSET string=%%A\nSET modified=!string:%SEARCHTEXT%=%REPLACETEXT%!\n\necho !modified! >> %OUTTEXTFILE%\n)\ndel appx.txt\ndel applist.txt\ncall appremove.cmd\ndism /unmount-image /mountdir:mount /commit\necho \"Check to make sure operations completed successfully. If not, press Ctrl+C.\"\npause\nren install.wim install-temp.wim\ndism /export-image /sourceimagefile:install-temp.wim /sourceindex:1 /destinationimagefile:install.wim\ndel install-temp.wim\n```\n\n**Remove\\_apps\\_in\\_audit\\_mode.cmd**\n\nThis script assumes you’re running in audit mode on the reference PC.\n\n``` syntax\n@echo off\n@rem Use MOUNT folder in folder where script is run \ncls\ndism /mount-image /mountdir:mount /imagefile:install.wim /index:1\nif exist appx.txt del appx.txt\nif exist applist.txt del applist.txt\nif exist appremove.cmd del appremove.cmd\ndism /image:mount /get-provisionedappxpackages > appx.txt\nfindstr /c:\"PackageName\" appx.txt > applist.txt\nsetlocal enabledelayedexpansion\nset INTEXTFILE=applist.txt\nset OUTTEXTFILE=appremove.cmd\nset SEARCHTEXT=PackageName : \nset REPLACETEXT=dism /image:mount /remove-provisionedappxpackage /packagename:\nset OUTPUTLINE=\n\nfor /f \"tokens=1,* delims=¶\" %%A in ( '\"type %INTEXTFILE%\"') do (\nSET string=%%A\nSET modified=!string:%SEARCHTEXT%=%REPLACETEXT%!\n\necho !modified! >> %OUTTEXTFILE%\n)\ndel appx.txt\ndel applist.txt\ncall appremove.cmd\ndism /unmount-image /mountdir:mount /commit\nren install.wim install-temp.wim\ndism /export-image /sourceimagefile:install-temp.wim /sourceindex:1 /destinationimagefile:install.wim\ndel install-temp.wim\n```\n\n## <span id=\"BootToAudit\"></span><span id=\"boottoaudit\"></span><span id=\"BOOTTOAUDIT\"></span>BootToAudit\n\n\nAdd an answer file to the Windows image in C:\\\\mount\\\\windows\\\\Windows\\\\Panther\\\\unattend.xml to instruct it to boot into audit mode. You can create this answer file in Windows System Image Manager.\n\n**BootToAudit-x64:**\n\n``` syntax\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n<!-- BootToAudit-x64.xml -->\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <Reseal>\n                <Mode>Audit</Mode>\n            </Reseal>\n        </component>\n    </settings>\n</unattend>\n```\n\n**BootToAudit-x86:**\n\n``` syntax\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n<!-- BootToAudit-x86.xml -->\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-Deployment\" processorArchitecture=\"x86\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <Reseal>\n                <Mode>Audit</Mode>\n            </Reseal>\n        </component>\n    </settings>\n</unattend>\n```\n\n## <span id=\"Keeping_Windows_settings_through_a_recovery\"></span><span id=\"keeping_windows_settings_through_a_recovery\"></span><span id=\"KEEPING_WINDOWS_SETTINGS_THROUGH_A_RECOVERY\"></span>Keeping Windows settings through a recovery\n\n\nWindows doesn't automatically save settings created through unattend.xml setup files, nor Windows Start Menu customizations created with LayoutModification.xml during a full-system reset, nor first-login info from oobe.xml.\n\nTo make sure your customizations are saved, that includes steps to put the unattend.xml, LayoutModification.xml, and oobe.xml files back into place. Here's some sample scripts that show how to retain these settings and put them back into the right spots. Save copies of unattend.xml, LayoutModification.xml, oobe.xml, plus these two text files, in C:\\\\Recovery\\\\OEM\\\\:\n\n**ResetConfig.xml**\n\n``` syntax\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- ResetConfig.xml -->\n<Reset>\n  <Run Phase=\"BasicReset_AfterImageApply\">\n    <Path>EnableCustomizationsAfterRecovery.cmd</Path>\n    <Duration>2</Duration>\n  </Run>\n  <Run Phase=\"FactoryReset_AfterImageApply\">\n    <Path>EnableCustomizationsAfterRecovery.cmd</Path>\n    <Duration>2</Duration>\n  </Run>\n</Reset>\n```\n\n**EnableCustomizationsAfterRecovery.cmd**\n\n``` syntax\nrem EnableCustomizationsAfterRecovery.cmd\n\nrem Set the variable %TARGETOS%      (Typically this is C:\\Windows)\nfor /F \"tokens=1,2,3 delims= \" %%A in ('reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\RecoveryEnvironment\" /v TargetOS') DO SET TARGETOS=%%C\n\nrem Set the variable %TARGETOSDRIVE% (Typically this is C:)\nfor /F \"tokens=1 delims=\\\" %%A in ('Echo %TARGETOS%') DO SET TARGETOSDRIVE=%%A\n\nrem Add back Windows settings, Start menu, and OOBE.xml customizations\ncopy \"%TARGETOSDRIVE%\\Recovery\\OEM\\Unattend.xml\" \"%TARGETOS%\\Panther\\Unattend.xml\" /y\ncopy \"%TARGETOSDRIVE%\\Recovery\\OEM\\LayoutModification.xml\" \"%TARGETOSDRIVE%\\Users\\Default\\AppData\\Local\\Microsoft\\Windows\\Shell\\LayoutModification.xml\" /y\nxcopy \"%TARGETOSDRIVE%\\Recovery\\OEM\\OOBE\\Info\" \"%TARGETOS%\\System32\\Info\\\" /s\n\nrem Recommended: Create a pagefile for devices with 1GB or less of RAM.\nwpeutil CreatePageFile /path=%TARGETOSDRIVE%\\PageFile.sys /size=256\n\n\nrem EnableCustomizationsAfterRecovery.cmd\nset ScriptFolder=%~dp0\n\nfor /f \"skip=2 tokens=2,*\" %%a in ('reg.exe query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\RecoveryEnvironment\" /v \"TargetOS\"') do set \"TargetOS=%%b\"\necho TargetOS: %TargetOS% >> %LogFile%\nfor %%A in (%TargetOS%) do set \"TargetOSDrive=%%~dpA\"\n\ncopy \"%ScriptFolder%\\Unattend.xml\" \"%TargetOSDrive%\\Windows\\Panther\\Unattend.xml\" /y\ncopy \"%ScriptFolder%\\LayoutModification.xml\" \"%TargetOSDrive%\\Users\\Default\\AppData\\Local\\Microsoft\\Windows\\Shell\\LayoutModification.xml\" /y\ncopy \"%ScriptFolder%\\oobe.xml\" \"%TargetOSDrive%\\System32\\Info\\Oobe.xml\" /y\n```\n\nFor multilingual deployments, OOBE.xml uses a more complicated folder structure. It's OK to just copy the entire folder structure into C:\\\\Recovery\\\\OEM, and then modify the script to copy the entire folder:\n\n``` syntax\nxcopy \"%ScriptFolder%\\Info\\\" \"%TargetOSDrive%\\System32\\Info\\\" /s\n```\n\nTo learn more about using extensibility points for push-button reset, see [Add a script to push-button reset features](http://go.microsoft.com/fwlink/?LinkId=618946).\n\n \n\n \n\n\n\n\n\n"}