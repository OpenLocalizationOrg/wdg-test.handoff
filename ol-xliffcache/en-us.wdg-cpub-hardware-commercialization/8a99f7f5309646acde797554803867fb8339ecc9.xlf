<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\optimizing-windows-devices-for-multimedia-experiences-exercise-3.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">8a99f7f5309646acde797554803867fb8339ecc9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback</source>
          <target>Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.</source>
          <target>Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback</source>
          <target>Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.</source>
          <target>Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This exercise uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Media eXperience Analyzer (MXA)</pc> tool to determine whether or not audio was offloaded to hardware during full screen video playback.</source>
          <target>This exercise uses the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Media eXperience Analyzer (MXA)</pc> tool to determine whether or not audio was offloaded to hardware during full screen video playback.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Step 1: Load an ETW trace that was captured during full screen video playback</source>
          <target>Step 1: Load an ETW trace that was captured during full screen video playback</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](https://go.microsoft.com/fwlink/?linkid=525711)</data>
        </originalData>
        <segment state="initial">
          <source>Install <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MXA</pc> which can be downloaded <pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</source>
          <target>Install <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MXA</pc> which can be downloaded <pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu and click on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Command Prompt (Admin)</pc>.</source>
          <target>Right-click on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc> menu and click on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Command Prompt (Admin)</pc>.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to the folder where you installed <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MXA</pc>.</source>
          <target>Navigate to the folder where you installed <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MXA</pc>.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://download.microsoft.com/download/A/5/D/A5D6F588-EE12-4FBA-B54C-E6D1E554F19C/AudioNotOffloaded.etl)</data>
        </originalData>
        <segment state="initial">
          <source>Download <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioNotOffloaded.etl</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</source>
          <target>Download <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioNotOffloaded.etl</pc><pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Run the following command:</source>
          <target>Run the following command:</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you downloaded <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioNotOffloaded.etl</pc> to C:<ph dataRef="id3" id="ph1" />Performance<ph dataRef="id4" id="ph2" />Media<ph dataRef="id5" id="ph3" />, you would type the following command:</source>
          <target>For example, if you downloaded <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioNotOffloaded.etl</pc> to C:<ph dataRef="id3" id="ph1" />Performance<ph dataRef="id4" id="ph2" />Media<ph dataRef="id5" id="ph3" />, you would type the following command:</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn Symbols Off</pc> button to turn off symbol lookup.</source>
          <target>Press the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn Symbols Off</pc> button to turn off symbol lookup.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Step 2: Verify audio was rendered when the ETW trace was collected</source>
          <target>Step 2: Verify audio was rendered when the ETW trace was collected</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Once the trace loads, drag and drop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider into a panel.</source>
          <target>Once the trace loads, drag and drop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider into a panel.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Deselect all events in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider by clicking the checkbox next to this dataset two times.</source>
          <target>Deselect all events in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider by clicking the checkbox next to this dataset two times.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>Enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Audio<ph dataRef="id3" id="ph1" />Render – 482 events</pc>.</source>
          <target>Enable the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Task Audio<ph dataRef="id3" id="ph1" />Render – 482 events</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>If your audio render events are fired throughout the trace, audio was playing when the trace was collected.</source>
          <target>If your audio render events are fired throughout the trace, audio was playing when the trace was collected.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>As we can see in the screenshot above, audio render events in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Audio<ph dataRef="id5" id="ph1" />Render – 482</pc>) are logged throughout the entire trace.</source>
          <target>As we can see in the screenshot above, audio render events in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft-Windows-MediaFoundation-Performance</pc> provider (<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Task Audio<ph dataRef="id5" id="ph1" />Render – 482</pc>) are logged throughout the entire trace.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>This verifies that audio was playing back.</source>
          <target>This verifies that audio was playing back.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Step 3: Determine whether audio was offloaded to hardware</source>
          <target>Step 3: Determine whether audio was offloaded to hardware</target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Drag and drop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset into a panel.</source>
          <target>Drag and drop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset into a panel.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Deselect all events by clicking on the checkbox at the root of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset twice.</source>
          <target>Deselect all events by clicking on the checkbox at the root of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset twice.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows System Processes</pc> node.</source>
          <target>Expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Scheduler</pc> dataset and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows System Processes</pc> node.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> process by clicking the checkbox once.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> process by clicking the checkbox once.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If there is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> thread activity occurring every 10 ms throughout the entire playback session, then audio is not being offloaded.</source>
          <target>If there is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> thread activity occurring every 10 ms throughout the entire playback session, then audio is not being offloaded.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">\#</data>
        </originalData>
        <segment state="initial">
          <source>For an example, see MXA Screenshot <ph dataRef="id1" id="ph1" />1.</source>
          <target>For an example, see MXA Screenshot <ph dataRef="id1" id="ph1" />1.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If there is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> thread activity only during start-up and shutdown, then audio is being offloaded.</source>
          <target>If there is <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> thread activity only during start-up and shutdown, then audio is being offloaded.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">\#</data>
        </originalData>
        <segment state="initial">
          <source>For an example, see MXA Screenshot <ph dataRef="id1" id="ph1" />2.</source>
          <target>For an example, see MXA Screenshot <ph dataRef="id1" id="ph1" />2.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://download.microsoft.com/download/7/A/9/7A9935AE-DD3C-4714-9457-FF86BD5A6F05/AudioOffloaded.etl)</data>
        </originalData>
        <segment state="initial">
          <source>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioOffloaded.etl</pc> trace file <pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</source>
          <target>Download the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioOffloaded.etl</pc> trace file <pc dataRefEnd="id4" dataRefStart="id3" id="p2">here</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Repeat steps 1, 2, and 3 using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioOffloaded.etl</pc> trace instead of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioNotOffloaded.etl</pc>.</source>
          <target>Repeat steps 1, 2, and 3 using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AudioOffloaded.etl</pc> trace instead of <pc dataRefEnd="id4" dataRefStart="id3" id="p2">AudioNotOffloaded.etl</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">\#</data>
        </originalData>
        <segment state="initial">
          <source>MXA Screenshot <ph dataRef="id1" id="ph1" />1: Trace taken on a system where audio is NOT being offloaded</source>
          <target>MXA Screenshot <ph dataRef="id1" id="ph1" />1: Trace taken on a system where audio is NOT being offloaded</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Notice that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> is waking up every 10ms to process audio samples throughout the entire trace.</source>
          <target>Notice that the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> is waking up every 10ms to process audio samples throughout the entire trace.</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">\#</data>
        </originalData>
        <segment state="initial">
          <source>MXA Screenshot <ph dataRef="id1" id="ph1" />2: Trace taken on a system where audio is being offloaded</source>
          <target>MXA Screenshot <ph dataRef="id1" id="ph1" />2: Trace taken on a system where audio is being offloaded</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Notice the very low thread activity in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> process exists at start-up and shutdown phases of playback.</source>
          <target>Notice the very low thread activity in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">audiodg.exe</pc> process exists at start-up and shutdown phases of playback.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Notice also that there is no thread activity during steady state.</source>
          <target>Notice also that there is no thread activity during steady state.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>