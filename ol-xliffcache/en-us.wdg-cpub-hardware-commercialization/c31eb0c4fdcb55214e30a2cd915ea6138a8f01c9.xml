{"nodes":[{"content":"WlanMTEStartSelfTest","pos":[34,54]},{"content":"WlanMTEStartSelfTest","pos":[161,181]},{"content":"WlanMTEStartSelfTest","pos":[189,209]},{"content":"Starts a preconfigured set of self-tests.","pos":[212,253]},{"pos":[333,339],"content":"Syntax"},{"pos":[1032,1042],"content":"Parameters"},{"content":"hAdapter","pos":[1127,1135]},{"content":"in<ph id=\"ph1\">\\]</ph> The handle to the Wi-Fi adapter, obtained by calling <bpt id=\"p1\">[</bpt>WlanMTEOpenHandle<ept id=\"p1\">](wlanmteopenhandle.md)</ept>.","pos":[1141,1241]},{"content":"eTestType","pos":[1328,1337]},{"content":"in<ph id=\"ph1\">\\]</ph> The type of self-test requested.","pos":[1343,1380]},{"content":"The values of <bpt id=\"p1\">*</bpt>eTestType<ept id=\"p1\">*</ept> are defined by the DOT11<ph id=\"ph1\">\\_</ph>MANUFACTURING<ph id=\"ph2\">\\_</ph>SELF<ph id=\"ph3\">\\_</ph>TEST<ph id=\"ph4\">\\_</ph>TYPE enumeration, shown below:","pos":[1381,1490]},{"content":"uTestID","pos":[1891,1898]},{"content":"in<ph id=\"ph1\">\\]</ph> The ID for the self-test requested.","pos":[1904,1944]},{"content":"pvContext","pos":[2031,2040]},{"content":"in<ph id=\"ph1\">\\]</ph> The context that uniquely identifies this request in the callback and in the subsequent results query.","pos":[2046,2153]},{"content":"uPinBitMask","pos":[2246,2257]},{"content":"in<ph id=\"ph1\">\\]</ph> The bit mask for adapter pins to be tested.","pos":[2263,2311]},{"content":"uInBufLen","pos":[2398,2407]},{"content":"in<ph id=\"ph1\">\\]</ph> The length of the buffer for passing in any additional information about the self-test.","pos":[2413,2505]},{"content":"pucInBuffer","pos":[2598,2609]},{"content":"in<ph id=\"ph1\">\\]</ph> The buffer that will contain additional information about the self-test.","pos":[2615,2692]},{"pos":[2775,2782],"content":"Remarks"},{"pos":[2785,3039],"content":"On completion of the self-test, the application’s callback handler is called, if one was registered, with the <bpt id=\"p1\">**</bpt>dot11ManufacturingCallbackType<ept id=\"p1\">**</ept> set to <bpt id=\"p2\">**</bpt>dot11<ph id=\"ph1\">\\_</ph>manufacturing<ph id=\"ph2\">\\_</ph>callback<ph id=\"ph3\">\\_</ph>self<ph id=\"ph4\">\\_</ph>test<ph id=\"ph5\">\\_</ph>complete<ept id=\"p2\">**</ept>, and the result of the self-test is included."},{"pos":[3137,3149],"content":"Return Value"},{"content":"If the function succeeds, the return value is ERROR<ph id=\"ph1\">\\_</ph>SUCCESS.","pos":[3152,3213]},{"content":"If the function fails, the return value is one of the system error codes.","pos":[3215,3288]},{"content":"The following table lists the error codes that may be returned.","pos":[3289,3352]},{"content":"Error code","pos":[3470,3480]},{"content":"Description","pos":[3503,3514]},{"content":"ERROR_INVALID_PARAMETER","pos":[3580,3603]},{"content":"Returned when the <ph id=\"ph1\">&lt;em&gt;</ph>uInBufLen<ph id=\"ph2\">&lt;/em&gt;</ph> parameter is present but the <ph id=\"ph3\">&lt;em&gt;</ph>pucInBuffer<ph id=\"ph4\">&lt;/em&gt;</ph> parameter is NULL.","pos":[3633,3738]},{"content":"ERROR_INVALID_HANDLE","pos":[3792,3812]},{"content":"Returned if the adapter handle specified by the <ph id=\"ph1\">&lt;em&gt;</ph>hAdapter<ph id=\"ph2\">&lt;/em&gt;</ph> parameter is invalid.","pos":[3842,3929]},{"content":"ERROR_OUTOFMEMORY","pos":[3982,3999]},{"content":"Returned when sufficient memory to perform the operation cannot be allocated.","pos":[4029,4106]},{"pos":[4240,4252],"content":"Requirements"},{"pos":[4255,4276],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> wifimte.w"},{"pos":[4314,4328],"content":"Related topics"},{"content":"Wi-Fi manufacturing API","pos":[4332,4355]}],"content":"---\nauthor: kpacquer\nDescription: WlanMTEStartSelfTest\nms.assetid: 6c583601-3d26-4a4a-b225-11c2b54ea59b\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: WlanMTEStartSelfTest\n---\n\n# WlanMTEStartSelfTest\n\n\nStarts a preconfigured set of self-tests.\n\n## <span id=\"Syntax\"></span><span id=\"syntax\"></span><span id=\"SYNTAX\"></span>Syntax\n\n\n``` syntax\nDWORD WlanMTEStartSelfTest(\n    __in                        HANDLE                              hAdapter,\n    __in                        DOT11_MANUFACTURING_SELF_TEST_TYPE  eTestType,\n    __in                        ULONG                               uTestID,\n    __in                        PVOID                               pvContext,\n    __in                        ULONG                               uPinBitMask,\n    __in                        ULONG                               uInBufLen,\n    __in_bcount_opt(uInBufLen)  PUCHAR                              pucInBuffer\n);\n```\n\n## <span id=\"Parameters\"></span><span id=\"parameters\"></span><span id=\"PARAMETERS\"></span>Parameters\n\n\n<span id=\"hAdapter\"></span><span id=\"hadapter\"></span><span id=\"HADAPTER\"></span>*hAdapter*  \n\\[in\\] The handle to the Wi-Fi adapter, obtained by calling [WlanMTEOpenHandle](wlanmteopenhandle.md).\n\n<span id=\"eTestType\"></span><span id=\"etesttype\"></span><span id=\"ETESTTYPE\"></span>*eTestType*  \n\\[in\\] The type of self-test requested. The values of *eTestType* are defined by the DOT11\\_MANUFACTURING\\_SELF\\_TEST\\_TYPE enumeration, shown below:\n\n``` syntax\ntypedef enum DOT11_MANUFACTURING_SELF_TEST_TYPE {\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = 1,\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE,\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE\n    } DOT11_MANUFACTURING_SELF_TEST_TYPE, * PDOT11_MANUFACTURING_SELF_TEST_TYPE;\n```\n\n<span id=\"uTestID\"></span><span id=\"utestid\"></span><span id=\"UTESTID\"></span>*uTestID*  \n\\[in\\] The ID for the self-test requested.\n\n<span id=\"pvContext\"></span><span id=\"pvcontext\"></span><span id=\"PVCONTEXT\"></span>*pvContext*  \n\\[in\\] The context that uniquely identifies this request in the callback and in the subsequent results query.\n\n<span id=\"uPinBitMask\"></span><span id=\"upinbitmask\"></span><span id=\"UPINBITMASK\"></span>*uPinBitMask*  \n\\[in\\] The bit mask for adapter pins to be tested.\n\n<span id=\"uInBufLen\"></span><span id=\"uinbuflen\"></span><span id=\"UINBUFLEN\"></span>*uInBufLen*  \n\\[in\\] The length of the buffer for passing in any additional information about the self-test.\n\n<span id=\"pucInBuffer\"></span><span id=\"pucinbuffer\"></span><span id=\"PUCINBUFFER\"></span>*pucInBuffer*  \n\\[in\\] The buffer that will contain additional information about the self-test.\n\n## <span id=\"Remarks\"></span><span id=\"remarks\"></span><span id=\"REMARKS\"></span>Remarks\n\n\nOn completion of the self-test, the application’s callback handler is called, if one was registered, with the **dot11ManufacturingCallbackType** set to **dot11\\_manufacturing\\_callback\\_self\\_test\\_complete**, and the result of the self-test is included.\n\n## <span id=\"Return_Value\"></span><span id=\"return_value\"></span><span id=\"RETURN_VALUE\"></span>Return Value\n\n\nIf the function succeeds, the return value is ERROR\\_SUCCESS.\n\nIf the function fails, the return value is one of the system error codes. The following table lists the error codes that may be returned.\n\n<table>\n<colgroup>\n<col width=\"50%\" />\n<col width=\"50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">Error code</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>ERROR_INVALID_PARAMETER</p></td>\n<td align=\"left\"><p>Returned when the <em>uInBufLen</em> parameter is present but the <em>pucInBuffer</em> parameter is NULL.</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>ERROR_INVALID_HANDLE</p></td>\n<td align=\"left\"><p>Returned if the adapter handle specified by the <em>hAdapter</em> parameter is invalid.</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>ERROR_OUTOFMEMORY</p></td>\n<td align=\"left\"><p>Returned when sufficient memory to perform the operation cannot be allocated.</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n## <span id=\"Requirements\"></span><span id=\"requirements\"></span><span id=\"REQUIREMENTS\"></span>Requirements\n\n\n**Header:** wifimte.w\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Wi-Fi manufacturing API](wi-fi-manufacturing-api.md)\n\n \n\n \n\n\n\n\n\n\n"}