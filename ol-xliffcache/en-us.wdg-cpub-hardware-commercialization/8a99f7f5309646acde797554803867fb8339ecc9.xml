{"nodes":[{"content":"Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback","pos":[11,99]},{"content":"Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.","pos":[113,301]},{"content":"Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback","pos":[437,525]},{"content":"Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.","pos":[528,716]},{"content":"This exercise uses the <bpt id=\"p1\">**</bpt>Media eXperience Analyzer (MXA)<ept id=\"p1\">**</ept> tool to determine whether or not audio was offloaded to hardware during full screen video playback.","pos":[717,875]},{"content":"Step 1: Load an ETW trace that was captured during full screen video playback","pos":[880,957]},{"pos":[964,1059],"content":"Install <bpt id=\"p1\">**</bpt>MXA<ept id=\"p1\">**</ept> which can be downloaded <bpt id=\"p2\">[</bpt>here<ept id=\"p2\">](https://go.microsoft.com/fwlink/?linkid=525711)</ept>."},{"pos":[1065,1139],"content":"Right-click on the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> menu and click on <bpt id=\"p2\">**</bpt>Command Prompt (Admin)<ept id=\"p2\">**</ept>."},{"pos":[1145,1196],"content":"Navigate to the folder where you installed <bpt id=\"p1\">**</bpt>MXA<ept id=\"p1\">**</ept>."},{"pos":[1202,1349],"content":"Download <bpt id=\"p1\">**</bpt>AudioNotOffloaded.etl<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>here<ept id=\"p2\">](http://download.microsoft.com/download/A/5/D/A5D6F588-EE12-4FBA-B54C-E6D1E554F19C/AudioNotOffloaded.etl)</ept>."},{"content":"Run the following command:","pos":[1355,1381]},{"pos":[1476,1599],"content":"For example, if you downloaded <bpt id=\"p1\">**</bpt>AudioNotOffloaded.etl<ept id=\"p1\">**</ept> to C:<ph id=\"ph1\">\\\\</ph>Performance<ph id=\"ph2\">\\\\</ph>Media<ph id=\"ph3\">\\\\</ph>, you would type the following command:"},{"pos":[1695,1759],"content":"Press the <bpt id=\"p1\">**</bpt>Turn Symbols Off<ept id=\"p1\">**</ept> button to turn off symbol lookup."},{"content":"Step 2: Verify audio was rendered when the ETW trace was collected","pos":[1764,1830]},{"pos":[1837,1949],"content":"Once the trace loads, drag and drop the <bpt id=\"p1\">**</bpt>Microsoft-Windows-MediaFoundation-Performance<ept id=\"p1\">**</ept> provider into a panel."},{"pos":[1955,2097],"content":"Deselect all events in the <bpt id=\"p1\">**</bpt>Microsoft-Windows-MediaFoundation-Performance<ept id=\"p1\">**</ept> provider by clicking the checkbox next to this dataset two times."},{"pos":[2103,2150],"content":"Enable the <bpt id=\"p1\">**</bpt>Task Audio<ph id=\"ph1\">\\_</ph>Render – 482 events<ept id=\"p1\">**</ept>."},{"content":"If your audio render events are fired throughout the trace, audio was playing when the trace was collected.","pos":[2156,2263]},{"content":"As we can see in the screenshot above, audio render events in the <bpt id=\"p1\">**</bpt>Microsoft-Windows-MediaFoundation-Performance<ept id=\"p1\">**</ept> provider (<bpt id=\"p2\">**</bpt>Task Audio<ph id=\"ph1\">\\_</ph>Render – 482<ept id=\"p2\">**</ept>) are logged throughout the entire trace.","pos":[2311,2506]},{"content":"This verifies that audio was playing back.","pos":[2507,2549]},{"content":"Step 3: Determine whether audio was offloaded to hardware","pos":[2554,2611]},{"pos":[2618,2675],"content":"Drag and drop the <bpt id=\"p1\">**</bpt>CPU Scheduler<ept id=\"p1\">**</ept> dataset into a panel."},{"pos":[2681,2780],"content":"Deselect all events by clicking on the checkbox at the root of the <bpt id=\"p1\">**</bpt>CPU Scheduler<ept id=\"p1\">**</ept> dataset twice."},{"pos":[2786,2861],"content":"Expand the <bpt id=\"p1\">**</bpt>CPU Scheduler<ept id=\"p1\">**</ept> dataset and <bpt id=\"p2\">**</bpt>Windows System Processes<ept id=\"p2\">**</ept> node."},{"pos":[2867,2932],"content":"Select the <bpt id=\"p1\">**</bpt>audiodg.exe<ept id=\"p1\">**</ept> process by clicking the checkbox once."},{"content":"If there is <bpt id=\"p1\">**</bpt>audiodg.exe<ept id=\"p1\">**</ept> thread activity occurring every 10 ms throughout the entire playback session, then audio is not being offloaded.","pos":[2938,3078]},{"content":"For an example, see MXA Screenshot <ph id=\"ph1\">\\#</ph>1.","pos":[3079,3118]},{"content":"If there is <bpt id=\"p1\">**</bpt>audiodg.exe<ept id=\"p1\">**</ept> thread activity only during start-up and shutdown, then audio is being offloaded.","pos":[3124,3233]},{"content":"For an example, see MXA Screenshot <ph id=\"ph1\">\\#</ph>2.","pos":[3234,3273]},{"pos":[3279,3435],"content":"Download the <bpt id=\"p1\">**</bpt>AudioOffloaded.etl<ept id=\"p1\">**</ept> trace file <bpt id=\"p2\">[</bpt>here<ept id=\"p2\">](http://download.microsoft.com/download/7/A/9/7A9935AE-DD3C-4714-9457-FF86BD5A6F05/AudioOffloaded.etl)</ept>."},{"pos":[3441,3542],"content":"Repeat steps 1, 2, and 3 using the <bpt id=\"p1\">**</bpt>AudioOffloaded.etl<ept id=\"p1\">**</ept> trace instead of <bpt id=\"p2\">**</bpt>AudioNotOffloaded.etl<ept id=\"p2\">**</ept>."},{"pos":[3646,3724],"content":"MXA Screenshot <ph id=\"ph1\">\\#</ph>1: Trace taken on a system where audio is NOT being offloaded"},{"pos":[3726,3835],"content":"Notice that the <bpt id=\"p1\">**</bpt>audiodg.exe<ept id=\"p1\">**</ept> is waking up every 10ms to process audio samples throughout the entire trace."},{"pos":[3981,4055],"content":"MXA Screenshot <ph id=\"ph1\">\\#</ph>2: Trace taken on a system where audio is being offloaded"},{"content":"Notice the very low thread activity in the <bpt id=\"p1\">**</bpt>audiodg.exe<ept id=\"p1\">**</ept> process exists at start-up and shutdown phases of playback.","pos":[4057,4175]},{"content":"Notice also that there is no thread activity during steady state.","pos":[4176,4241]}],"content":"---\ntitle: Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback\ndescription: Offloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows.\nMSHAttr:\n- 'PreferredSiteName:MSDN'\n- 'PreferredLib:/library/windows/hardware'\nms.assetid: 96251661-55CC-4082-A3FF-4926C4931F74\n---\n\n# Exercise 3 - Use MXA to Verify that Audio is Offloaded During Full Screen Video Playback\n\n\nOffloading audio processing on chipsets that support audio offload results in longer battery life during audio and audio/video playback scenarios that leverage the Media Engine in Windows. This exercise uses the **Media eXperience Analyzer (MXA)** tool to determine whether or not audio was offloaded to hardware during full screen video playback.\n\n## Step 1: Load an ETW trace that was captured during full screen video playback\n\n\n1.  Install **MXA** which can be downloaded [here](https://go.microsoft.com/fwlink/?linkid=525711).\n\n2.  Right-click on the **Start** menu and click on **Command Prompt (Admin)**.\n\n3.  Navigate to the folder where you installed **MXA**.\n\n4.  Download **AudioNotOffloaded.etl** [here](http://download.microsoft.com/download/A/5/D/A5D6F588-EE12-4FBA-B54C-E6D1E554F19C/AudioNotOffloaded.etl).\n\n5.  Run the following command:\n\n    ``` syntax\n    xa -i <AudioNotOffloaded.etl location>\\AudioNotOffloaded.etl\n    ```\n\n    For example, if you downloaded **AudioNotOffloaded.etl** to C:\\\\Performance\\\\Media\\\\, you would type the following command:\n\n    ``` syntax\n    xa -i C:\\Performance\\Media\\AudioOffload\\AudioNotOffloaded.etl\n    ```\n\n6.  Press the **Turn Symbols Off** button to turn off symbol lookup.\n\n## Step 2: Verify audio was rendered when the ETW trace was collected\n\n\n1.  Once the trace loads, drag and drop the **Microsoft-Windows-MediaFoundation-Performance** provider into a panel.\n\n2.  Deselect all events in the **Microsoft-Windows-MediaFoundation-Performance** provider by clicking the checkbox next to this dataset two times.\n\n3.  Enable the **Task Audio\\_Render – 482 events**.\n\n4.  If your audio render events are fired throughout the trace, audio was playing when the trace was collected.\n\n![](images/optimizingwindowsdeviceslab1.png)\n\nAs we can see in the screenshot above, audio render events in the **Microsoft-Windows-MediaFoundation-Performance** provider (**Task Audio\\_Render – 482**) are logged throughout the entire trace. This verifies that audio was playing back.\n\n## Step 3: Determine whether audio was offloaded to hardware\n\n\n1.  Drag and drop the **CPU Scheduler** dataset into a panel.\n\n2.  Deselect all events by clicking on the checkbox at the root of the **CPU Scheduler** dataset twice.\n\n3.  Expand the **CPU Scheduler** dataset and **Windows System Processes** node.\n\n4.  Select the **audiodg.exe** process by clicking the checkbox once.\n\n5.  If there is **audiodg.exe** thread activity occurring every 10 ms throughout the entire playback session, then audio is not being offloaded. For an example, see MXA Screenshot \\#1.\n\n6.  If there is **audiodg.exe** thread activity only during start-up and shutdown, then audio is being offloaded. For an example, see MXA Screenshot \\#2.\n\n7.  Download the **AudioOffloaded.etl** trace file [here](http://download.microsoft.com/download/7/A/9/7A9935AE-DD3C-4714-9457-FF86BD5A6F05/AudioOffloaded.etl).\n\n8.  Repeat steps 1, 2, and 3 using the **AudioOffloaded.etl** trace instead of **AudioNotOffloaded.etl**.\n\n### <a href=\"\" id=\"mxa-screenshot--1--trace-taken-on-a-system-where-audio-is-not-being-offloaded\"></a>MXA Screenshot \\#1: Trace taken on a system where audio is NOT being offloaded\n\nNotice that the **audiodg.exe** is waking up every 10ms to process audio samples throughout the entire trace.\n\n![](images/optimizingwindowsdeviceslab2.png)\n\n### <a href=\"\" id=\"mxa-screenshot--2--trace-taken-on-a-system-where-audio-is-being-offloaded\"></a>MXA Screenshot \\#2: Trace taken on a system where audio is being offloaded\n\nNotice the very low thread activity in the **audiodg.exe** process exists at start-up and shutdown phases of playback. Notice also that there is no thread activity during steady state.\n\n![](images/optimizingwindowsdeviceslab3.png)\n\n \n\n \n\n\n\n\n\n\n"}