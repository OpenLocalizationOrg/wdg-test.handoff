{"nodes":[{"content":"Get-SignedFirmwareSubmission cmdlet","pos":[35,70]},{"content":"Get-SignedFirmwareSubmission cmdlet","pos":[179,214]},{"content":"Get-SignedFirmwareSubmission cmdlet","pos":[223,258]},{"content":"The code-signed firmware can be retrieved after a successful submission to Microsoft.","pos":[261,346]},{"content":"If the submission is successful, the OEM receives a ticket number.","pos":[347,413]},{"content":"Use the <bpt id=\"p1\">**</bpt>Get-SignedFirmwareSubmission<ept id=\"p1\">**</ept> cmdlet to retrieve the signed submission for the code sign ticket number.","pos":[414,528]},{"pos":[530,606],"content":"The following is the syntax for the <bpt id=\"p1\">**</bpt>Get-SignedFirmwareSubmission<ept id=\"p1\">**</ept> cmdlet."},{"pos":[686,692],"content":"Syntax"},{"pos":[1333,1343],"content":"Parameters"},{"pos":[1346,1455],"content":"Typically, the only parameters that are specified for this cmdlet are <bpt id=\"p1\">**</bpt>TicketId<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>DownloadDirectory<ept id=\"p2\">**</ept>."},{"content":"The cmdlet obtains the default values for the rest of the parameters from a configuration file.","pos":[1457,1552]},{"content":"By default, this configuration file is placed by the installer at: %ProgramFiles(x86)%<ph id=\"ph1\">\\\\</ph>Microsoft<ph id=\"ph2\">\\\\</ph>WP Ingestion Client<ph id=\"ph3\">\\\\</ph>Modules<ph id=\"ph4\">\\\\</ph>Microsoft.Phone.PartnerServices.Client<ph id=\"ph5\">\\\\</ph> Microsoft.Phone.PartnerServices.Client.dll.config","pos":[1553,1772]},{"content":"An example config file is provided in the Config file section of this document.","pos":[1774,1853]},{"content":"If any of the non-required parameters are explicitly specified on the command line, those values override the default values that are stored in the configuration file.","pos":[1855,2022]},{"pos":[2024,2170],"content":"To support Windows PowerShell automation scripts, the cmdlet returns an object of type <ph id=\"ph1\">`Microsoft.Phone.PartnerServices.SignedFirmwareSubmission`</ph>:"},{"content":"This object can be processed using Windows PowerShell or displayed on the command line.","pos":[2624,2711]},{"content":"The following sections show common usage scenarios and common error cases for retrieving signed submissions.","pos":[2712,2820]},{"content":"Note","pos":[2824,2828]},{"content":"Many of these commands are shown here as multiple lines, but must be entered as a single line in Windows PowerShell.","pos":[2833,2949]},{"pos":[3044,3054],"content":"Exceptions"},{"content":"The following exceptions are thrown for their corresponding error scenarios.","pos":[3057,3133]},{"pos":[3299,3336],"content":"FaultException<ph id=\"ph1\">&amp;lt;</ph>ArgumentFaultDetail"},{"content":"An invalid ticket ID was provided.","pos":[3349,3383]},{"content":"The ticket ID was either null or empty.","pos":[3384,3423]},{"pos":[3613,3658],"content":"FaultException<ph id=\"ph1\">&amp;lt;</ph>InvalidOperationFaultDetail"},{"content":"An invalid ticket ID was provided.","pos":[3671,3705]},{"content":"The ticket ID is not defined in the service.","pos":[3711,3755]},{"content":"The authenticated user is not the owner of the firmware submission.","pos":[3761,3828]},{"content":"The ticket ID is a resubmission ticket.","pos":[3834,3873]},{"content":"Code signing is still in progress.","pos":[3879,3913]},{"content":"Code signing is pending manual intervention from Microsoft.","pos":[3919,3978]},{"content":"No OEM action required.","pos":[3979,4002]},{"content":"Code signing has failed.","pos":[4008,4032]},{"pos":[4121,4130],"content":"Scenarios"},{"pos":[4317,4358],"content":"Retrieve a successfully signed submission"},{"pos":[4487,4509],"content":"Scenario prerequisites"},{"content":"A firmware request has been successfully submitted for code signing.","pos":[4515,4583]},{"content":"The submission ticket that is returned by the firmware request is available.","pos":[4589,4665]},{"content":"A SUCCESS email notification that indicates that the firmware submission has been successfully signed has been received by the OEM.","pos":[4671,4802]},{"pos":[4967,5001],"content":"Example usage with expected output"},{"content":"Retrieve the signed submission for a ticket and store the result object in a Windows PowerShell variable:","pos":[5003,5108]},{"content":"Show the result on the console:","pos":[5246,5277]},{"pos":[5665,5731],"content":"Attempt to retrieve a signed firmware submission before completion"},{"pos":[5860,5882],"content":"Scenario prerequisites"},{"content":"A firmware request has been successfully submitted for code signing.","pos":[5888,5956]},{"content":"The submission ticket that is returned by the firmware request is available.","pos":[5962,6038]},{"content":"The firmware code signing process is still in progress.","pos":[6044,6099]},{"content":"That is, the ticket has been issued, but a SUCCESS email has not been received.","pos":[6100,6179]},{"pos":[6344,6378],"content":"Example usage with expected output"},{"content":"Attempt to retrieve the signed submission for a ticket that is still in process:","pos":[6380,6460]},{"content":"This state is indicated by the returned reason, “Code signing is still in progress”.","pos":[7443,7527]},{"content":"If a custom PowerShell script is being used, it can be programmed to catch an exception (Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException).","pos":[7529,7700]},{"content":"That exception can be examined to determine if the submission has completed.","pos":[7701,7777]},{"content":"The following code sample illustrates how to extract the error information from the returned result object.","pos":[7778,7885]},{"content":"A loop can be constructed to wait (for at least 30 minutes) and then try again to determine if the submission has completed.","pos":[8426,8550]},{"content":"You are strongly advised that such a polling style must not be invoked with intervals of less than 30 minutes to avoid overwhelming the update server.","pos":[8551,8701]},{"pos":[8992,9068],"content":"Attempt to retrieve a signed firmware submission when the request has failed"},{"pos":[9197,9219],"content":"Scenario prerequisites"},{"content":"A firmware request has been successfully submitted for code signing.","pos":[9225,9293]},{"content":"The submission ticket that is returned by the firmware request is available.","pos":[9299,9375]},{"content":"The firmware code signing process has failed permanently.","pos":[9381,9438]},{"content":"That is, a FAILURE email notification has been received by the OEM for the ticket.","pos":[9439,9521]},{"pos":[9686,9720],"content":"Example usage with expected output"},{"content":"Attempt to retrieve the signed submission for a ticket that has failed permanently:","pos":[9722,9805]},{"pos":[11089,11168],"content":"Attempt to retrieve a signed firmware submission when the ticket does not exist"},{"pos":[11297,11319],"content":"Scenario prerequisites"},{"content":"An OEM is attempting to retrieve a ticket number that does not exist.","pos":[11325,11394]},{"pos":[11559,11593],"content":"Example usage with expected output"},{"pos":[12685,12719],"content":"Help documentation from PowerShell"},{"pos":[12722,12834],"content":"The following is the help documentation for the <bpt id=\"p1\">**</bpt>Get-SignedFirmwareSubmission<ept id=\"p1\">**</ept> cmdlet from Windows PowerShell."},{"pos":[18009,18021],"content":"Requirements"},{"pos":[18024,18040],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> None"},{"pos":[18078,18092],"content":"Related topics"},{"content":"Submit binaries to be retail signed","pos":[18096,18131]}],"content":"---\nauthor: kpacquer\nDescription: 'Get-SignedFirmwareSubmission cmdlet'\nms.assetid: 911d3704-0508-4aae-8236-59cfd380867b\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: 'Get-SignedFirmwareSubmission cmdlet'\n---\n\n# Get-SignedFirmwareSubmission cmdlet\n\n\nThe code-signed firmware can be retrieved after a successful submission to Microsoft. If the submission is successful, the OEM receives a ticket number. Use the **Get-SignedFirmwareSubmission** cmdlet to retrieve the signed submission for the code sign ticket number.\n\nThe following is the syntax for the **Get-SignedFirmwareSubmission** cmdlet.\n\n## <span id=\"Syntax\"></span><span id=\"syntax\"></span><span id=\"SYNTAX\"></span>Syntax\n\n\n``` syntax\nNAME\n     Get-SignedFirmwareSubmission\nSYNTAX\n     Get-SignedFirmwareSubmission\n      [-TicketId] <string>\n      [[-DownloadDirectory] <string>]\n      [-ServiceUri <uri>]\n      [-CertificateStoreLocation <StoreLocation> {CurrentUser | LocalMachine}]\n      [-CertificateStoreName <StoreName> {AddressBook | AuthRoot | CertificateAuthority\n         | Disallowed | My | Root | TrustedPeople | TrustedPublisher}]\n      [-ClientCertificateThumbprint <string>]\n      [-EncryptionCertificateThumbprint <string>]\n      [<CommonParameters>]\n```\n\n## <span id=\"Parameters\"></span><span id=\"parameters\"></span><span id=\"PARAMETERS\"></span>Parameters\n\n\nTypically, the only parameters that are specified for this cmdlet are **TicketId** and **DownloadDirectory**.\n\nThe cmdlet obtains the default values for the rest of the parameters from a configuration file. By default, this configuration file is placed by the installer at: %ProgramFiles(x86)%\\\\Microsoft\\\\WP Ingestion Client\\\\Modules\\\\Microsoft.Phone.PartnerServices.Client\\\\ Microsoft.Phone.PartnerServices.Client.dll.config\n\nAn example config file is provided in the Config file section of this document.\n\nIf any of the non-required parameters are explicitly specified on the command line, those values override the default values that are stored in the configuration file.\n\nTo support Windows PowerShell automation scripts, the cmdlet returns an object of type `Microsoft.Phone.PartnerServices.SignedFirmwareSubmission`:\n\n``` syntax\nTypeName: Microsoft.Phone.PartnerServices.SignedFirmwareSubmission\n\nName        MemberType Definition\n----        ---------- ----------\nEquals      Method     bool Equals(System.Object obj)\nGetHashCode Method     int GetHashCode()\nGetType     Method     type GetType()\nToString    Method     string ToString()\nFile        Property   System.IO.FileInfo File {get;set;}\nFirmwareSubmissionTicketId    Property   string TicketId {get;set;}\n```\n\nThis object can be processed using Windows PowerShell or displayed on the command line. The following sections show common usage scenarios and common error cases for retrieving signed submissions.\n\n**Note**  \nMany of these commands are shown here as multiple lines, but must be entered as a single line in Windows PowerShell.\n\n \n\n## <span id=\"Exceptions\"></span><span id=\"exceptions\"></span><span id=\"EXCEPTIONS\"></span>Exceptions\n\n\nThe following exceptions are thrown for their corresponding error scenarios.\n\n<span id=\"FaultException_ArgumentFaultDetail_\"></span><span id=\"faultexception_argumentfaultdetail_\"></span><span id=\"FAULTEXCEPTION_ARGUMENTFAULTDETAIL_\"></span>**FaultException&lt;ArgumentFaultDetail&gt;**  \n-   An invalid ticket ID was provided. The ticket ID was either null or empty.\n\n<span id=\"FaultException_InvalidOperationFaultDetail_\"></span><span id=\"faultexception_invalidoperationfaultdetail_\"></span><span id=\"FAULTEXCEPTION_INVALIDOPERATIONFAULTDETAIL_\"></span>**FaultException&lt;InvalidOperationFaultDetail&gt;**  \n-   An invalid ticket ID was provided.\n\n-   The ticket ID is not defined in the service.\n\n-   The authenticated user is not the owner of the firmware submission.\n\n-   The ticket ID is a resubmission ticket.\n\n-   Code signing is still in progress.\n\n-   Code signing is pending manual intervention from Microsoft. No OEM action required.\n\n-   Code signing has failed.\n\n## <span id=\"Scenarios\"></span><span id=\"scenarios\"></span><span id=\"SCENARIOS\"></span>Scenarios\n\n\n### <span id=\"Retrieve_a_successfully_signed_submission\"></span><span id=\"retrieve_a_successfully_signed_submission\"></span><span id=\"RETRIEVE_A_SUCCESSFULLY_SIGNED_SUBMISSION\"></span>Retrieve a successfully signed submission\n\n### <span id=\"Scenario_prerequisites\"></span><span id=\"scenario_prerequisites\"></span><span id=\"SCENARIO_PREREQUISITES\"></span>Scenario prerequisites\n\n-   A firmware request has been successfully submitted for code signing.\n\n-   The submission ticket that is returned by the firmware request is available.\n\n-   A SUCCESS email notification that indicates that the firmware submission has been successfully signed has been received by the OEM.\n\n### <span id=\"Example_usage_with_expected_output\"></span><span id=\"example_usage_with_expected_output\"></span><span id=\"EXAMPLE_USAGE_WITH_EXPECTED_OUTPUT\"></span>Example usage with expected output\n\nRetrieve the signed submission for a ticket and store the result object in a Windows PowerShell variable:\n\n``` syntax\nPS> $result = Get-SignedFirmwareSubmission –FirmwareSubmissionTicketId TKT-SIGN-TEST-BTUADL \n-DownloadDirectory C:\\temp\n```\n\nShow the result on the console:\n\n``` syntax\nPS> $result | Format-List\n\nTicketId : TKT-SIGN-TEST-BTUADL\nFile     : c:\\temp\\OemTest.TKT-SIGN-TEST-BTUADL.zip\n```\n\n### <span id=\"Attempt_to_retrieve_a_signed_firmware_submission_before_completion\"></span><span id=\"attempt_to_retrieve_a_signed_firmware_submission_before_completion\"></span><span id=\"ATTEMPT_TO_RETRIEVE_A_SIGNED_FIRMWARE_SUBMISSION_BEFORE_COMPLETION\"></span>Attempt to retrieve a signed firmware submission before completion\n\n### <span id=\"Scenario_prerequisites\"></span><span id=\"scenario_prerequisites\"></span><span id=\"SCENARIO_PREREQUISITES\"></span>Scenario prerequisites\n\n-   A firmware request has been successfully submitted for code signing.\n\n-   The submission ticket that is returned by the firmware request is available.\n\n-   The firmware code signing process is still in progress. That is, the ticket has been issued, but a SUCCESS email has not been received.\n\n### <span id=\"Example_usage_with_expected_output\"></span><span id=\"example_usage_with_expected_output\"></span><span id=\"EXAMPLE_USAGE_WITH_EXPECTED_OUTPUT\"></span>Example usage with expected output\n\nAttempt to retrieve the signed submission for a ticket that is still in process:\n\n``` syntax\nPS> Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId TKT-SIGN-TEST-XD252Y \n-DownloadDirectory c:\\temp\n```\n\n``` syntax\nGet-SignedFirmwareSubmission : An error has occurred.  The request could not be processed because the operation is not\nvalid for the current state of service.\nDetails: Unable to retrieve the specified firmware submission. Reason: Code signing is still in progress.\nReason: FirmwareSubmissionIsInProgress.\nCorrelation: 4ab98c1a-df9c-40a9-ac6a-f9b1e9d42e87.\nAt line:1 char:1\n+ Get-SignedFirmwareSubmission TKT-SIGN-TEST-06TV0O c:\\temp -Verbose\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Get-SignedFirmwareSubmission], FirmwareSubmissionInProgressExcept\n   ion\n    + FullyQualifiedErrorId : Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException,Microso\n   ft.Phone.PartnerServices.Cmdlets.GetSignedFirmwareSubmissionCommand            \n```\n\nThis state is indicated by the returned reason, “Code signing is still in progress”.\n\nIf a custom PowerShell script is being used, it can be programmed to catch an exception (Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException). That exception can be examined to determine if the submission has completed. The following code sample illustrates how to extract the error information from the returned result object.\n\n``` syntax\n      $result = ''\n        try {\n            $result = Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId \"TKT-SIGN-TEST-17Y8M5\" -DownloadDirectory c:\\MyFirmwareSubmissions\n        }\n        catch [Microsoft.Phone.PartnerServices.Exceptions.FirmwareSubmissionInProgressException] {\n            write-host \"Error Message\" + $_.Exception.Message\n            write-host \"Error Detail\" + $_.Exception.Detail\n            \n            #exit or take other action since we've detected a failure\n            exit 1\n        } \n```\n\nA loop can be constructed to wait (for at least 30 minutes) and then try again to determine if the submission has completed. You are strongly advised that such a polling style must not be invoked with intervals of less than 30 minutes to avoid overwhelming the update server.\n\n### <span id=\"Attempt_to_retrieve_a_signed_firmware_submission_when_the_request_has_failed\"></span><span id=\"attempt_to_retrieve_a_signed_firmware_submission_when_the_request_has_failed\"></span><span id=\"ATTEMPT_TO_RETRIEVE_A_SIGNED_FIRMWARE_SUBMISSION_WHEN_THE_REQUEST_HAS_FAILED\"></span>Attempt to retrieve a signed firmware submission when the request has failed\n\n### <span id=\"Scenario_prerequisites\"></span><span id=\"scenario_prerequisites\"></span><span id=\"SCENARIO_PREREQUISITES\"></span>Scenario prerequisites\n\n-   A firmware request has been successfully submitted for code signing.\n\n-   The submission ticket that is returned by the firmware request is available.\n\n-   The firmware code signing process has failed permanently. That is, a FAILURE email notification has been received by the OEM for the ticket.\n\n### <span id=\"Example_usage_with_expected_output\"></span><span id=\"example_usage_with_expected_output\"></span><span id=\"EXAMPLE_USAGE_WITH_EXPECTED_OUTPUT\"></span>Example usage with expected output\n\nAttempt to retrieve the signed submission for a ticket that has failed permanently:\n\n``` syntax\nPS> Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId TKT-SIGN-TEST-TUKJGG -DownloadDirectory c:\\temp\n```\n\n``` syntax\nGet-SignedFirmwareSubmission : An error has occurred.  The request could not be\nprocessed because the operation is not valid for the current state of service.\nDetails: Unable to retrieve the specified firmware submission. Reason: Code\nsigning has failed.\nReason: FirmwareSubmissionHasFailed.\nCorrelation: 67a645af-19b7-468d-9f7a-4a3fd341a15e.\nAt line:1 char:11\n+ $result = Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId\nTKT-SIGN-TEST ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~\n    + CategoryInfo          : InvalidOperation: (:) [Get-SignedFirmwareSubmiss\n   ion], FirmwareSubmissionFailedException\n    + FullyQualifiedErrorId : Microsoft.Phone.PartnerServices.Exceptions.Firmw\n   areSubmissionFailedException,Microsoft.Phone.PartnerServices.Cmdlets.GetSi\n  gnedFirmwareSubmissionCommand\n```\n\n### <span id=\"Attempt_to_retrieve_a_signed_firmware_submission_when_the_ticket_does_not_exist\"></span><span id=\"attempt_to_retrieve_a_signed_firmware_submission_when_the_ticket_does_not_exist\"></span><span id=\"ATTEMPT_TO_RETRIEVE_A_SIGNED_FIRMWARE_SUBMISSION_WHEN_THE_TICKET_DOES_NOT_EXIST\"></span>Attempt to retrieve a signed firmware submission when the ticket does not exist\n\n### <span id=\"Scenario_prerequisites\"></span><span id=\"scenario_prerequisites\"></span><span id=\"SCENARIO_PREREQUISITES\"></span>Scenario prerequisites\n\n-   An OEM is attempting to retrieve a ticket number that does not exist.\n\n### <span id=\"Example_usage_with_expected_output\"></span><span id=\"example_usage_with_expected_output\"></span><span id=\"EXAMPLE_USAGE_WITH_EXPECTED_OUTPUT\"></span>Example usage with expected output\n\n``` syntax\nPS> Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId bad_ticket_number -DownloadDirectory c:\\temp\n```\n\n``` syntax\nGet-SignedFirmwareSubmission : An error has ocurred.  The request could not be\nprocessed because the operation is not valid for the current state of service.\nDetails: The specified FirmwareSubmission ticket does not exist.\nReason: TicketDoesNotExist.\nCorrelation: fd8bb041-fe0f-46ea-9b89-ccf91a57178c.\nAt line:1 char:11\n+ $result = Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId\nTKT-SIGN-TEST ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~\n    + CategoryInfo          : InvalidOperation: (:) [Get-SignedFirmwareSubmiss\n   ion], TicketDoesNotExistException\n    + FullyQualifiedErrorId : Microsoft.Phone.PartnerServices.Exceptions.Ticke\n   tDoesNotExistException,Microsoft.Phone.PartnerServices.Cmdlets.GetSignedFi\n  rmwareSubmissionCommand\n```\n\n## <span id=\"Help_documentation_from_PowerShell\"></span><span id=\"help_documentation_from_powershell\"></span><span id=\"HELP_DOCUMENTATION_FROM_POWERSHELL\"></span>Help documentation from PowerShell\n\n\nThe following is the help documentation for the **Get-SignedFirmwareSubmission** cmdlet from Windows PowerShell.\n\n``` syntax\nNAME\n    Get-SignedFirmwareSubmission\n\nSYNOPSIS\n    Gets a signed firmware submission for a given firmware submission ticket.\n\nSYNTAX\n    Get-SignedFirmwareSubmission [-FirmwareSubmissionTicketId] <String>\n    [[-DownloadDirectory] <String>] [-ServiceUri <Uri>]\n    [-ServiceAccessControlNamespace <String>] [-CertificateStoreLocation\n    <StoreLocation>] [-CertificateStoreName <StoreName>]\n    [-ClientCertificateThumbprint <String>] [-EncryptionCertificateThumbprint\n    <String>] [<CommonParameters>]\n\n\nDESCRIPTION\n    Downloads a signed firmware submission for a given ticket id.\n\n            The download can only be performed after a new firmware submission\n    has been created and uploaded with the OemSubmit tool or WP Ingestion\n    Client and the uploaded files have been signed by Microsoft. Otherwise it\n    will throw an error.\n\n\nPARAMETERS\n    -FirmwareSubmissionTicketId <String>\n        Firmware-Submission ticket. Must be a valid ticket.\n\n        Required?                    true\n        Position?                    2\n        Default value\n        Accept pipeline input?       true (ByValue, ByPropertyName)\n        Accept wildcard characters?  false\n\n    -DownloadDirectory <String>\n        The download directory for the signed firmware-submission. Must be a\n        full path to the download directory.\n\n                    A default value can be defined in the configuration file.\n\n        Required?                    false\n        Position?                    3\n        Default value\n        Accept pipeline input?       true (ByValue, ByPropertyName)\n        Accept wildcard characters?  false\n\n    -ServiceUri <Uri>\n        The service URI. The default value for this parameter is read from the\n        configuration file.\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    -ServiceAccessControlNamespace <String>\n        The namespace for Partner Services Access Control. The default value\n        for this parameter is read from the configuration file. Should only be\n        modified if instructed by the system administrator or Microsoft.\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    -CertificateStoreLocation <StoreLocation>\n        The certificate store location. The default value for this parameter\n        is read from the configuration file.\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    -CertificateStoreName <StoreName>\n        The certificate store name. The default value for this parameter is\n        read from the configuration file.\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    -ClientCertificateThumbprint <String>\n        The client certificate thumbprint. The default value for this\n        parameter is read from the configuration file. Should only be modified\n        if instructed by the system administrator or Microsoft\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    -EncryptionCertificateThumbprint <String>\n        The encryption certificate thumbprint. The default value for this\n        parameter is read from the configuration file.\n\n        Required?                    false\n        Position?                    named\n        Default value\n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    <CommonParameters>\n        This cmdlet supports the common parameters: Verbose, Debug,\n        ErrorAction, ErrorVariable, WarningAction, WarningVariable,\n        OutBuffer, PipelineVariable, and OutVariable. For more information,\n    see\n        about_CommonParameters\n    (http://go.microsoft.com/fwlink/p/?linkid=113216).\n\nINPUTS\n\nOUTPUTS\n    SignedFirmwareSubmission\n\n        Contains information about the downloaded file and the firmware\n        submission ticket related to the signing.\n\nNOTES\n    --------------  Example 1 --------------\n\n    C:\\PS>Get-SignedFirmwareSubmission -FirmwareSubmissionTicketId\n    TKT-SIGN-PROD-ABCDEF -DownloadDirectory\n    C:\\SignedFirmwareSubmissionDownloads | Format-List\n\n\n    Successful download of a signed firmware-submission read for download.\n\n                The ticket id is TKT-SIGN-PROD-ABCDEF and the zip-file is\n    downloaded to directory C:\\SignedFirmwareSubmissionDownloads.\n\n\n\n    FirmwareSubmissionTicketId : TKT-SIGN-PROD-ABCDEF\n                File     :\n    c:\\SignedFirmwareSubmissionDownloads\\OemTest.TKT-SIGN-PROD-ABCDEF.zip\n\nRELATED LINKS\n```\n\n## <span id=\"Requirements\"></span><span id=\"requirements\"></span><span id=\"REQUIREMENTS\"></span>Requirements\n\n\n**Header:** None\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Submit binaries to be retail signed](https://msdn.microsoft.com/library/windows/hardware/dn789223)\n\n \n\n \n\n\n\n\n\n\n"}