{"nodes":[{"content":"Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit","pos":[11,79]},{"content":"While the Fast Startup assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.","pos":[93,258]},{"content":"Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit","pos":[447,515]},{"content":"While the <bpt id=\"p1\">**</bpt>Fast Startup<ept id=\"p1\">**</ept> assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.","pos":[518,687]},{"content":"It’s possible to quickly capture a <bpt id=\"p1\">**</bpt>Fast Startup<ept id=\"p1\">**</ept> trace using the <bpt id=\"p2\">**</bpt>Windows Performance Recorder (WPR)<ept id=\"p2\">**</ept> tool.","pos":[688,800]},{"content":"Step 1: Open Fast Startup trace using WPA","pos":[805,846]},{"pos":[853,920],"content":"Open <bpt id=\"p1\">**</bpt>Windows Performance Recorder (WPR)<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> menu"},{"content":"Modify the tracing configuration.","pos":[926,959]},{"pos":[969,1031],"content":"Select the <bpt id=\"p1\">**</bpt>First Level Triage<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>CPU Usage<ept id=\"p2\">**</ept> providers."},{"pos":[1041,1097],"content":"Change the <bpt id=\"p1\">**</bpt>performance scenario<ept id=\"p1\">**</ept> to <bpt id=\"p2\">**</bpt>Fast Startup<ept id=\"p2\">**</ept>."},{"pos":[1107,1182],"content":"Change the <bpt id=\"p1\">**</bpt>Number of iterations<ept id=\"p1\">**</ept> to 1 in order to gather a single trace."},{"pos":[1240,1259],"content":"Click on <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>."},{"pos":[1265,1329],"content":"Enter a path to save the resulting trace, and click on <bpt id=\"p1\">**</bpt>Save<ept id=\"p1\">**</ept>."},{"content":"This will force the system to reboot to gather and save the trace.","pos":[1339,1405]},{"content":"Once the system reboots, wait 5 minutes for tracing to finish.","pos":[1411,1473]},{"pos":[1475,1561],"content":"You now have a trace that can be analyzed with <bpt id=\"p1\">**</bpt>Windows Performance Analyzer (WPA)<ept id=\"p1\">**</ept>."},{"pos":[1629,1670],"content":"Step 2: Open Fast Startup trace using WPA"},{"pos":[1677,1741],"content":"Open <bpt id=\"p1\">**</bpt>Windows Performance Analyzer (WPA)<ept id=\"p1\">**</ept> from the Start menu."},{"pos":[1747,1813],"content":"From the <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> menu, open the trace that you created in Step 1."},{"pos":[1819,1870],"content":"Open the <bpt id=\"p1\">**</bpt>Profiles<ept id=\"p1\">**</ept> menu, and click on <bpt id=\"p2\">**</bpt>Apply…<ept id=\"p2\">**</ept>"},{"pos":[1880,1908],"content":"Click on <bpt id=\"p1\">**</bpt>Browse Catalog…<ept id=\"p1\">**</ept>"},{"pos":[1918,1952],"content":"Select <bpt id=\"p1\">**</bpt>FastStartup.wpaprofile<ept id=\"p1\">**</ept>."},{"pos":[1962,1980],"content":"Click on <bpt id=\"p1\">**</bpt>Open.<ept id=\"p1\">**</ept>"},{"content":"You now have applied a visualization profile to the trace in order to get some commonly used graphs (CPU, disk, etc.).","pos":[1982,2100]},{"content":"Step 3: Visualize the activity timeline","pos":[2105,2144]},{"pos":[2151,2221],"content":"Look at the <bpt id=\"p1\">**</bpt>Regions of Interest<ept id=\"p1\">**</ept> graph in the <bpt id=\"p2\">**</bpt>Deep Analysis<ept id=\"p2\">**</ept> tab"},{"pos":[2231,2332],"content":"This view provides a timeline overview of all the <bpt id=\"p1\">**</bpt>Fast Startup<ept id=\"p1\">**</ept> subphases mentioned in Exercise 1."},{"content":"Hovering the mouse over a region bar causes a popup window to appear and provide more information for the region itself.","pos":[2390,2510]},{"content":"If you put the mouse over the <bpt id=\"p1\">**</bpt>Boot Main Path<ept id=\"p1\">**</ept> region, you can see its duration.","pos":[2520,2602]},{"content":"In the example below, it lasts 13.6 seconds.","pos":[2603,2647]},{"content":"Take the time to navigate through the regions tree, and look at all the subphases to familiarize yourself with it.","pos":[2701,2815]},{"content":"The time that <bpt id=\"p1\">**</bpt>Explorer<ept id=\"p1\">**</ept> takes to initialize and finish is the time it takes to create the Windows desktop and make it visible to the user.","pos":[2817,2958]},{"content":"This phase (and everything happening after, known as <bpt id=\"p1\">**</bpt>post on/off<ept id=\"p1\">**</ept>) can be impacted by processes started on boot.","pos":[2959,3074]},{"content":"Select a 90 second interval starting at the beginning of Explorer Initialization and zoom in.","pos":[3076,3169]},{"content":"Under the <bpt id=\"p1\">**</bpt>Regions of Interest<ept id=\"p1\">**</ept> graph, there are two other valuable graphs: <bpt id=\"p2\">**</bpt>CPU Usage (sampled)<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Disk usage<ept id=\"p3\">**</ept>.","pos":[3257,3378]},{"content":"They will be used to evaluate the impact that the software preload has on <bpt id=\"p1\">**</bpt>post on/off<ept id=\"p1\">**</ept> resource consumption and responsiveness.","pos":[3379,3509]},{"content":"High CPU usage by applications and services can contribute to a poor user experience, such as UI unresponsiveness or video and sound glitches.","pos":[3511,3653]},{"content":"When a single process uses too much CPU, other processes can be delayed because they must compete for system resources.","pos":[3654,3773]},{"content":"When a thread uses storage resources, it can increase the duration of the activity.","pos":[3775,3858]},{"content":"When multiple threads contend for the use of storage, the resulting random disk seeks make delays more significant.","pos":[3859,3974]},{"content":"Step 4: Analyze process CPU usage","pos":[3979,4012]},{"content":"In order to evaluate how much CPU time is consumed by a process, focus on the <bpt id=\"p1\">**</bpt>CPU Usage (sampled)<ept id=\"p1\">**</ept> graph.","pos":[4015,4123]},{"content":"The data that displays in the <bpt id=\"p1\">**</bpt>CPU Usage (Sampled)<ept id=\"p1\">**</ept> graph represents samples of CPU activity taken at regular 1 ms sampling intervals.","pos":[4124,4260]},{"content":"Each row in the table represents a single sample.","pos":[4261,4310]},{"content":"Any CPU activity that occurs between samples is not recorded by this sampling method.","pos":[4312,4397]},{"content":"Therefore, activities of very short duration such as interrupts are not well represented in the <bpt id=\"p1\">**</bpt>CPU Sampling<ept id=\"p1\">**</ept> graph.","pos":[4398,4517]},{"content":"Review the CPU usage for each process to identify the processes that have the highest CPU usage (<bpt id=\"p1\">**</bpt>Weight<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>%Weight<ept id=\"p2\">**</ept>).","pos":[4519,4644]},{"content":"To do this, scroll down to the graph <bpt id=\"p1\">**</bpt>CPU Usage (sampled)<ept id=\"p1\">**</ept>.","pos":[4645,4706]},{"content":"On the left, view the list of processes.","pos":[4707,4747]},{"content":"Each active process that is selected on the left displays on the graph.","pos":[4748,4819]},{"content":"Tip:","pos":[4867,4871]},{"content":"While using <bpt id=\"p1\">**</bpt>WPA<ept id=\"p1\">**</ept> graphs, you can change the view to display both the graph and the table.","pos":[4877,4969]},{"content":"You can click the <bpt id=\"p1\">**</bpt>Maximize<ept id=\"p1\">**</ept> button to hide the other graphs displayed on the <bpt id=\"p2\">**</bpt>Analysis<ept id=\"p2\">**</ept> tab.","pos":[4970,5067]},{"content":"In this example, <bpt id=\"p1\">**</bpt>ImageSHELLY.exe<ept id=\"p1\">**</ept> consumes 12.4 seconds of CPU time over the interval of 90 seconds currently analyzed.","pos":[5113,5235]},{"content":"Since the CPU on this system has two cores, this represents a relative percentage of utilization of 6.9%.","pos":[5236,5341]},{"content":"Using this information, you can investigate the specific process that is causing this CPU consumption, or forward these details to the developer who owns this process.","pos":[5343,5510]},{"content":"You can add additional columns to extract more information (right-click on the table column headers):","pos":[5512,5613]},{"pos":[5619,5676],"content":"<bpt id=\"p1\">**</bpt>Thread ID<ept id=\"p1\">**</ept>: Identifier of the thread causing CPU usage"},{"pos":[5682,5775],"content":"<bpt id=\"p1\">**</bpt>Stack<ept id=\"p1\">**</ept>: Call stack that highlights the code paths and functions that are causing CPU usage"},{"pos":[5821,5986],"content":"In the example above, there is only one thread causing most of the CPU usage within the <bpt id=\"p1\">**</bpt>ImageSHELLY.exe<ept id=\"p1\">**</ept> process: Thread 2612, with 10.77 seconds of CPU activity."},{"pos":[5988,6069],"content":"The stack shows that this activity is coming from the <bpt id=\"p1\">**</bpt>ImageSTACEY.dll<ept id=\"p1\">**</ept> module."},{"content":"Step 5: Analyze process disk usage","pos":[6074,6108]},{"pos":[6111,6216],"content":"In order to evaluate how much disk bandwidth is consumed by a process, focus on the <bpt id=\"p1\">**</bpt>Disk Usage<ept id=\"p1\">**</ept> graph."},{"content":"The columns of interest are:","pos":[6262,6290]},{"content":"<bpt id=\"p1\">**</bpt>Pri<ept id=\"p1\">**</ept>: Priority of the disk I/O.","pos":[6296,6330]},{"content":"The three possible priority levels are: normal, low, and very low.","pos":[6331,6397]},{"content":"<bpt id=\"p1\">**</bpt>IO Type<ept id=\"p1\">**</ept>: Type of the I/O.","pos":[6403,6432]},{"content":"The three possible I/O types are: read, write, and flush.","pos":[6433,6490]},{"pos":[6496,6561],"content":"<bpt id=\"p1\">**</bpt>Process<ept id=\"p1\">**</ept>: Identifier of the process that created the disk I/O."},{"pos":[6567,6661],"content":"<bpt id=\"p1\">**</bpt>Path Tree<ept id=\"p1\">**</ept>: Structured tree that represents the locations of the files accessed by the I/O."},{"pos":[6667,6704],"content":"<bpt id=\"p1\">**</bpt>Size<ept id=\"p1\">**</ept>: Size (in bytes) of the I/O."},{"pos":[6710,6794],"content":"<bpt id=\"p1\">**</bpt>Disk Service time<ept id=\"p1\">**</ept>: Amount of time that it takes for the disk to service the I/O."},{"pos":[6800,6872],"content":"<bpt id=\"p1\">**</bpt>IO Time<ept id=\"p1\">**</ept>: Amount of time that the I/O spent in the Windows I/O queue."},{"pos":[6882,7068],"content":"<bpt id=\"p1\">**</bpt>IO Time<ept id=\"p1\">**</ept> is always longer than <bpt id=\"p2\">**</bpt>Disk Service Time<ept id=\"p2\">**</ept> because an I/O can be queued when there is disk contention or when an I/O dispatcher at a higher priority must be completed first."},{"content":"Add these columns and arrange them to obtain this view:","pos":[7070,7125]},{"content":"<bpt id=\"p1\">**</bpt>Post on/off<ept id=\"p1\">**</ept> only takes into account normal priority I/Os.","pos":[7171,7232]},{"content":"Investigate the information about those disk reads according to process.","pos":[7233,7305]},{"content":"Disk reads usually account for more disk access time than disk writes on boot, as a lot of data must be read from disk in order to launch processes and services.","pos":[7306,7467]},{"pos":[7473,7613],"content":"Click the color markers beside the <bpt id=\"p1\">**</bpt>Pri<ept id=\"p1\">**</ept>: Very Low and <bpt id=\"p2\">**</bpt>Pri<ept id=\"p2\">**</ept>: Low series so that only the normal priority I/Os are visible on the graph."},{"pos":[7667,7721],"content":"In the table view, expand the <bpt id=\"p1\">**</bpt>Normal<ept id=\"p1\">**</ept> priority row."},{"pos":[7727,7893],"content":"In the table view, expand the rows for <bpt id=\"p1\">**</bpt>Write<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Read<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Flush<ept id=\"p3\">**</ept>, and then click the header for the <bpt id=\"p4\">**</bpt>Size<ept id=\"p4\">**</ept> column to sort the contents in decreasing order."},{"content":"Your screen should look something like this:","pos":[7899,7943]},{"content":"The preceding example shows the following:","pos":[7997,8039]},{"content":"152 MB of data was read from disk at normal priority.","pos":[8049,8102]},{"content":"129 MB of data was written to disk at normal priority.","pos":[8112,8166]},{"content":"Those are mainly disk writes to persist the captured ETL trace file on storage.","pos":[8180,8259]},{"pos":[8265,8316],"content":"In the table view, expand the <bpt id=\"p1\">**</bpt>Read IO Type<ept id=\"p1\">**</ept> row."},{"pos":[8326,8441],"content":"You should now be able to see the processes that caused the largest amount of read disk I/O during <bpt id=\"p1\">**</bpt>post on/off<ept id=\"p1\">**</ept>."},{"content":"Identify the top three processes that are contributing to disk reads and that are not Windows components.","pos":[8447,8552]},{"pos":[8606,8703],"content":"In the table view, expand the <bpt id=\"p1\">**</bpt>Path Tree<ept id=\"p1\">**</ept> row for <bpt id=\"p2\">**</bpt>ImageSTUART.exe<ept id=\"p2\">**</ept>, and navigate through it."},{"pos":[8753,8958],"content":"In the preceding example, <bpt id=\"p1\">**</bpt>ImageSTUART.exe<ept id=\"p1\">**</ept> reads 13.5 MB of data from disk when launched during <bpt id=\"p2\">**</bpt>post on/off<ept id=\"p2\">**</ept>, and most of the accesses are made reading DLL components in the <bpt id=\"p3\">**</bpt>Program Files<ept id=\"p3\">**</ept> folder."},{"content":"Using this information, a software developer should identify his components and processes, and determine if the component size can be reduced, or if the launch code path can be optimized to minimize the amount of data read from disk.","pos":[8960,9193]},{"content":"You can also use this data to identify the 3rd party processes that launched on boot and is causing high disk usage.","pos":[9195,9311]},{"content":"If a process appears to be introducing disk contention, it can then be removed from the image or simply not started at boot time.","pos":[9312,9441]}],"content":"---\ntitle: Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit\ndescription: While the Fast Startup assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.\nMSHAttr:\n- 'PreferredSiteName:MSDN'\n- 'PreferredLib:/library/windows/hardware'\nms.assetid: 85DE99FB-3E14-4A41-BE0A-8EEEBBFD5949\nms.prod: W10\nms.mktglfcycl: operate\nms.sitesec: msdn\n---\n\n# Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit\n\n\nWhile the **Fast Startup** assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute. It’s possible to quickly capture a **Fast Startup** trace using the **Windows Performance Recorder (WPR)** tool.\n\n## Step 1: Open Fast Startup trace using WPA\n\n\n1.  Open **Windows Performance Recorder (WPR)** from the **Start** menu\n\n2.  Modify the tracing configuration.\n\n    1.  Select the **First Level Triage** and **CPU Usage** providers.\n\n    2.  Change the **performance scenario** to **Fast Startup**.\n\n    3.  Change the **Number of iterations** to 1 in order to gather a single trace.\n\n        ![](images/optimizingperformancelab11.png)\n\n3.  Click on **Start**.\n\n4.  Enter a path to save the resulting trace, and click on **Save**.\n\n    -   This will force the system to reboot to gather and save the trace.\n\n5.  Once the system reboots, wait 5 minutes for tracing to finish.\n\nYou now have a trace that can be analyzed with **Windows Performance Analyzer (WPA)**.\n\n## <a href=\"\" id=\"step-2---open-fast-startup-trace-using-wpa\"></a>Step 2: Open Fast Startup trace using WPA\n\n\n1.  Open **Windows Performance Analyzer (WPA)** from the Start menu.\n\n2.  From the **File** menu, open the trace that you created in Step 1.\n\n3.  Open the **Profiles** menu, and click on **Apply…**\n\n    1.  Click on **Browse Catalog…**\n\n    2.  Select **FastStartup.wpaprofile**.\n\n    3.  Click on **Open.**\n\nYou now have applied a visualization profile to the trace in order to get some commonly used graphs (CPU, disk, etc.).\n\n## Step 3: Visualize the activity timeline\n\n\n1.  Look at the **Regions of Interest** graph in the **Deep Analysis** tab\n\n    -   This view provides a timeline overview of all the **Fast Startup** subphases mentioned in Exercise 1.\n\n        ![](images/optimizingperformancelab12.png)\n\n2.  Hovering the mouse over a region bar causes a popup window to appear and provide more information for the region itself.\n\n    -   If you put the mouse over the **Boot Main Path** region, you can see its duration. In the example below, it lasts 13.6 seconds.\n\n        ![](images/optimizingperformancelab13.png)\n\nTake the time to navigate through the regions tree, and look at all the subphases to familiarize yourself with it.\n\nThe time that **Explorer** takes to initialize and finish is the time it takes to create the Windows desktop and make it visible to the user. This phase (and everything happening after, known as **post on/off**) can be impacted by processes started on boot.\n\nSelect a 90 second interval starting at the beginning of Explorer Initialization and zoom in.\n\n![](images/optimizingperformancelab14.png)![](images/optimizingperformancelab15.png)\n\nUnder the **Regions of Interest** graph, there are two other valuable graphs: **CPU Usage (sampled)** and **Disk usage**. They will be used to evaluate the impact that the software preload has on **post on/off** resource consumption and responsiveness.\n\nHigh CPU usage by applications and services can contribute to a poor user experience, such as UI unresponsiveness or video and sound glitches. When a single process uses too much CPU, other processes can be delayed because they must compete for system resources.\n\nWhen a thread uses storage resources, it can increase the duration of the activity. When multiple threads contend for the use of storage, the resulting random disk seeks make delays more significant.\n\n## Step 4: Analyze process CPU usage\n\n\nIn order to evaluate how much CPU time is consumed by a process, focus on the **CPU Usage (sampled)** graph. The data that displays in the **CPU Usage (Sampled)** graph represents samples of CPU activity taken at regular 1 ms sampling intervals. Each row in the table represents a single sample.\n\nAny CPU activity that occurs between samples is not recorded by this sampling method. Therefore, activities of very short duration such as interrupts are not well represented in the **CPU Sampling** graph.\n\nReview the CPU usage for each process to identify the processes that have the highest CPU usage (**Weight** and **%Weight**). To do this, scroll down to the graph **CPU Usage (sampled)**. On the left, view the list of processes. Each active process that is selected on the left displays on the graph.\n\n![](images/optimizingperformancelab16.png)\n\n**Tip:  **\n\nWhile using **WPA** graphs, you can change the view to display both the graph and the table. You can click the **Maximize** button to hide the other graphs displayed on the **Analysis** tab.\n\n![](images/optimizingperformancelab17.png)\n\nIn this example, **ImageSHELLY.exe** consumes 12.4 seconds of CPU time over the interval of 90 seconds currently analyzed. Since the CPU on this system has two cores, this represents a relative percentage of utilization of 6.9%.\n\nUsing this information, you can investigate the specific process that is causing this CPU consumption, or forward these details to the developer who owns this process.\n\nYou can add additional columns to extract more information (right-click on the table column headers):\n\n-   **Thread ID**: Identifier of the thread causing CPU usage\n\n-   **Stack**: Call stack that highlights the code paths and functions that are causing CPU usage\n\n![](images/optimizingperformancelab18.png)\n\nIn the example above, there is only one thread causing most of the CPU usage within the **ImageSHELLY.exe** process: Thread 2612, with 10.77 seconds of CPU activity.\n\nThe stack shows that this activity is coming from the **ImageSTACEY.dll** module.\n\n## Step 5: Analyze process disk usage\n\n\nIn order to evaluate how much disk bandwidth is consumed by a process, focus on the **Disk Usage** graph.\n\n![](images/optimizingperformancelab19.png)\n\nThe columns of interest are:\n\n-   **Pri**: Priority of the disk I/O. The three possible priority levels are: normal, low, and very low.\n\n-   **IO Type**: Type of the I/O. The three possible I/O types are: read, write, and flush.\n\n-   **Process**: Identifier of the process that created the disk I/O.\n\n-   **Path Tree**: Structured tree that represents the locations of the files accessed by the I/O.\n\n-   **Size**: Size (in bytes) of the I/O.\n\n-   **Disk Service time**: Amount of time that it takes for the disk to service the I/O.\n\n-   **IO Time**: Amount of time that the I/O spent in the Windows I/O queue.\n\n    -   **IO Time** is always longer than **Disk Service Time** because an I/O can be queued when there is disk contention or when an I/O dispatcher at a higher priority must be completed first.\n\nAdd these columns and arrange them to obtain this view:\n\n![](images/optimizingperformancelab20.png)\n\n**Post on/off** only takes into account normal priority I/Os. Investigate the information about those disk reads according to process. Disk reads usually account for more disk access time than disk writes on boot, as a lot of data must be read from disk in order to launch processes and services.\n\n1.  Click the color markers beside the **Pri**: Very Low and **Pri**: Low series so that only the normal priority I/Os are visible on the graph.\n\n    ![](images/optimizingperformancelab21.png)\n\n2.  In the table view, expand the **Normal** priority row.\n\n3.  In the table view, expand the rows for **Write**, **Read**, and **Flush**, and then click the header for the **Size** column to sort the contents in decreasing order.\n\n    Your screen should look something like this:\n\n    ![](images/optimizingperformancelab22.png)\n\n    The preceding example shows the following:\n\n    1.  152 MB of data was read from disk at normal priority.\n\n    2.  129 MB of data was written to disk at normal priority.\n\n        -   Those are mainly disk writes to persist the captured ETL trace file on storage.\n\n4.  In the table view, expand the **Read IO Type** row.\n\n    -   You should now be able to see the processes that caused the largest amount of read disk I/O during **post on/off**.\n\n5.  Identify the top three processes that are contributing to disk reads and that are not Windows components.\n\n    ![](images/optimizingperformancelab23.png)\n\n6.  In the table view, expand the **Path Tree** row for **ImageSTUART.exe**, and navigate through it.\n\n    ![](images/optimizingperformancelab24.png)\n\nIn the preceding example, **ImageSTUART.exe** reads 13.5 MB of data from disk when launched during **post on/off**, and most of the accesses are made reading DLL components in the **Program Files** folder.\n\nUsing this information, a software developer should identify his components and processes, and determine if the component size can be reduced, or if the launch code path can be optimized to minimize the amount of data read from disk.\n\nYou can also use this data to identify the 3rd party processes that launched on boot and is causing high disk usage. If a process appears to be introducing disk contention, it can then be removed from the image or simply not started at boot time.\n\n \n\n \n\n\n\n\n\n\n"}