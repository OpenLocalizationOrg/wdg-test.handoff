<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\desktop\winpe-create-apps.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">9ef79007c09fb820e3c0a2b55ec0df1c6bd005ed</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>WinPE: Create Apps</source>
          <target>WinPE: Create Apps</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>WinPE: Create Apps</source>
          <target>WinPE: Create Apps</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>WinPE: Create Apps</source>
          <target>WinPE: Create Apps</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Windows PE (WinPE) is licensed to independent software vendors (ISVs) and original equipment manufacturers (OEMs) to create customized deployment and recovery utilities.</source>
          <target>Windows PE (WinPE) is licensed to independent software vendors (ISVs) and original equipment manufacturers (OEMs) to create customized deployment and recovery utilities.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>This topic provides guidelines for ISVs and OEMs to develop deployment and recovery apps that run in Windows PE.</source>
          <target>This topic provides guidelines for ISVs and OEMs to develop deployment and recovery apps that run in Windows PE.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Windows PE is not a general-purpose operating system.</source>
          <target>Windows PE is not a general-purpose operating system.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>It may not be used for any purpose other than deployment and recovery.</source>
          <target>It may not be used for any purpose other than deployment and recovery.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>It should not be used as a thin client or an embedded operating system.</source>
          <target>It should not be used as a thin client or an embedded operating system.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>There are other Microsoft® products, such as Windows Embedded CE, which may be used for these purposes.</source>
          <target>There are other Microsoft® products, such as Windows Embedded CE, which may be used for these purposes.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Extensibility</source>
          <target>Extensibility</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>The majority of Windows PE apps are fixed-function shell apps that provide their own GUI.</source>
          <target>The majority of Windows PE apps are fixed-function shell apps that provide their own GUI.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Two examples are the Windows Setup app and the Windows Recovery Environment (Windows RE).</source>
          <target>Two examples are the Windows Setup app and the Windows Recovery Environment (Windows RE).</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>If it is acceptable to show a command prompt, then modify Startnet.cmd – this is the most convenient way to automatically start an app.</source>
          <target>If it is acceptable to show a command prompt, then modify Startnet.cmd – this is the most convenient way to automatically start an app.</target>
        </segment>
      </unit>
      <unit id="115">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](winpe-mount-and-customize.md)</data>
        </originalData>
        <segment state="initial">
          <source>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinPE: Mount and Customize</pc>.</source>
          <target>See <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinPE: Mount and Customize</pc>.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>To have your app bypass the command line and start in your GUI, use Winpeshl.exe, Wpeinit.exe, wpeutil.exe, and wpeutil.dll.</source>
          <target>To have your app bypass the command line and start in your GUI, use Winpeshl.exe, Wpeinit.exe, wpeutil.exe, and wpeutil.dll.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Winpeshl.exe, Wpeinit.exe, wpeutil.exe, and wpeutil.dll</source>
          <target>Winpeshl.exe, Wpeinit.exe, wpeutil.exe, and wpeutil.dll</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>By default, Winpeshl.exe is the first process run when Windows PE is booted.</source>
          <target>By default, Winpeshl.exe is the first process run when Windows PE is booted.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>This is specified by the following registry value of type REG<ph dataRef="id1" id="ph1" />SZ.</source>
          <target>This is specified by the following registry value of type REG<ph dataRef="id1" id="ph1" />SZ.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Winpeshl.exe searches for a file called Winpeshl.ini.</source>
          <target>Winpeshl.exe searches for a file called Winpeshl.ini.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>If the file does not exist, Winpeshl.exe starts a Cmd.exe process that executes the Startnet.cmd script.</source>
          <target>If the file does not exist, Winpeshl.exe starts a Cmd.exe process that executes the Startnet.cmd script.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>If Winpeshl.ini does exist and it contains apps to launch, these apps are executed instead of Cmd.exe.</source>
          <target>If Winpeshl.ini does exist and it contains apps to launch, these apps are executed instead of Cmd.exe.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Wpeinit.exe installs Plug and Play (PnP) devices, starting the networking stack, and processing Unattend.xml settings when Windows PE starts.</source>
          <target>Wpeinit.exe installs Plug and Play (PnP) devices, starting the networking stack, and processing Unattend.xml settings when Windows PE starts.</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpeinit-and-startnetcmd-using-winpe-startup-scripts.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeinit and Startnet.cmd: Using WinPE Startup Scripts</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeinit and Startnet.cmd: Using WinPE Startup Scripts</pc>.</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpeutil-command-line-options.md)</data>
        </originalData>
        <segment state="initial">
          <source>Networking can be started at any time by running either by allowing Wpeinit.exe to run when Windows PE starts, or by running the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeutil Command-Line Options</pc> command.</source>
          <target>Networking can be started at any time by running either by allowing Wpeinit.exe to run when Windows PE starts, or by running the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeutil Command-Line Options</pc> command.</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=203026)</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/?LinkId=203027)</data>
        </originalData>
        <segment state="initial">
          <source>Customized shell apps can call directly into Wpeutil.dll with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadLibrary</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetProcAddress</pc> functions.</source>
          <target>Customized shell apps can call directly into Wpeutil.dll with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LoadLibrary</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GetProcAddress</pc> functions.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=203028)</data>
        </originalData>
        <segment state="initial">
          <source>For related information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INFO: Alternatives to Using GetProcAddress() With LoadLibrary()</pc>.</source>
          <target>For related information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">INFO: Alternatives to Using GetProcAddress() With LoadLibrary()</pc>.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=203029)</data>
        </originalData>
        <segment state="initial">
          <source>Each of the functions exported by Wpeutil.dll has the same function signature as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinMain Function</pc>, as illustrated in the following code sample.</source>
          <target>Each of the functions exported by Wpeutil.dll has the same function signature as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WinMain Function</pc>, as illustrated in the following code sample.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>The following code sample illustrates how to initialize networking.</source>
          <target>The following code sample illustrates how to initialize networking.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](wpeutil-command-line-options.md)</data>
        </originalData>
        <segment state="initial">
          <source>For a complete list of Wpeutil.dll exports, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeutil Command-Line Options</pc>.</source>
          <target>For a complete list of Wpeutil.dll exports, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Wpeutil Command-Line Options</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Visual Studio project settings</source>
          <target>Visual Studio project settings</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Some basic Visual Studio project settings may be different from the defaults created by the Visual Studio Project Wizard.</source>
          <target>Some basic Visual Studio project settings may be different from the defaults created by the Visual Studio Project Wizard.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Ensure that you set up your project’s build settings to produce apps and DLLs that are compatible with Windows PE, as follows:</source>
          <target>Ensure that you set up your project’s build settings to produce apps and DLLs that are compatible with Windows PE, as follows:</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>You must develop Windows PE apps with native C or C++ code that does not use MFC or ATL.</source>
          <target>You must develop Windows PE apps with native C or C++ code that does not use MFC or ATL.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Therefore, if you use the Visual Studio Project Wizard, choose a Win32 project and make sure that neither MFC nor ATL are checked.</source>
          <target>Therefore, if you use the Visual Studio Project Wizard, choose a Win32 project and make sure that neither MFC nor ATL are checked.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Set your project options to link to the static C/C++ runtime libraries, not the .dll version of Msvcrt.dll.</source>
          <target>Set your project options to link to the static C/C++ runtime libraries, not the .dll version of Msvcrt.dll.</target>
        </segment>
      </unit>
      <unit id="137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>Open your project properties and set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configuration Properties <ph dataRef="id3" id="ph1" /> C/C++ RunTime Library</pc> to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Multi-threaded</pc> or <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Multi-threaded debug</pc>, not one of the .dll versions.</source>
          <target>Open your project properties and set <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configuration Properties <ph dataRef="id3" id="ph1" /> C/C++ RunTime Library</pc> to <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Multi-threaded</pc> or <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Multi-threaded debug</pc>, not one of the .dll versions.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>If you do not perform this step, your app might not run on Windows PE.</source>
          <target>If you do not perform this step, your app might not run on Windows PE.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>If you plan to host your app on the 64-bit version of Windows PE, set the project build options to compile all binaries with the x64 compiler in Visual Studio.</source>
          <target>If you plan to host your app on the 64-bit version of Windows PE, set the project build options to compile all binaries with the x64 compiler in Visual Studio.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>If you plan to host your app on the 32-bit version of Windows PE, set the project options to compile with the x86 compiler.</source>
          <target>If you plan to host your app on the 32-bit version of Windows PE, set the project options to compile with the x86 compiler.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Ensure that your project does not have the /clr: compiler option set.</source>
          <target>Ensure that your project does not have the /clr: compiler option set.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>This option produces managed C++ code, which will not run on Windows PE.</source>
          <target>This option produces managed C++ code, which will not run on Windows PE.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Warning</source>
          <target>Warning</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Your app can use customized .dll files that you write or license from a third party.</source>
          <target>Your app can use customized .dll files that you write or license from a third party.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Add these .dll files to your app for Windows PE.</source>
          <target>Add these .dll files to your app for Windows PE.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>However, do not use Msvcrt.dll and do not include additional Windows .dll files that are not part of Windows PE.</source>
          <target>However, do not use Msvcrt.dll and do not include additional Windows .dll files that are not part of Windows PE.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>API Compatibility reference</source>
          <target>API Compatibility reference</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Windows PE is a lightweight, bootstrap operating system based on a subset of components from the Windows operating system.</source>
          <target>Windows PE is a lightweight, bootstrap operating system based on a subset of components from the Windows operating system.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>It is designed to host deployment and recovery apps.</source>
          <target>It is designed to host deployment and recovery apps.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>As such, it contains many Windows binaries that are needed to host the APIs that are most important to these classes of app.</source>
          <target>As such, it contains many Windows binaries that are needed to host the APIs that are most important to these classes of app.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Due to size and other design constraints, not all Windows binaries are present in Windows PE, and therefore not all Windows APIs are present or usable.</source>
          <target>Due to size and other design constraints, not all Windows binaries are present in Windows PE, and therefore not all Windows APIs are present or usable.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Supported APIs in Windows PE</source>
          <target>Supported APIs in Windows PE</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>The following APIs are supported in Windows PE:</source>
          <target>The following APIs are supported in Windows PE:</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=330240)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows API sets (Mincore.lib)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows API sets (Mincore.lib)</pc>.</target>
        </segment>
      </unit>
      <unit id="155">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=330239)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deployment Image Servicing and Management (DISM) API (Dismapi.lib)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deployment Image Servicing and Management (DISM) API (Dismapi.lib)</pc>.</target>
        </segment>
      </unit>
      <unit id="156">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/?LinkId=330241)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Imaging APIs for Windows (Wimgapi.lib)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Imaging APIs for Windows (Wimgapi.lib)</pc>.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>If an API behaves the same as it does on the full Windows operating system and as documented in the Windows SDK for Windows operating system, it will be considered supported and can be used by apps unless otherwise noted.</source>
          <target>If an API behaves the same as it does on the full Windows operating system and as documented in the Windows SDK for Windows operating system, it will be considered supported and can be used by apps unless otherwise noted.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Because Windows PE is based on components from Windows, it contains a significant subset of Windows APIs that are published in the Windows SDK for Windows operating system.</source>
          <target>Because Windows PE is based on components from Windows, it contains a significant subset of Windows APIs that are published in the Windows SDK for Windows operating system.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>The parameters, calling conventions, and behaviors of these supported APIs will be the same or nearly the same as on the full Windows operating system, unless they are affected by the unique Windows PE environment.</source>
          <target>The parameters, calling conventions, and behaviors of these supported APIs will be the same or nearly the same as on the full Windows operating system, unless they are affected by the unique Windows PE environment.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Apps using only these APIs should be portable between the full Windows operating system and Windows PE.</source>
          <target>Apps using only these APIs should be portable between the full Windows operating system and Windows PE.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>In some cases, a subset of the possible parameter values will be usable on Windows PE.</source>
          <target>In some cases, a subset of the possible parameter values will be usable on Windows PE.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>This may be due to conditions unique to the runtime environment, such as running on a read-only medium, not having access to persistent state, or other design limitations.</source>
          <target>This may be due to conditions unique to the runtime environment, such as running on a read-only medium, not having access to persistent state, or other design limitations.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>In this case, the API may not be supported, but may still be used to accomplish a specific task if there is no other alternative.</source>
          <target>In this case, the API may not be supported, but may still be used to accomplish a specific task if there is no other alternative.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>In general, if an API works incorrectly or not at all on Windows PE, it is not supported and must not be used, even if it resides in a binary that is included in Windows PE.</source>
          <target>In general, if an API works incorrectly or not at all on Windows PE, it is not supported and must not be used, even if it resides in a binary that is included in Windows PE.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>The API may be failing because Windows PE is a subset of the Windows operating system, or because of the runtime design considerations unique to Windows PE.</source>
          <target>The API may be failing because Windows PE is a subset of the Windows operating system, or because of the runtime design considerations unique to Windows PE.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Such failures are not considered bugs in Windows PE.</source>
          <target>Such failures are not considered bugs in Windows PE.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Because many Windows components are not present in Windows PE, many APIs are not available.</source>
          <target>Because many Windows components are not present in Windows PE, many APIs are not available.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>They may be completely missing because the Windows binary in which they reside is not present.</source>
          <target>They may be completely missing because the Windows binary in which they reside is not present.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Alternatively, they may be only partially present because although the Windows binary in which they reside is present, one or more binaries they depend on are not.</source>
          <target>Alternatively, they may be only partially present because although the Windows binary in which they reside is present, one or more binaries they depend on are not.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>In addition, some APIs that are present in Windows PE do not work correctly and behave differently than they do in Windows.</source>
          <target>In addition, some APIs that are present in Windows PE do not work correctly and behave differently than they do in Windows.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>These APIs are unsupported and must not be used, because their behavior on Windows PE is undefined.</source>
          <target>These APIs are unsupported and must not be used, because their behavior on Windows PE is undefined.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>Sometimes, there may be no suitable API to accomplish a specific task.</source>
          <target>Sometimes, there may be no suitable API to accomplish a specific task.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>To find an alternate solution, you would require different app logic, different algorithm design, or redefinition of the underlying problem.</source>
          <target>To find an alternate solution, you would require different app logic, different algorithm design, or redefinition of the underlying problem.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>WinPE for Windows 10</source>
          <target>WinPE for Windows 10</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>WinPE: Debug Apps</source>
          <target>WinPE: Debug Apps</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>