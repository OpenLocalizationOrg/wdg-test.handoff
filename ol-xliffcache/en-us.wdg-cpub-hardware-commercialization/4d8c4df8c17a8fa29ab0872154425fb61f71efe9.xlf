<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\mobile\developing-custom-oem-flashing-tools.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">4d8c4df8c17a8fa29ab0872154425fb61f71efe9</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Developing custom OEM flashing tools</source>
          <target>Developing custom OEM flashing tools</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Developing custom OEM flashing tools</source>
          <target>Developing custom OEM flashing tools</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Developing custom OEM flashing tools</source>
          <target>Developing custom OEM flashing tools</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>OEMs can use the full flash update (FFU) image format and simple UEFI USB protocols to create custom flashing tools.</source>
          <target>OEMs can use the full flash update (FFU) image format and simple UEFI USB protocols to create custom flashing tools.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](flashing-tools.md)</data>
        </originalData>
        <segment state="initial">
          <source>An OEM custom flashing tool can integrate in with existing systems and support a range of scenarios discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Flashing tools</pc>.</source>
          <target>An OEM custom flashing tool can integrate in with existing systems and support a range of scenarios discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Flashing tools</pc>.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>UEFI flashing application</source>
          <target>UEFI flashing application</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](ffu-image-format.md)</data>
        </originalData>
        <segment state="initial">
          <source>The OEM must flash the device from a UEFI application using a specific image layout that is discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FFU image format</pc>.</source>
          <target>The OEM must flash the device from a UEFI application using a specific image layout that is discussed in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FFU image format</pc>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>This diagram summarizes the communication flow from the PC flashing tool to the device using the UEFI simple Windows Phone I/O protocol.</source>
          <target>This diagram summarizes the communication flow from the PC flashing tool to the device using the UEFI simple Windows Phone I/O protocol.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">\-</data>
          <data id="id2">\-</data>
        </originalData>
        <segment state="initial">
          <source>oem<ph dataRef="id1" id="ph1" />manu<ph dataRef="id2" id="ph2" />simpleio</source>
          <target>oem<ph dataRef="id1" id="ph1" />manu<ph dataRef="id2" id="ph2" />simpleio</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](https://msdn.microsoft.com/windows/hardware/dn917884.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more info on available USB APIs see, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UEFI flashing protocols</pc>.</source>
          <target>For more info on available USB APIs see, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">UEFI flashing protocols</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>PC flashing application</source>
          <target>PC flashing application</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>The image is transferred to the device that is running the UEFI flashing application using a simple PC side client program.</source>
          <target>The image is transferred to the device that is running the UEFI flashing application using a simple PC side client program.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>The PC application establishes a USB connection to the device and writes the data over that connection.</source>
          <target>The PC application establishes a USB connection to the device and writes the data over that connection.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>The validation and verification of the image occurs in the UEFI flashing application running on the device.</source>
          <target>The validation and verification of the image occurs in the UEFI flashing application running on the device.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The following diagram summarizes the overall flow of the OEM custom flashing PC application and the UEFI application.</source>
          <target>The following diagram summarizes the overall flow of the OEM custom flashing PC application and the UEFI application.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\-</data>
          <data id="id2">\-</data>
          <data id="id3">\-</data>
        </originalData>
        <segment state="initial">
          <source>oem<ph dataRef="id1" id="ph1" />manu<ph dataRef="id2" id="ph2" />pc<ph dataRef="id3" id="ph3" />flashing</source>
          <target>oem<ph dataRef="id1" id="ph1" />manu<ph dataRef="id2" id="ph2" />pc<ph dataRef="id3" id="ph3" />flashing</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>This diagram illustrates one possible solution.</source>
          <target>This diagram illustrates one possible solution.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>The OEM is encouraged to modify this approach to create an optimal solution that best suits their needs.</source>
          <target>The OEM is encouraged to modify this approach to create an optimal solution that best suits their needs.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Checking SMBIOS values before flashing</source>
          <target>Checking SMBIOS values before flashing</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>To ensure that the correct image is flashed to the proper device, the OEM must check the SMBIOS system information structure values on the device.</source>
          <target>To ensure that the correct image is flashed to the proper device, the OEM must check the SMBIOS system information structure values on the device.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The check must confirm that the device platform ID values in the image, matches the SMBIOS system information structure values on the phone.</source>
          <target>The check must confirm that the device platform ID values in the image, matches the SMBIOS system information structure values on the phone.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Either the Manufacturer.Family.ProductName.Version or Manufacturer.Family.ProductName from SMBIOS must match the value in the image before flashing can proceed.</source>
          <target>Either the Manufacturer.Family.ProductName.Version or Manufacturer.Family.ProductName from SMBIOS must match the value in the image before flashing can proceed.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>The device platform ID string is shown below.</source>
          <target>The device platform ID string is shown below.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Manufacturer.Family.ProductName.Version</source>
          <target>Manufacturer.Family.ProductName.Version</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Engineering devices and blank device IDs</source>
          <target>Engineering devices and blank device IDs</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>With a new engineering device, the OEM can use the SMBIOS values to determine if it is acceptable to flash an image that contains test signed certificates.</source>
          <target>With a new engineering device, the OEM can use the SMBIOS values to determine if it is acceptable to flash an image that contains test signed certificates.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The OEM may determine that test signed images may have blank system information structure values, where production signed images must have SMBIOS system information structure values that have been populated.</source>
          <target>The OEM may determine that test signed images may have blank system information structure values, where production signed images must have SMBIOS system information structure values that have been populated.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Implementing signed image validation</source>
          <target>Implementing signed image validation</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>FFU images contain elements such as hashes, signatures and catalogs, which must be used to validate the image.</source>
          <target>FFU images contain elements such as hashes, signatures and catalogs, which must be used to validate the image.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](implementing-image-integrity-validation-in-custom-flashing-tools.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Implementing image integrity validation in custom flashing tools</pc>.</source>
          <target>For more info, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Implementing image integrity validation in custom flashing tools</pc>.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>UEFI flashing protocols</source>
          <target>UEFI flashing protocols</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>UEFI USB function protocol</source>
          <target>UEFI USB function protocol</target>
        </segment>
      </unit>
      <unit id="134">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />USBFN<ph dataRef="id4" id="ph2" />IO<ph dataRef="id5" id="ph3" />PROTOCOL</pc>.</source>
          <target>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />USBFN<ph dataRef="id4" id="ph2" />IO<ph dataRef="id5" id="ph3" />PROTOCOL</pc>.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>UEFI simple I/O protocol</source>
          <target>UEFI simple I/O protocol</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />SIMPLE<ph dataRef="id4" id="ph2" />WINPHONE<ph dataRef="id5" id="ph3" />IO<ph dataRef="id6" id="ph4" />PROTOCOL</pc>.</source>
          <target>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />SIMPLE<ph dataRef="id4" id="ph2" />WINPHONE<ph dataRef="id5" id="ph3" />IO<ph dataRef="id6" id="ph4" />PROTOCOL</pc>.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>UEFI check signature protocol</source>
          <target>UEFI check signature protocol</target>
        </segment>
      </unit>
      <unit id="138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />CHECKSIG<ph dataRef="id4" id="ph2" />PROTOCOL</pc>.</source>
          <target>Describes the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EFI<ph dataRef="id3" id="ph1" />CHECKSIG<ph dataRef="id4" id="ph2" />PROTOCOL</pc>.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Flashing tools</source>
          <target>Flashing tools</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Manufacturing</source>
          <target>Manufacturing</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>