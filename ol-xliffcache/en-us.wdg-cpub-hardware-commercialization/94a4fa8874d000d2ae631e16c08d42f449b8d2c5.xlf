<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\using-xperf-profiles.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">94a4fa8874d000d2ae631e16c08d42f449b8d2c5</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Using Xperf Profiles</source>
          <target>Using Xperf Profiles</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Using Xperf Profiles</source>
          <target>Using Xperf Profiles</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Using Xperf Profiles</source>
          <target>Using Xperf Profiles</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>This section shows how to capture traces by using profiles.</source>
          <target>This section shows how to capture traces by using profiles.</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>If you are analyzing memory, consider writing your trace to a file, because ETW writes through and does not disturb the cache.</source>
          <target>If you are analyzing memory, consider writing your trace to a file, because ETW writes through and does not disturb the cache.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>If you are analyzing disk I/O, consider saving your trace into a circular buffer in memory.</source>
          <target>If you are analyzing disk I/O, consider saving your trace into a circular buffer in memory.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>There are also other considerations such as whether you need to capture a long trace, which would not fit into a buffer in memory, or if you only care about the last 5-10 seconds of the trace content.</source>
          <target>There are also other considerations such as whether you need to capture a long trace, which would not fit into a buffer in memory, or if you only care about the last 5-10 seconds of the trace content.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Procedure</source>
          <target>Procedure</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select a profile such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">perf!FileIOProfiles.InBuffer</pc> and use command similar to the following example to display information about it.</source>
          <target>Select a profile such as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">perf!FileIOProfiles.InBuffer</pc> and use command similar to the following example to display information about it.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>This command lists all profiles, followed by the sessions and providers in that profile:</source>
          <target>This command lists all profiles, followed by the sessions and providers in that profile:</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Profile: FileIOProfiles.InBuffer</source>
          <target>Profile: FileIOProfiles.InBuffer</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Sessions: FileIOProfiles.InBuffer.Sessions</source>
          <target>Sessions: FileIOProfiles.InBuffer.Sessions</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>Session: FileIOProfiles.InBuffer.Sessions<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.Kernel<ph dataRef="id3" id="ph3" />0</source>
          <target>Session: FileIOProfiles.InBuffer.Sessions<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.Kernel<ph dataRef="id3" id="ph3" />0</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>Session: FileIOProfiles.InBuffer.Sessions<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.User<ph dataRef="id3" id="ph3" />0</source>
          <target>Session: FileIOProfiles.InBuffer.Sessions<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.User<ph dataRef="id3" id="ph3" />0</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Providers: FileIOProfiles.InBuffer.Providers</source>
          <target>Providers: FileIOProfiles.InBuffer.Providers</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>Provider: FileIOProfiles.InBuffer.Providers<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.Kernel<ph dataRef="id3" id="ph3" />0</source>
          <target>Provider: FileIOProfiles.InBuffer.Providers<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.Kernel<ph dataRef="id3" id="ph3" />0</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">\[</data>
          <data id="id2">\]</data>
          <data id="id3">\[</data>
        </originalData>
        <segment state="initial">
          <source>Provider: FileIOProfiles.InBuffer.Providers<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.User<ph dataRef="id3" id="ph3" />0</source>
          <target>Provider: FileIOProfiles.InBuffer.Providers<ph dataRef="id1" id="ph1" />0<ph dataRef="id2" id="ph2" />.User<ph dataRef="id3" id="ph3" />0</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Assuming that you chose to use a file-based trace, start an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile by using the following command.</source>
          <target>Assuming that you chose to use a file-based trace, start an <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile by using the following command.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>If a problem occurs, an error is reported.</source>
          <target>If a problem occurs, an error is reported.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>For example, starting the same profile twice would result in an error that the session is already running.</source>
          <target>For example, starting the same profile twice would result in an error that the session is already running.</target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Show which <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> loggers have already started for a specific profile by using the following command.</source>
          <target>Show which <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> loggers have already started for a specific profile by using the following command.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The response to this command is similar to the following example.</source>
          <target>The response to this command is similar to the following example.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Session Status for "perf!GeneralProfiles.InSequentialFile":</source>
          <target>Session Status for "perf!GeneralProfiles.InSequentialFile":</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>"NT Kernel Logger" : Running</source>
          <target>"NT Kernel Logger" : Running</target>
        </segment>
      </unit>
      <unit id="125">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>PerfCoreUserSession<ph dataRef="id1" id="ph1" />InSequentialFile : Running</source>
          <target>PerfCoreUserSession<ph dataRef="id1" id="ph1" />InSequentialFile : Running</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Stop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile, save the traces, and then merge them into a trace file, such as Merged.etl, by using the following command.</source>
          <target>Stop the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile, save the traces, and then merge them into a trace file, such as Merged.etl, by using the following command.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>If a problem occurs, an error is reported.</source>
          <target>If a problem occurs, an error is reported.</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Start the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile, overriding, at start time, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MaxBuffers</pc> values for all ETW sessions, for which loggers are to be started to 256.</source>
          <target>Start the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">InSequentialFile</pc> trace profile, overriding, at start time, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MaxBuffers</pc> values for all ETW sessions, for which loggers are to be started to 256.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>To perform this action, use the following command.</source>
          <target>To perform this action, use the following command.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>If a problem occurs, an error is reported.</source>
          <target>If a problem occurs, an error is reported.</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Update <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaxBuffers</pc> values for the active <pc dataRefEnd="id4" dataRefStart="id3" id="p2">InSequentialFile</pc> ETW loggers specified in the trace profile by using the following command.</source>
          <target>Update <pc dataRefEnd="id2" dataRefStart="id1" id="p1">MaxBuffers</pc> values for the active <pc dataRefEnd="id4" dataRefStart="id3" id="p2">InSequentialFile</pc> ETW loggers specified in the trace profile by using the following command.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>No response is displayed after issuing this command.</source>
          <target>No response is displayed after issuing this command.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Xperf Profiles</source>
          <target>Xperf Profiles</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>