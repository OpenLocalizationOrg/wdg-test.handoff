{"nodes":[{"content":"Secure Boot Key Generation and Signing Using HSM (Example)","pos":[35,93]},{"content":"Secure Boot Key Generation and Signing Using HSM (Example)","pos":[202,260]},{"content":"Secure Boot Key Generation and Signing Using HSM (Example)","pos":[269,327]},{"content":"Version 1.3","pos":[330,341]},{"content":"Here's an example of how to generate Secure Boot keys (PK and others) by using a hardware security module (HSM).","pos":[343,455]},{"content":"You'll need to know the Secure Boot Public Key Infrastructure (PKI).","pos":[457,525]},{"content":"For more info, see <bpt id=\"p1\">[</bpt>Windows 8.1 Secure Boot Key Creation and Management Guidance<ept id=\"p1\">](windows-secure-boot-key-creation-and-management-guidance.md)</ept>.","pos":[526,669]},{"pos":[767,779],"content":"Requirements"},{"pos":[879,891],"content":"Tools Needed"},{"content":"certreq.exe – Available Inbox","pos":[897,926]},{"content":"certutil.exe – Available Inbox","pos":[932,962]},{"content":"Signtool.exe – Available in the latest Windows SDK","pos":[968,1018]},{"pos":[1171,1201],"content":"Hardware Security Module (HSM)"},{"content":"The whitepaper demonstrates the key generation using examples from the nCipher (now Thales) PCI HSM model nC1003P/nC3023P/nC3033P and the SafeNet Luna HSMs.","pos":[1203,1359]},{"content":"Most of the concepts apply to other HSM vendors as well.","pos":[1360,1416]},{"content":"For other HSMs, contact your manufacturer for additional instructions on how to tailor your approach with the HSM Cryptographic Service Provider (CSP).","pos":[1418,1569]},{"pos":[1655,1663],"content":"Approach"},{"pos":[1666,1814],"content":"We use the Microsoft certificate creation tool: <bpt id=\"p1\">**</bpt>certreq.exe<ept id=\"p1\">**</ept> to generate the Secure Boot Platform Key (PK) and other keys needed for Secure Boot."},{"content":"The certreq tool can be adapted to use an HSM by providing the Cryptographic Service Provider (CSP) to be the HSM.","pos":[1816,1930]},{"pos":[2128,2173],"content":"Find the Cryptographic Service Provider (CSP)"},{"content":"You can use either the certutil.exe tool or a tool used by the HSM to list the CSPs.","pos":[2175,2259]},{"content":"This example uses the certutil tool to show the CSPs on the Thales/nCipher HSM:","pos":[2267,2346]},{"content":"For the SHA-256 digesting algorithm, use the <bpt id=\"p1\">**</bpt>CNG<ept id=\"p1\">**</ept> provider: <ph id=\"ph1\">`\"nCipher Security World Key Storage Provider\"`</ph>.","pos":[3729,3840]},{"content":"Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.","pos":[3841,3927]},{"content":"This example uses the built-in Thales/nCipher tool to list the CSP:","pos":[3935,4002]},{"content":"For the SHA-256 digesting algorithm, use the <bpt id=\"p1\">**</bpt>CNG<ept id=\"p1\">**</ept> provider: <ph id=\"ph1\">`\"nCipher Security World Key Storage Provider\"`</ph>.","pos":[4337,4448]},{"content":"Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.","pos":[4449,4535]},{"content":"This example uses the SafeNet Luna HSMs tool to list the CSP:","pos":[4543,4604]},{"content":"For SHA-256 digest algorithm you will need to use a CNG provider – “SafeNet Key Storage Provider”.","pos":[6476,6574]},{"content":"Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.","pos":[6575,6661]},{"content":"To generate the key:","pos":[6663,6683]},{"content":"Sample request.inf file:","pos":[6737,6761]},{"content":"Update the following values:","pos":[7203,7231]},{"pos":[7237,7380],"content":"<bpt id=\"p1\">**</bpt>Subject:<ept id=\"p1\">**</ept> Replace the TODO’s with real data <ph id=\"ph1\">`\"CN=Corporation TODO Platform Key,O=TODO Corporation,L=TODO_City,S=TODO_State,C=TODO_Country\"`</ph>."},{"content":"<bpt id=\"p1\">**</bpt>ValidityPeriod, ValidityPeriodUnits:<ept id=\"p1\">**</ept> Use the validity period of 6 years.","pos":[7386,7462]},{"content":"While a PK may only be valid for 2 years, the 6-year period allows for potential future servicing.","pos":[7463,7561]},{"content":"<bpt id=\"p1\">**</bpt>KeyContainer:<ept id=\"p1\">**</ept> Enter the container id that you used to create the Key with the HSM.","pos":[7567,7653]},{"content":"You may be asked to provide the tokens that you have used to create the Security World for the Thales HSM.","pos":[7654,7760]},{"pos":[7931,7967],"content":"Validating certificate (self-signed)"},{"content":"Verify that the certificate has been generated correctly:","pos":[7969,8026]},{"pos":[8111,8123],"content":"For example:"},{"content":"Sample output:","pos":[8185,8199]},{"pos":[12860,12886],"content":"Backing up the certificate"},{"content":"We recommend backing up your certificates.","pos":[12888,12930]},{"content":"This way, if either the certificate store or the server goes down, you can add the certificate back to the store.","pos":[12931,13044]},{"content":"For more info on certreq.exe, see <bpt id=\"p1\">[</bpt>Advanced Certificate Enrollment and Management: Appendix 3: Certreq.exe Syntax<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=317912)</ept>","pos":[13045,13206]},{"content":"Note, the PK is a self-signed certificate, and is also used to sign the KEK.","pos":[13208,13284]},{"content":"There are 2 parts to PK signing / initial provisioning.","pos":[13286,13341]},{"content":"Please talk to your Microsoft contact to get these scripts:","pos":[13342,13401]},{"content":".","pos":[13466,13467]},{"content":"Used by the signtool to sign the PK comes later in the servicing case.","pos":[13468,13538]},{"content":".","pos":[13582,13583]},{"content":"Since we are dealing with the HSM case, the following line applies in the script applies.","pos":[13584,13673]},{"pos":[13879,13927],"content":"Signing with PK certificate (servicing scenario)"},{"content":"This section applies to signing with your PK certificate and may not be applicable for initial provisioning of system.","pos":[13930,14048]},{"content":"However, you can use the method here to test your service scenario.","pos":[14049,14116]},{"pos":[14290,14327],"content":"Determine the certificate hash (sha1)"},{"content":"Determine the SHA1 hash of the certificate.","pos":[14329,14372]},{"content":"You can get the SHA1 hash by using either of the following methods:","pos":[14373,14440]},{"pos":[14446,14556],"content":"In Windows, open the <bpt id=\"p1\">**</bpt>Certificate<ept id=\"p1\">**</ept> file, select the <bpt id=\"p2\">**</bpt>Details<ept id=\"p2\">**</ept> tab, and check the value for <bpt id=\"p3\">**</bpt>Thumbprint<ept id=\"p3\">**</ept>."},{"content":"Or use the following command:","pos":[14562,14591]},{"content":"Sample output:","pos":[14660,14674]},{"pos":[15595,15665],"content":"Sign with signtool with the certificate store specified as a reference"},{"content":"Use the SHA1 hash to sign the KEK certificate:","pos":[15667,15713]},{"content":"Where KEK.bin is the filename of the binary certificate you want to sign.","pos":[15891,15964]},{"content":"Sample output:","pos":[15966,15980]},{"pos":[16339,16560],"content":"For more info, see <bpt id=\"p1\">[</bpt>Sign Tool (SignTool.exe)<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=317911)</ept> and <bpt id=\"p2\">[</bpt>Windows 8.1 Secure Boot Key Creation and Management Guidance<ept id=\"p2\">](windows-secure-boot-key-creation-and-management-guidance.md)</ept>."},{"pos":[16772,16822],"content":"Appendix A – Using Thales KeySafe for viewing keys"},{"content":"Thales KeySafe is based on a GUI.","pos":[16825,16858]},{"content":"To use KeySafe, you must have installed JRE/JDK 1.4.2, 1.5, or 1.6.","pos":[16860,16927]},{"content":"Install Java before you install the nCipher software.","pos":[16928,16981]},{"pos":[16983,17062],"content":"Configure the hardserver config file under the <ph id=\"ph1\">`%NFAST_KMDATA%\\config\\`</ph> folder:"},{"pos":[17064,17110],"content":"Edit settings in the <ph id=\"ph1\">`server_startup`</ph> section:"},{"content":"<bpt id=\"p1\">**</bpt>nonpriv<ph id=\"ph1\">\\_</ph>port<ept id=\"p1\">**</ept>.","pos":[17112,17130]},{"content":"This field specifies the port on which the hardserver listens for local non-privileged TCP connections.","pos":[17131,17234]},{"content":"Default to connecting to port 9000.","pos":[17240,17275]},{"pos":[17281,17381],"content":"If the <ph id=\"ph1\">`NFAST_SERVER_PORT`</ph> environment variable is set, it overrides any value set for nonpriv<ph id=\"ph2\">\\_</ph>port"},{"content":"priv<ph id=\"ph1\">\\_</ph>port.","pos":[17385,17396]},{"content":"This field specifies the port on which the hardserver listens for local privileged TCP connections.","pos":[17399,17498]},{"content":"Default to connecting to port 9001.","pos":[17504,17539]},{"pos":[17545,17646],"content":"If the <ph id=\"ph1\">`NFAST_SERVER_PRIVPORT`</ph> environment variable is set, it overrides any value set for priv<ph id=\"ph2\">\\_</ph>port"},{"content":"The following are screenshots from the Thales KeySafe GUI:","pos":[17648,17706]},{"content":"screen shot of thales keysafe key operations menu","pos":[17710,17759]},{"content":"The following image is generated by launching the KeySafe utility and then navigating to the KeyList menu.","pos":[17806,17912]},{"content":"screen shot of thales keysafe keylist menu","pos":[17916,17958]},{"content":"For more info, see the nCipher/Thales Users Guide.","pos":[18005,18055]},{"pos":[18267,18317],"content":"Appendix B: Using SafeNet CMU Utility to view keys"},{"content":"For more details, please consult the SafeNet Luna HSM documentation.","pos":[18320,18388]},{"pos":[20066,20080],"content":"Related topics"},{"content":"Windows 8.1 Secure Boot Key Creation and Management Guidance","pos":[20084,20144]},{"content":"Secure Boot Overview","pos":[20209,20229]}],"content":"---\nauthor: Justinha\nDescription: 'Secure Boot Key Generation and Signing Using HSM (Example)'\nms.assetid: b776b30c-28b5-4300-932a-a35a2e489074\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: 'Secure Boot Key Generation and Signing Using HSM (Example)'\n---\n\n# Secure Boot Key Generation and Signing Using HSM (Example)\n\n\nVersion 1.3\n\nHere's an example of how to generate Secure Boot keys (PK and others) by using a hardware security module (HSM).\n\nYou'll need to know the Secure Boot Public Key Infrastructure (PKI). For more info, see [Windows 8.1 Secure Boot Key Creation and Management Guidance](windows-secure-boot-key-creation-and-management-guidance.md).\n\n## <span id=\"Requirements\"></span><span id=\"requirements\"></span><span id=\"REQUIREMENTS\"></span>Requirements\n\n\n### <span id=\"Tools_Needed\"></span><span id=\"tools_needed\"></span><span id=\"TOOLS_NEEDED\"></span>Tools Needed\n\n-   certreq.exe – Available Inbox\n\n-   certutil.exe – Available Inbox\n\n-   Signtool.exe – Available in the latest Windows SDK\n\n### <span id=\"Hardware_Security_Module__HSM_\"></span><span id=\"hardware_security_module__hsm_\"></span><span id=\"HARDWARE_SECURITY_MODULE__HSM_\"></span>Hardware Security Module (HSM)\n\nThe whitepaper demonstrates the key generation using examples from the nCipher (now Thales) PCI HSM model nC1003P/nC3023P/nC3033P and the SafeNet Luna HSMs. Most of the concepts apply to other HSM vendors as well.\n\nFor other HSMs, contact your manufacturer for additional instructions on how to tailor your approach with the HSM Cryptographic Service Provider (CSP).\n\n## <span id=\"Approach\"></span><span id=\"approach\"></span><span id=\"APPROACH\"></span>Approach\n\n\nWe use the Microsoft certificate creation tool: **certreq.exe** to generate the Secure Boot Platform Key (PK) and other keys needed for Secure Boot.\n\nThe certreq tool can be adapted to use an HSM by providing the Cryptographic Service Provider (CSP) to be the HSM.\n\n### <span id=\"Find_the_Cryptographic_Service_Provider__CSP_\"></span><span id=\"find_the_cryptographic_service_provider__csp_\"></span><span id=\"FIND_THE_CRYPTOGRAPHIC_SERVICE_PROVIDER__CSP_\"></span>Find the Cryptographic Service Provider (CSP)\n\nYou can use either the certutil.exe tool or a tool used by the HSM to list the CSPs.\n\n-   **This example uses the certutil tool to show the CSPs on the Thales/nCipher HSM:**\n\n    ``` syntax\n    C:\\secureboot_training\\certreq> certutil -csplist\n    Provider Name: Microsoft Base Cryptographic Provider v1.0\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\n    Provider Type: 13 - PROV_DSS_DH\n\n    Provider Name: Microsoft Base DSS Cryptographic Provider\n    Provider Type: 3 - PROV_DSS\n\n    Provider Name: Microsoft Base Smart Card Crypto Provider\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft DH SChannel Cryptographic Provider\n    Provider Type: 18 - PROV_DH_SCHANNEL\n\n    Provider Name: Microsoft Enhanced Cryptographic Provider v1.0\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\n    Provider Type: 13 - PROV_DSS_DH\n\n    Provider Name: Microsoft Enhanced RSA and AES Cryptographic Provider\n    Provider Type: 24 - PROV_RSA_AES\n\n    Provider Name: Microsoft RSA SChannel Cryptographic Provider\n    Provider Type: 12 - PROV_RSA_SCHANNEL\n\n    Provider Name: Microsoft Strong Cryptographic Provider\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Software Key Storage Provider\n\n    Provider Name: nCipher Security World Key Storage Provider\n\n    Provider Name: Microsoft Smart Card Key Storage Provider\n    CertUtil: -csplist command completed successfully.\n    ```\n\n    For the SHA-256 digesting algorithm, use the **CNG** provider: `\"nCipher Security World Key Storage Provider\"`. Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.\n\n-   **This example uses the built-in Thales/nCipher tool to list the CSP:**\n\n    ``` syntax\n    C:\\Program Files\\nCipher\\nfast\\bin> cnglist --list-providers\n    Microsoft Primitive Provider\n    Microsoft Smart Card Key Storage Provider\n    Microsoft Software Key Storage Provider\n    Microsoft SSL Protocol Provider\n    nCipher Primitive Provider\n    nCipher Security World Key Storage Provider\n    ```\n\n    For the SHA-256 digesting algorithm, use the **CNG** provider: `\"nCipher Security World Key Storage Provider\"`. Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.\n\n-   **This example uses the SafeNet Luna HSMs tool to list the CSP:**\n\n    ``` syntax\n    C:\\>certutil –csplist\n    ------------------------------------------------------------------------------------------\n    Provider Name: Luna Cryptographic Services for Microsoft Windows\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Luna enhanced RSA and AES provider for Microsoft Windows\n    Provider Type: 24 - PROV_RSA_AES\n\n    Provider Name: Luna SChannel Cryptographic Services for Microsoft Windows\n    Provider Type: 12 - PROV_RSA_SCHANNEL\n\n    Provider Name: Microsoft Base Cryptographic Provider v1.0\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Base DSS and Diffie-Hellman Cryptographic Provider\n    Provider Type: 13 - PROV_DSS_DH\n\n    Provider Name: Microsoft Base DSS Cryptographic Provider\n    Provider Type: 3 - PROV_DSS\n\n    Provider Name: Microsoft Base Smart Card Crypto Provider\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft DH SChannel Cryptographic Provider\n    Provider Type: 18 - PROV_DH_SCHANNEL\n\n    Provider Name: Microsoft Enhanced Cryptographic Provider v1.0\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider\n    Provider Type: 13 - PROV_DSS_DH\n\n    Provider Name: Microsoft Enhanced RSA and AES Cryptographic Provider\n    Provider Type: 24 - PROV_RSA_AES\n\n    Provider Name: Microsoft RSA SChannel Cryptographic Provider\n    Provider Type: 12 - PROV_RSA_SCHANNEL\n\n    Provider Name: Microsoft Strong Cryptographic Provider\n    Provider Type: 1 - PROV_RSA_FULL\n\n    Provider Name: Microsoft Software Key Storage Provider\n\n    Provider Name: Microsoft Smart Card Key Storage Provider\n\n    Provider Name: SafeNet Key Storage Provider\n    CertUtil: -csplist command completed successfully.\n    ------------------------------------------------------------------------------------------\n    ```\n\n    For SHA-256 digest algorithm you will need to use a CNG provider – “SafeNet Key Storage Provider”. Legacy providers do not support SHA-256 and are not suitable for use with Secure Boot.\n\nTo generate the key:\n\n``` syntax\ncertreq.exe -new request.inf PK.cer\n```\n\nSample request.inf file:\n\n``` syntax\n[Version]\nSignature= \"$Windows NT$\"\n[NewRequest]\nValidityPeriod = Years\nValidityPeriodUnits = 6\nSubject = \"CN=Corporation TODO Platform Key,O=TODO Corporation,L=TODO_City,S=TODO_State,C=TODO_Country\"\nMachineKeySet = true\nRequestType=Cert\nExportable =  FALSE \nHashAlgorithm = SHA256\nKeyAlgorithm = RSA\nKeyLength = 2048\nKeyContainer = \"PKContainer\"\nProviderName = \"nCipher Security World Key Storage Provider\"\nKeyUsage = 0xf0\n```\n\nUpdate the following values:\n\n-   **Subject:** Replace the TODO’s with real data `\"CN=Corporation TODO Platform Key,O=TODO Corporation,L=TODO_City,S=TODO_State,C=TODO_Country\"`.\n\n-   **ValidityPeriod, ValidityPeriodUnits:** Use the validity period of 6 years. While a PK may only be valid for 2 years, the 6-year period allows for potential future servicing.\n\n-   **KeyContainer:** Enter the container id that you used to create the Key with the HSM. You may be asked to provide the tokens that you have used to create the Security World for the Thales HSM.\n\n### <span id=\"Validating_certificate__self-signed_\"></span><span id=\"validating_certificate__self-signed_\"></span><span id=\"VALIDATING_CERTIFICATE__SELF-SIGNED_\"></span>Validating certificate (self-signed)\n\nVerify that the certificate has been generated correctly:\n\n``` syntax\ncertutil –store –v my  \"<Certificate_serial_number_or_thumbprint>\"\n```\n\nFor example: `certutil –store –v my  \"7569d364a2e77b814274c81ae6360ffe\"`\n\nSample output:\n\n``` syntax\nmy\n================ Certificate 16 ================\nX509 Certificate:\nVersion: 3\nSerial Number: 7569d364a2e77b814274c81ae6360ffe\nSignature Algorithm:\n    Algorithm ObjectId: 1.2.840.113549.1.1.11 sha256RSA\n    Algorithm Parameters:\n    05 00\nIssuer:\n    CN=test self-signed\n\n NotBefore: 1/21/2013 7:25 PM\n NotAfter: 1/21/2015 7:35 PM\n\nSubject:\n    CN=test self-signed\n\nPublic Key Algorithm:\n    Algorithm ObjectId: 1.2.840.113549.1.1.1 RSA (RSA_SIGN)\n    Algorithm Parameters:\n    05 00\nPublic Key Length: 2048 bits\nPublic Key: UnusedBits = 0\n    0000  30 82 01 0a 02 82 01 01  00 cf e3 83 c7 a4 05 dd\n    0010  be 05 76 b6 26 16 ae ba  0f a1 c6 3f 4f 58 11 2a\n    0020  4c fe fc 44 f5 d2 11 36  75 c8 c9 90 15 d3 06 94\n    0030  18 ea 10 d8 4c 77 60 1f  45 75 25 6f 21 08 84 d3\n    0040  8f 6f 70 07 1b 3e eb 26  94 b8 aa 0d fd 0c 13 f1\n    0050  7f 76 0c 33 a4 ad b4 7a  f3 c1 f1 d8 c9 a0 ba d2\n    0060  c5 9e 2b ce 36 7e 34 9b  81 26 74 0b 32 47 48 48\n    0070  08 ab c0 e7 c3 a2 8e e4  1f b8 6f 38 a2 31 84 65\n    0080  75 67 db 01 fc 41 a8 98  83 ad ba 2f 4e 59 c3 6b\n    0090  93 84 e0 ab de bd 6f 8f  61 9b b3 42 b3 fb 19 f7\n    00a0  46 3a ad d7 e9 d1 fa 2b  a7 72 8d 76 ac 9f 6d c3\n    00b0  79 ba 37 e4 6d 72 b1 6f  22 82 80 77 a7 92 3f b7\n    00c0  e2 1f e0 c6 90 9a 82 ef  40 47 29 fb c3 83 7e 38\n    00d0  01 35 1f 66 6c 1b 93 0d  c2 fc 5c e2 4e bd e1 85\n    00e0  c3 7e a9 51 6f 57 82 86  37 79 92 63 b2 e0 42 4f\n    00f0  25 5c 1b 03 50 29 2d ee  40 31 c3 a1 c3 cf 62 31\n    0100  e0 8c 60 2f d4 34 56 f1  bf 02 03 01 00 01\nCertificate Extensions: 2\n    2.5.29.15: Flags = 1(Critical), Length = 4\n    Key Usage\n        Digital Signature, Non-Repudiation, Key Encipherment, Data Encipherment (f0)\n\n    2.5.29.14: Flags = 0, Length = 16\n    Subject Key Identifier\n        5b 3b 53 ed e3 0f a9 48 90 e0 93 09 0f f9 7b 32 3a 8d 89 4f\n\nSignature Algorithm:\n    Algorithm ObjectId: 1.2.840.113549.1.1.11 sha256RSA\n    Algorithm Parameters:\n    05 00\nSignature: UnusedBits=0\n    0000  3c 08 5f e0 a7 42 2a bc  58 61 64 43 b6 f4 23 99\n    0010  ca 58 b1 8c a3 6b eb 9c  31 a0 ce 25 3a d5 b4 74\n    0020  c2 0c 9c 00 1e c8 0f d2  05 3d fc 5d 6f 17 cd ac\n    0030  4d 14 9e d4 2b 45 1e ad  5f 5b ee 23 a8 29 65 b3\n    0040  cd c4 fd 5c e6 6a bd 95  ce f0 f9 be 31 19 87 90\n    0050  f8 86 c4 31 a8 b3 d5 b3  14 24 5b de f8 c0 f9 9c\n    0060  96 a2 b5 89 39 41 bd 4b  5f 04 16 10 c0 5c b8 fb\n    0070  1d 8d 64 b2 87 00 72 46  b9 5e d0 3a 75 8d ea 5a\n    0080  f6 5d 9c c5 03 cd c8 54  b7 7a ef c8 3e 3f 4b f6\n    0090  d2 c7 70 67 29 92 70 44  fc c6 2e c9 42 dd 6e 01\n    00a0  c5 71 27 20 51 ed 34 3c  98 c2 bc 1f 57 16 71 86\n    00b0  24 e3 0e 41 57 82 ba 41  df b5 6d f9 4d e4 72 80\n    00c0  6f 8d ab 10 06 cd 69 6b  d0 82 ac db 04 da 6b a5\n    00d0  83 14 1a a0 6d 90 c4 01  5d 24 68 ac 10 ca db 96\n    00e0  44 8b ef f1 13 7f 22 15  32 93 4e 2d 23 ce 7f fb\n    00f0  18 9f d0 1c c1 45 2c e6  bb 23 7f 9e 22 ea fc 88\nSignature matches Public Key\nRoot Certificate: Subject matches Issuer\nKey Id Hash(rfc-sha1): 5b 3b 53 ed e3 0f a9 48 90 e0 93 09 0f f9 7b 32 3a 8d 89 4f\nKey Id Hash(sha1): 1e 07 bb 05 ce d2 db 9c 9f ab d1 46 b8 32 20 e3 41 dc 4c 08\nCert Hash(md5): 45 ab 9b e4 6e 91 53 b5 96 81 10 8e 01 45 6c 54\nCert Hash(sha1): 37 ed 7c 3e ee 76 a2 d0 42 3a e3 1a 16 9f 74 d0 3c 7f 34 2c\n\n  CERT_REQUEST_ORIGINATOR_PROP_ID(71):\n    VM-DESKTEST.ntdev.corp.microsoft.com\n\n  CERT_KEY_PROV_INFO_PROP_ID(2):\n    Key Container = PKContainer\n    Provider = nCipher Security World Key Storage Provider\n    ProviderType = 0\n    Flags = 20\n    KeySpec = 0\n\n  CERT_SHA1_HASH_PROP_ID(3):\n    37 ed 7c 3e ee 76 a2 d0 42 3a e3 1a 16 9f 74 d0 3c 7f 34 2c\n\n  CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID(25):\n    12 eb 13 79 64 61 08 e9 a6 75 f2 9a 5c 49 b4 f9\n\n  CERT_KEY_IDENTIFIER_PROP_ID(20):\n    5b 3b 53 ed e3 0f a9 48 90 e0 93 09 0f f9 7b 32 3a 8d 89 4f\n\n  CERT_SIGNATURE_HASH_PROP_ID(15):\n       0000  38 c4 1b 14 d8 74 95 42  1b fb 7d 72 d2 0b 03 ad\n    0010  bd e8 aa 19 14 9e a2 41  30 fe b4 d4 93 b6 9f 3b\n\n  CERT_MD5_HASH_PROP_ID(4):\n    45 ab 9b e4 6e 91 53 b5 96 81 10 8e 01 45 6c 54\n  UI Policy = 0\n    Version: 0\n\nPKContainer\n\n  Export Policy = 0\n  Key Usage = 3\n    NCRYPT_ALLOW_DECRYPT_FLAG -- 1\n    NCRYPT_ALLOW_SIGNING_FLAG -- 2\n\n  D:AI(A;ID;FA;;;SY)(A;ID;FA;;;BA)(A;ID;0x1200a9;;;BU)\n\n    Allow WriteNT AUTHORITY\\SYSTEM\n    Allow WriteBUILTIN\\Administrators\n    Allow WriteBUILTIN\\Users\n\nPrivate key is NOT exportable\nSignature test passed\nCertUtil: -store command completed successfully.\n```\n\n### <span id=\"Backing_up_the_certificate\"></span><span id=\"backing_up_the_certificate\"></span><span id=\"BACKING_UP_THE_CERTIFICATE\"></span>Backing up the certificate\n\nWe recommend backing up your certificates. This way, if either the certificate store or the server goes down, you can add the certificate back to the store. For more info on certreq.exe, see [Advanced Certificate Enrollment and Management: Appendix 3: Certreq.exe Syntax](http://go.microsoft.com/fwlink/?LinkId=317912)\n\nNote, the PK is a self-signed certificate, and is also used to sign the KEK.\n\nThere are 2 parts to PK signing / initial provisioning. Please talk to your Microsoft contact to get these scripts:\n\n-   `subcreate_set_PK_example_initial_provisioning_example.ps1`. Used by the signtool to sign the PK comes later in the servicing case.\n\n-   `subcreate_set_PK_service_example.ps1`. Since we are dealing with the HSM case, the following line applies in the script applies.\n\n## <span id=\"Signing_with_PK_certificate__servicing_scenario_\"></span><span id=\"signing_with_pk_certificate__servicing_scenario_\"></span><span id=\"SIGNING_WITH_PK_CERTIFICATE__SERVICING_SCENARIO_\"></span>Signing with PK certificate (servicing scenario)\n\n\nThis section applies to signing with your PK certificate and may not be applicable for initial provisioning of system. However, you can use the method here to test your service scenario.\n\n### <span id=\"Determine_the_certificate_hash__sha1_\"></span><span id=\"determine_the_certificate_hash__sha1_\"></span><span id=\"DETERMINE_THE_CERTIFICATE_HASH__SHA1_\"></span>Determine the certificate hash (sha1)\n\nDetermine the SHA1 hash of the certificate. You can get the SHA1 hash by using either of the following methods:\n\n-   In Windows, open the **Certificate** file, select the **Details** tab, and check the value for **Thumbprint**.\n\n-   Or use the following command:\n\n    ``` syntax\n    C:\\>certutil -store My PKContainer\n    ```\n\n    Sample output:\n\n    ``` syntax\n    My\n    ================ Certificate 5 ================\n    Serial Number: 58efcfd8f929c5bd41152a8ec413051e\n    Issuer: CN=test self-signed\n     NotBefore: 1/30/2013 3:24 PM\n     NotAfter: 1/30/2019 3:34 PM\n    Subject: CN=test self-signed\n    Signature matches Public Key\n    Root Certificate: Subject matches Issuer\n    Template:\n    Cert Hash(sha1): db 31 4d a0 d0 ef 87 d4 2b 42 f7 4b 9c 38 a1 f9 17 3e f7 a2\n      Key Container = PKContainer\n      Provider = nCipher Security World Key Storage Provider\n    Private key is NOT exportable\n    Signature test passed\n    CertUtil: -store command completed successfully.\n    ```\n\n### <span id=\"Sign_with_signtool_with_the_certificate_store_specified_as_a_reference\"></span><span id=\"sign_with_signtool_with_the_certificate_store_specified_as_a_reference\"></span><span id=\"SIGN_WITH_SIGNTOOL_WITH_THE_CERTIFICATE_STORE_SPECIFIED_AS_A_REFERENCE\"></span>Sign with signtool with the certificate store specified as a reference\n\nUse the SHA1 hash to sign the KEK certificate:\n\n``` syntax\nC:\\> signtool.exe  sign /v /fd sha256 /sha1 \"db314da0d0ef87d42b42f74b9c38a1f9173ef7a2\" /sm /p7  .\\ /p7co 1.2.840.113549.1.7.1 /p7ce  DetachedSignedData KEK.bin\n```\n\nWhere KEK.bin is the filename of the binary certificate you want to sign.\n\nSample output:\n\n``` syntax\nThe following certificate was selected:\n    Issued to: test self-signed\n    Issued by: test self-signed\n    Expires:   Fri Jan 30 15:34:32 2019\n    SHA1 hash: DB314DA0D0EF87D42B42F74B9C38A1F9173EF7A2\n\nDone Adding Additional Store\nSuccessfully signed: KEK.bin\n\nNumber of files successfully Signed: 1\nNumber of warnings: 0\nNumber of errors: 0\n```\n\nFor more info, see [Sign Tool (SignTool.exe)](http://go.microsoft.com/fwlink/?LinkId=317911) and [Windows 8.1 Secure Boot Key Creation and Management Guidance](windows-secure-boot-key-creation-and-management-guidance.md).\n\n## <span id=\"Appendix_A___Using_Thales_KeySafe_for_viewing_keys\"></span><span id=\"appendix_a___using_thales_keysafe_for_viewing_keys\"></span><span id=\"APPENDIX_A___USING_THALES_KEYSAFE_FOR_VIEWING_KEYS\"></span>Appendix A – Using Thales KeySafe for viewing keys\n\n\nThales KeySafe is based on a GUI.\n\nTo use KeySafe, you must have installed JRE/JDK 1.4.2, 1.5, or 1.6. Install Java before you install the nCipher software.\n\nConfigure the hardserver config file under the `%NFAST_KMDATA%\\config\\` folder:\n\nEdit settings in the `server_startup` section:\n\n**nonpriv\\_port**. This field specifies the port on which the hardserver listens for local non-privileged TCP connections.\n\n-   Default to connecting to port 9000.\n\n-   If the `NFAST_SERVER_PORT` environment variable is set, it overrides any value set for nonpriv\\_port\n\n**priv\\_port.** This field specifies the port on which the hardserver listens for local privileged TCP connections.\n\n-   Default to connecting to port 9001.\n\n-   If the `NFAST_SERVER_PRIVPORT` environment variable is set, it overrides any value set for priv\\_port\n\nThe following are screenshots from the Thales KeySafe GUI:\n\n![screen shot of thales keysafe key operations menu](images/dep-8-secureboot-hsm-operations.png)\n\nThe following image is generated by launching the KeySafe utility and then navigating to the KeyList menu.\n\n![screen shot of thales keysafe keylist menu](images/dep-8-secureboot-hsm-keylisting.png)\n\nFor more info, see the nCipher/Thales Users Guide.\n\n## <span id=\"Appendix_B__Using_SafeNet_CMU_Utility_to_view_keys\"></span><span id=\"appendix_b__using_safenet_cmu_utility_to_view_keys\"></span><span id=\"APPENDIX_B__USING_SAFENET_CMU_UTILITY_TO_VIEW_KEYS\"></span>Appendix B: Using SafeNet CMU Utility to view keys\n\n\nFor more details, please consult the SafeNet Luna HSM documentation.\n\n``` syntax\nC:\\Program Files\\SafeNet\\LunaClient>cmu list\nPlease enter password for token in slot 1: ********\nhandle=72       label=PKContainer\nhandle=43       label=PKContainer\n\nC:\\Program Files\\SafeNet\\LunaClient>cmu getattribute\nPlease enter password for token in slot 1: ********\nSelect object to query\nHandler Label\n72      PKContainer\n43      PKContainer\nEnter handler (or 0 for exit): 72\nclass=privateKey\ntoken=true\nprivate=true\nlabel=PKContainer\nkeytype=RSA\nsubject=\nid=3081cd300d02050080000010020401000000300c02050080000011020346494d3053020500800\n00014024a660064006400340064006400330061002d0064003900610064002d00340066006200630\n02d0062003000320031002d006300660034006100650064006100650035006400350033000000301\nd0205008000001302140100000000000000000000000000000000000000300d02050080000015020\n400000000300d02050080000016020400000000300d02050080000017020400000000300d0205008\n0000018020400000000\nsensitive=true\ndecrypt=true\nunwrap=true\nsign=true\nderive=false\nstartdate=\nenddate=\nmodulus=b56a518c2744a3341dd1ed27cfe5dc6cabac7d4b820c00d60cb2a4b713f28b3e1836b619\nb61b79be76d1870e09961972c83cc338a2065880ec4f6fb00c48f1f953c7fff132be9df36f13bcda\nf0f873bcfaa81734290f85ff123072b258fb16b0833722af72f90fd29c533153b0ba52d502ab11c4\n81cd6e60733cfa39a811c7ff381ba57081c818881a6bbeeb60091ab9f26f6cd177dcff884d7d9edb\ne69e61b316ef12785f5957a1e6bb0b21497b328e475f82e7efac71815d2c153b5991ebfacf4bb75c\n72afff513a55f68f260f09aa9d687639a24e1ce35fd5588d27c2ff69b7e6c9b5fcb4ec7d55674e85\n45f051d4945ae5d46d958056aaf7e01943eda91d\nmodulusbits=2048\npublicexponent=010001\nextractable=true\nlocal=true\nneverextractable=false\nalwayssensitive=true\nmodifiable=true\n```\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Windows 8.1 Secure Boot Key Creation and Management Guidance](windows-secure-boot-key-creation-and-management-guidance.md)\n\n[Secure Boot Overview](secure-boot-overview.md)\n\n \n\n \n\n\n\n\n\n\n"}