<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\manufacture\mobile\supporting-new-callbacks-for-manufacturing-mode.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ae25ee3cfd473c507a4af2a8760ea251e0456be7</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Supporting new callbacks for manufacturing mode</source>
          <target>Supporting new callbacks for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Supporting new callbacks for manufacturing mode</source>
          <target>Supporting new callbacks for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Supporting new callbacks for manufacturing mode</source>
          <target>Supporting new callbacks for manufacturing mode</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>When running in manufacturing mode, Wi-Fi miniport drivers must add support for the following new callback.</source>
          <target>When running in manufacturing mode, Wi-Fi miniport drivers must add support for the following new callback.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>NDIS<ph dataRef="id1" id="ph1" />STATUS<ph dataRef="id2" id="ph2" />DOT11<ph dataRef="id3" id="ph3" />MANUFACTURING<ph dataRef="id4" id="ph4" />CALLBACK</source>
          <target>NDIS<ph dataRef="id1" id="ph1" />STATUS<ph dataRef="id2" id="ph2" />DOT11<ph dataRef="id3" id="ph3" />MANUFACTURING<ph dataRef="id4" id="ph4" />CALLBACK</target>
        </segment>
      </unit>
      <unit id="106">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback is used to indicate completion status for certain requests.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NDIS<ph dataRef="id3" id="ph1" />STATUS<ph dataRef="id4" id="ph2" />DOT11<ph dataRef="id5" id="ph3" />MANUFACTURING<ph dataRef="id6" id="ph4" />CALLBACK</pc> callback is used to indicate completion status for certain requests.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>The data structure used for this callback is defined here.</source>
          <target>The data structure used for this callback is defined here.</target>
        </segment>
      </unit>
      <unit id="108">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />callback<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />test<ph dataRef="id5" id="ph5" />complete</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />callback<ph dataRef="id3" id="ph3" />self<ph dataRef="id4" id="ph4" />test<ph dataRef="id5" id="ph5" />complete</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
          <data id="id7">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />callback<ph dataRef="id5" id="ph3" />self<ph dataRef="id6" id="ph4" />test<ph dataRef="id7" id="ph5" />complete</pc> is called by the driver when a requested self-test is completed by the driver.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />callback<ph dataRef="id5" id="ph3" />self<ph dataRef="id6" id="ph4" />test<ph dataRef="id7" id="ph5" />complete</pc> is called by the driver when a requested self-test is completed by the driver.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>This callback must return the context for self-test request as well as the self-test result.</source>
          <target>This callback must return the context for self-test request as well as the self-test result.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">\_</data>
          <data id="id9">\_</data>
          <data id="id10">\_</data>
          <data id="id11">\_</data>
          <data id="id12">\_</data>
        </originalData>
        <segment state="initial">
          <source>The driver then calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OID<ph dataRef="id3" id="ph1" />DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> OID with the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">dot11<ph dataRef="id8" id="ph4" />manufacturing<ph dataRef="id9" id="ph5" />test<ph dataRef="id10" id="ph6" />self<ph dataRef="id11" id="ph7" />query<ph dataRef="id12" id="ph8" />result</pc> command to obtain the detailed result of the test.</source>
          <target>The driver then calls the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OID<ph dataRef="id3" id="ph1" />DOT11<ph dataRef="id4" id="ph2" />MANUFACTURING<ph dataRef="id5" id="ph3" />TEST</pc> OID with the <pc dataRefEnd="id7" dataRefStart="id6" id="p2">dot11<ph dataRef="id8" id="ph4" />manufacturing<ph dataRef="id9" id="ph5" />test<ph dataRef="id10" id="ph6" />self<ph dataRef="id11" id="ph7" />query<ph dataRef="id12" id="ph8" />result</pc> command to obtain the detailed result of the test.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
        </originalData>
        <segment state="initial">
          <source>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />callback<ph dataRef="id3" id="ph3" />sleep<ph dataRef="id4" id="ph4" />complete</source>
          <target>dot11<ph dataRef="id1" id="ph1" />manufacturing<ph dataRef="id2" id="ph2" />callback<ph dataRef="id3" id="ph3" />sleep<ph dataRef="id4" id="ph4" />complete</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\_</data>
          <data id="id6">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />callback<ph dataRef="id5" id="ph3" />sleep<ph dataRef="id6" id="ph4" />complete</pc> is called when a requested sleep command is executed by the driver.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">dot11<ph dataRef="id3" id="ph1" />manufacturing<ph dataRef="id4" id="ph2" />callback<ph dataRef="id5" id="ph3" />sleep<ph dataRef="id6" id="ph4" />complete</pc> is called when a requested sleep command is executed by the driver.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>This callback must return the context for the sleep request as well as the status, whether success or failure.</source>
          <target>This callback must return the context for the sleep request as well as the status, whether success or failure.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>This callback is also called by the driver when the application sends a request to wake the driver from a sleep state.</source>
          <target>This callback is also called by the driver when the application sends a request to wake the driver from a sleep state.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Adding Wi-Fi manufacturing test support to the OID interface</source>
          <target>Adding Wi-Fi manufacturing test support to the OID interface</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>