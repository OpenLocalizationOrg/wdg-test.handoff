{"nodes":[{"content":"Windows 10 IoT Core (IoT Core) brings the power of Microsoft Windows together with breadth of the Internet of Things.","pos":[35,152]},{"content":"Developers can now build and provision their own custom Windows 10 images for the IoT Core devices in their ecosystem.","pos":[153,271]},{"content":"IoT Core deployment and imaging","pos":[362,393]},{"content":"IoT Core deployment and imaging","pos":[401,432]},{"content":"Windows 10 IoT Core (IoT Core) brings the power of Microsoft Windows together with breadth of the Internet of Things.","pos":[435,552]},{"content":"Developers can now build and provision their own custom Windows 10 images for the IoT Core devices in their ecosystem.","pos":[553,671]},{"pos":[784,801],"content":"Intended audience"},{"content":"OEMs and ODMs customizing and deploying images for IoT devices.","pos":[804,867]},{"pos":[1055,1097],"content":"Download and install the kits and packages"},{"content":"Before you can create an IoT Core image, you must first install the Windows Assessment and Deployment Kit (ADK) as well as the IoT Core Core OS Packages.","pos":[1100,1253]},{"content":"Download the Windows Assessment and Deployment Kit (ADK)","pos":[1260,1316]},{"pos":[1371,1455],"content":"Download the <bpt id=\"p1\">[</bpt>IoT Core OS Packages<ept id=\"p1\">]( http://go.microsoft.com/fwlink/?LinkId=722759)</ept>."},{"pos":[1457,1654],"content":"When these installations are complete, verify that you have directories called <bpt id=\"p1\">*</bpt>FMFiles<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>MSPackages<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>OEMInputSamples<ept id=\"p3\">*</ept> in your computerâ€™s C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10 directory."},{"pos":[1761,1776],"content":"Create an image"},{"content":"You have two options for tools to use to create an image for IoT Core.","pos":[1779,1849]},{"content":"Create an image with IMGGEN","pos":[1855,1882]},{"content":"Create an image with Windows Imaging and Configuration Designer (ICD).","pos":[1887,1957]},{"content":"Later in this topic, you will also learn how to customize packages, which will require that you create an image using one of these tools.","pos":[1959,2096]},{"content":"Which tool you use is up to you.","pos":[2097,2129]},{"pos":[2309,2348],"content":"Option One: Create an image with IMGGEN"},{"content":"The Deployment and Imaging Tools Environment, or IMGGEN, is a command-line alternative to the Image Configuration Designer.","pos":[2350,2473]},{"content":"Image creation can be automated or completed through scripting using IMGGEN.","pos":[2474,2550]},{"pos":[2556,2690],"content":"Open <bpt id=\"p1\">**</bpt>Deployment and Imaging Tools Environment<ept id=\"p1\">**</ept> application by typing <bpt id=\"p2\">**</bpt>Deployment and Imaging Tools Environment<ept id=\"p2\">**</ept>in the Search bar."},{"pos":[2695,2759],"content":"Set the following environment variables, in the following order:"},{"content":"Execute the following commands based on your device environment:","pos":[2829,2893]},{"content":"Intel Minnowboard Max:","pos":[2904,2926]},{"content":"Raspberry Pi 2 or Qualcomm Dragonboard:","pos":[3056,3095]},{"pos":[3409,3453],"content":"Option Two: Create an image with Windows ICD"},{"pos":[3455,3625],"content":"To create an IoT Core image with Windows ICD, see <bpt id=\"p1\">[</bpt>Build and deploy a Windows 10 IoT Core (IoT Core) image<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/dn916104)</ept>."},{"content":"The following sections describe how to customize the image.","pos":[3627,3686]},{"pos":[3880,3924],"content":"Create customized OEM configuration packages"},{"content":"Regardless of the tool you use to create your image, be it IMGGEN or Windows ICD, you may need to customize packages for the devices you deploy for branding or to enable unique scenarios.","pos":[3927,4114]},{"content":"The applications, certificates, and settings on a device may need to be configured to match your specifications.","pos":[4115,4227]},{"content":"This requires custom packages.","pos":[4228,4258]},{"pos":[4378,4397],"content":"Create the packages"},{"content":"The process for creating a package is the same for IoT Core as it is for Windows 10 Mobile.","pos":[4399,4490]},{"content":"Refer to <bpt id=\"p1\">[</bpt>Creating mobile packages<ept id=\"p1\">](https://msdn.microsoft.com/library/dn756642)</ept> for instructions to create your package.","pos":[4491,4612]},{"pos":[4759,4787],"content":"Installing test certificates"},{"content":"OEM test certificates provide a trust relationship to package signatures.","pos":[4789,4862]},{"content":"They need only be installed once.","pos":[4863,4896]},{"content":"In order to install the test certificates,","pos":[4897,4939]},{"content":"Open the deployment and imaging tools environment (IMGGEN) with administrator privileges.","pos":[4945,5034]},{"content":"Set environment variables with the following commands:","pos":[5039,5093]},{"content":"Install OEM certificates with the following utility command:","pos":[5317,5377]},{"content":"Verify that W10<ph id=\"ph1\">\\_</ph>KITROOT is set to %ProgramFiles%<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10.","pos":[5410,5478]},{"pos":[5634,5665],"content":"Author the feature manifest xml"},{"content":"XML files define the content of each step of the package creation and deployment process.","pos":[5667,5756]},{"content":"Windows ICD and IMGGEN depend on an OEM Input file, located in the %KITSROOT%OEMInputSamples<ph id=\"ph1\">\\[</ph>device<ph id=\"ph2\">\\]</ph> directory (for instance C:<ph id=\"ph3\">\\\\</ph>Program Files (x86)<ph id=\"ph4\">\\\\</ph>Windows Kits<ph id=\"ph5\">\\\\</ph>10<ph id=\"ph6\">\\\\</ph>OEMInputSamples<ph id=\"ph7\">\\\\</ph>MBM ).","pos":[5757,5950]},{"content":"This OEM Input file refers to a platform feature manifest file.","pos":[5951,6014]},{"content":"This file contains a list of packages to be included in the created image, and references to additional required or optional OEM feature manifest files.","pos":[6015,6167]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>OEMInput file contents<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/dn756778)</ept>.","pos":[6168,6281]},{"content":"The feature manifest file references the packages and cabinet files (CAB) to be included in the image.","pos":[6282,6384]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Feature manifest file contents<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/dn756745)</ept>.","pos":[6385,6506]},{"content":"For more information about how packages are used in building images, see <bpt id=\"p1\">[</bpt>Provisioning packages<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/mt147447)</ept>.","pos":[6507,6666]},{"content":"Three OEM feature manifest files for IoT Core are provided as samples in the directories below.","pos":[6668,6763]},{"pos":[6769,6861],"content":"<bpt id=\"p1\">**</bpt>Intel Minnowboard Max<ept id=\"p1\">**</ept> C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>x86<ph id=\"ph6\">\\\\</ph>MBMFM.xml"},{"pos":[6866,6952],"content":"<bpt id=\"p1\">**</bpt>Raspberry Pi 2<ept id=\"p1\">**</ept> C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>arm<ph id=\"ph6\">\\\\</ph>RPi2FM.xml"},{"pos":[6957,7058],"content":"<bpt id=\"p1\">**</bpt>Qualcomm Dragonboard 410c<ept id=\"p1\">**</ept> C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>arm<ph id=\"ph6\">\\\\</ph>QCDB410CFM.xml"},{"content":"These manifests contain the following sections:","pos":[7060,7107]},{"content":"Base package","pos":[7113,7125]},{"content":"System information package","pos":[7130,7156]},{"content":"Device information package","pos":[7161,7187]},{"content":"Device platform package","pos":[7192,7215]},{"content":"Feature based package","pos":[7220,7241]},{"content":"You can add base packages and features packages, which go into the base package and feature based package sections, respectively.","pos":[7243,7372]},{"content":"Here is an example OEM feature manifest file.","pos":[7374,7419]},{"content":"Here are examples of packages that you can include in your IoT Core feature manifest file.","pos":[8846,8936]},{"content":"In each case, the package must be part of an OEMFM.xml file.","pos":[8937,8997]},{"content":"Adding a file to an image.","pos":[9003,9029]},{"content":"Adding a registry setting to an image.","pos":[9777,9815]},{"content":"Adding a driver to an image.","pos":[10823,10851]},{"content":"Generate the packages","pos":[11579,11600]},{"pos":[11608,11774],"content":"Add a reference to the OEMFM.xml file in the OEM Input XML file named <bpt id=\"p1\">**</bpt>RetailOEMInput.xml<ept id=\"p1\">**</ept> for retail devices, or <bpt id=\"p2\">**</bpt>ProductionOEMInput.xml<ept id=\"p2\">**</ept> for production devices."},{"content":"The package generator tool (pkggen.exe) generates packages and cabinet files (.CAB) for inclusion in the IoT Core image.","pos":[11779,11899]},{"content":"This tool is installed by default in %WPDKCONTENTROOT%<ph id=\"ph1\">\\\\</ph>Tools<ph id=\"ph2\">\\\\</ph>bin<ph id=\"ph3\">\\\\</ph>.","pos":[11900,11969]},{"pos":[11974,12073],"content":"Open the <bpt id=\"p1\">**</bpt>Deployment and Imaging Tools Environment<ept id=\"p1\">**</ept> command prompt with administrator privileges."},{"content":"Issue the appropriate PKGGEN command for each of the packages to be added to the image.","pos":[12078,12165]},{"pos":[12176,12196],"content":"PKGGEN for a driver:"},{"pos":[12385,12419],"content":"PKGGEN for file or registry entry:"},{"pos":[12558,12668],"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  The /version field of a modified package should always be incremented when running package generator"},{"content":"Copy all OEM packages to the directory that maps to your deviceâ€™s architecture.","pos":[12681,12760]},{"content":"For example: C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>x86<ph id=\"ph7\">\\\\</ph>fre","pos":[12762,12846]},{"pos":[13039,13082],"content":"Adding an OEM package during image creation"},{"content":"To add an OEM package to an IoT Core image as part of the image creation process, complete the following steps:","pos":[13084,13195]},{"content":"Author the package as described above and add it to the OEM packages directory for the device's architecture (for instance C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>x86<ph id=\"ph7\">\\\\</ph>fre.","pos":[13201,13396]},{"content":"Add a feature manifest file (OEMFM.xml) and copy it to the feature manifest file directory (for instance C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>x86<ph id=\"ph6\">\\\\</ph>)","pos":[13401,13564]},{"content":"Add references to the OEM feature manifest file and Feature ID in OEMInputFML.xml under both the Production and Retail folders.","pos":[13569,13696]},{"content":"Create a new image as described above using either Windows ICD or IMGGEN.","pos":[13701,13774]},{"pos":[13987,14037],"content":"Adding OEM Packages to a deployed image at runtime"},{"content":"To add an OEM package to an IoT Core image as part of the image creation process, complete the following steps:","pos":[14039,14150]},{"content":"Copy the package to the device","pos":[14156,14186]},{"content":"Connect to the device via SSH or Powershell","pos":[14191,14234]},{"content":"Run these commands","pos":[14239,14257]},{"content":"The device will reboot into the Update OS, complete the installation, and then reboot back to the main OS.","pos":[14340,14446]},{"content":"Depending on the package size, this step can take up to 10 minutes.","pos":[14447,14514]},{"pos":[14760,14821],"content":"Adding OEM FM file and optional features to the OEM Input XML"},{"content":"There are two sample features manifest files installed as part of IoT Core Kits.","pos":[14823,14903]},{"content":"You can find them here.","pos":[14904,14927]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>OEMInputSamples<ph id=\"ph5\">\\\\</ph>MBM<ph id=\"ph6\">\\\\</ph>ProductionOEMInput.xml","pos":[14933,15020]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>OEMInputSamples<ph id=\"ph5\">\\\\</ph>MBM<ph id=\"ph6\">\\\\</ph>RetailOEMInput.xml","pos":[15025,15108]},{"pos":[15279,15315],"content":"Authoring OEM Customization Packages"},{"content":"The OEMCustomization.cmd utility allows customization at device boot time.","pos":[15317,15391]},{"content":"During each boot sequence, this script file is invoked as a result of a scheduled task.","pos":[15392,15479]},{"content":"The OEMCustomization.cmd script file is not present in the image by default, and needs to be authored by the OEM.","pos":[15480,15593]},{"content":"The customizations below are allowed and suggested:","pos":[15594,15645]},{"content":"Activate a user with Administrator-level privileges on the device Net user Administrator \"<ph id=\"ph1\">\\[</ph>insert desired Administrator password<ph id=\"ph2\">\\]</ph>\" /active:yes by authoring OEMCustomization.cmd.","pos":[15651,15830]},{"content":"You'll have to create a password to replace \"<ph id=\"ph1\">\\[</ph>insert desired Administrator password<ph id=\"ph2\">\\]</ph>\" in the code example below.","pos":[15831,15945]},{"content":"Enable OEM application installation.","pos":[16121,16157]},{"content":"Author the OEMCustomization.pkg.xml to point to the OEMCustomization.cmd script.","pos":[16248,16328]},{"content":"Create the CAB File for the package using pkggen.exe.","pos":[16867,16920]},{"content":"Enable Bitlocker.","pos":[16925,16942]},{"pos":[17028,17036],"content":"OEM apps"},{"content":"To help get you started writing apps for IoT Core, we've uploaded some batch files to GitHub.","pos":[17039,17132]},{"content":"You'll need to download those files from <bpt id=\"p1\">&lt;</bpt>https://github.com/ms-iot/samples/tree/develop/AppInstall<ept id=\"p1\">&gt;</ept>","pos":[17133,17233]},{"pos":[17239,17465],"content":"Copy these files to the C:\\\\OEM directory on your development compute.\n**Note**  Files from GitHub may not display in a friendly format for notepad and may need to be opened in a development environment like Visual Studio.","leadings":["","    "],"nodes":[{"content":"Copy these files to the C:<ph id=\"ph1\">\\\\</ph>OEM directory on your development compute.","pos":[0,70]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Files from GitHub may not display in a friendly format for notepad and may need to be opened in a development environment like Visual Studio.","pos":[71,222]}]},{"content":"Copy the APPX and CET files to C:<ph id=\"ph1\">\\\\</ph>OEM.","pos":[17478,17517]},{"content":"Edit the AppInstall.bat script file","pos":[17522,17557]},{"content":"Set defaultappx = <ph id=\"ph1\">\\[</ph>your appxâ€™s file name","pos":[17566,17607]},{"content":"Set certslist = <ph id=\"ph1\">\\[</ph>your appxâ€™s certificatesâ€™ names<ph id=\"ph2\">\\]</ph> (multiple certificates may be added, separated by a space)","pos":[17618,17728]},{"content":"Edit the DeployApp.bat file","pos":[17734,17761]},{"content":"Set defaultappx = <ph id=\"ph1\">\\[</ph>your appxâ€™s file name","pos":[17770,17811]},{"content":"Set defaultappid = <ph id=\"ph1\">\\[</ph>your appxâ€™s ID","pos":[17822,17857]},{"content":"Set depenencylist = <ph id=\"ph1\">\\[</ph>include this if your appxes have dependencies that are required to be installed prior to your appx.","pos":[17868,17989]},{"content":"Multiple dependency names are allowed, separated by space.","pos":[17990,18048]},{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>  Note: OEMs must choose an application that runs on the device \"out-of-the-box\", by default.","pos":[18054,18155]},{"content":"This application will never be updated.","pos":[18156,18195]},{"content":"The operating system needs to switch back to the OOBE for this installation to ensure there is no resource conflict during the applicationâ€™s installation or update","pos":[18196,18359]},{"content":"Author the application package, called OEMApp.pkg.xml, as in the following example.","pos":[18372,18455]},{"content":"Place the created files and related resources in directories of the development device as follows:","pos":[19292,19390]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Windows<ph id=\"ph2\">\\\\</ph>appinstall:","pos":[19401,19425]},{"content":"appx","pos":[19440,19444]},{"content":"dependency appx(s)","pos":[19457,19475]},{"content":"temp appx (optional)","pos":[19488,19508]},{"content":"certificate(s)","pos":[19521,19535]},{"content":"AppInstall.bat","pos":[19548,19562]},{"content":"DeployApp.bat","pos":[19575,19588]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Winodws<ph id=\"ph2\">\\\\</ph>system32:","pos":[19599,19621]},{"content":"Oemcustomization.cmd","pos":[19636,19656]},{"content":"Restart the device.","pos":[19662,19681]},{"content":"The specified appx will be installed automatically when the device restarts.","pos":[19682,19758]},{"pos":[19896,19921],"content":"Image-time configurations"},{"content":"The following are examples of configuration settings you may want to include in your OEMImageCustomization.cmd.","pos":[19923,20034]},{"content":"Headless configuration","pos":[20040,20062]},{"content":"Crash dump configuration","pos":[20181,20205]},{"pos":[20967,20990],"content":"Run-time configurations"},{"content":"The allowed runtime settings listed below should be included in a provisioning package generated with Windows ICD.","pos":[20992,21106]},{"content":"These settings must be included in a single provisioning package and the provisioning package should be wrapped into a single OEM package.","pos":[21107,21245]},{"content":"Certificates","pos":[21251,21263]},{"content":"Firewall configuration","pos":[21268,21290]},{"content":"Startup app","pos":[21295,21306]},{"content":"Edition upgrade","pos":[21311,21326]},{"content":"Policies update","pos":[21331,21346]},{"pos":[21516,21552],"content":"Configuring IoT Core update settings"},{"content":"To configure an image to receive only OS updates, you must configure generic POP packages.","pos":[21555,21645]},{"content":"Generic POP packages exist in the following locations; replace them with the examples from the list below.","pos":[21646,21752]},{"content":"Intel Minnowboard Max","pos":[21760,21781]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>X86<ph id=\"ph7\">\\\\</ph>fre<ph id=\"ph8\">\\\\</ph>Intel.Generic.DeviceInfo.cab","pos":[21792,21893]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>X86<ph id=\"ph7\">\\\\</ph>fre<ph id=\"ph8\">\\\\</ph>Intel.Generic.DeviceTargetingInfo.cab","pos":[21902,22012]},{"content":"Replace with: C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>x86<ph id=\"ph6\">\\\\</ph>MBMFM.xml","pos":[22021,22101]},{"content":"Raspberry Pi 2","pos":[22108,22122]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>ARM<ph id=\"ph7\">\\\\</ph>fre<ph id=\"ph8\">\\\\</ph> RASPBERRYPI.Generic.DeviceInfo.cab","pos":[22133,22241]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>ARM<ph id=\"ph7\">\\\\</ph>fre<ph id=\"ph8\">\\\\</ph> RASPBERRYPI.Generic.DeviceTargetingInfo.cab","pos":[22250,22367]},{"content":"Replace with: C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>arm<ph id=\"ph6\">\\\\</ph>RPi2FM.xml","pos":[22376,22457]},{"content":"Qualcomm Dragonboard 410c","pos":[22464,22489]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>ARM<ph id=\"ph7\">\\\\</ph>fre <ph id=\"ph8\">\\\\</ph>Qualcomm.Generic.DeviceInfo.cab","pos":[22500,22605]},{"content":"C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>MSPackages<ph id=\"ph5\">\\\\</ph>Retail<ph id=\"ph6\">\\\\</ph>ARM<ph id=\"ph7\">\\\\</ph>fre <ph id=\"ph8\">\\\\</ph>Qualcomm.Generic.DeviceTargetingInfo.cab","pos":[22614,22728]},{"content":"Replace with: C:<ph id=\"ph1\">\\\\</ph>Program Files (x86)<ph id=\"ph2\">\\\\</ph>Windows Kits<ph id=\"ph3\">\\\\</ph>10<ph id=\"ph4\">\\\\</ph>FMFiles<ph id=\"ph5\">\\\\</ph>arm<ph id=\"ph6\">\\\\</ph>QCDB410CFM.xml","pos":[22737,22822]},{"pos":[23052,23108],"content":"Creating an enterprise IoT Core UAP provisioning package"},{"content":"To create an enterprise provisioning package that you can deploy to a IoT Core device, follow these steps.","pos":[23111,23217]},{"content":"Download the IoT Core license file to the development device.","pos":[23223,23284]},{"content":"More information about this step can be found at <bpt id=\"p1\">[</bpt>IoT Core Commercialization<ept id=\"p1\">](https://www.windowsforiotdevices.com/)</ept>.","pos":[23285,23402]},{"pos":[23407,23574],"content":"Create a new provisioning package containing a license file by selecting \"New provisioning package\" in Windows ICD, as in the following image, and then click <bpt id=\"p1\">**</bpt>Next.<ept id=\"p1\">**</ept>"},{"pos":[23608,23769],"content":"In the <bpt id=\"p1\">**</bpt>Enter Project Details<ept id=\"p1\">**</ept> window, enter a <bpt id=\"p2\">**</bpt>Name<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Project folder<ept id=\"p3\">**</ept>, and optionally a <bpt id=\"p4\">**</bpt>Description<ept id=\"p4\">**</ept> of the provisioning package, then click <bpt id=\"p5\">**</bpt>Next<ept id=\"p5\">**</ept>."},{"pos":[23774,23853],"content":"In the <bpt id=\"p1\">**</bpt>Select Windows Edition<ept id=\"p1\">**</ept> window, select IoT Core, then click <bpt id=\"p2\">**</bpt>Next<ept id=\"p2\">**</ept>."},{"pos":[23858,23933],"content":"In the optional <bpt id=\"p1\">**</bpt>Import a provisioning package<ept id=\"p1\">**</ept> window, click <bpt id=\"p2\">**</bpt>Finish.<ept id=\"p2\">**</ept>"},{"content":"In the <bpt id=\"p1\">**</bpt>Customizations<ept id=\"p1\">**</ept> page, add the <bpt id=\"p2\">[</bpt>upgradeeditionwithlicense<ept id=\"p2\">](https://msdn.microsoft.com/library/windows/hardware/mt573160.aspx)</ept> customization.","pos":[23938,24087]},{"content":"this customization provides a license for an edition upgrade of iot core devices.","pos":[24088,24169]},{"content":"Export the provisioning package by clicking the <bpt id=\"p1\">**</bpt>Export<ept id=\"p1\">**</ept> dropdown in the main menu, then selecting <bpt id=\"p2\">**</bpt>Provisioning Package<ept id=\"p2\">**</ept>, adding the required package information and specify options for the package.","pos":[24215,24418]},{"content":"Click <bpt id=\"p1\">**</bpt>Next<ept id=\"p1\">**</ept> and then specify where the package will be saved.","pos":[24419,24483]},{"content":"Click <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> to start building the image.","pos":[24488,24532]},{"content":"The project information is displayed in the build page and the progress bar indicates the build status.","pos":[24533,24636]},{"content":"If you need to cancel the build, click <bpt id=\"p1\">**</bpt>Cancel<ept id=\"p1\">**</ept>.","pos":[24637,24687]},{"content":"This cancels the current build process, closes the wizard, and takes you back to the <bpt id=\"p1\">**</bpt>Customizations<ept id=\"p1\">**</ept> Page.","pos":[24688,24797]},{"content":"During the image build process, a lot of what's happening during the build process is shown in the build output window.","pos":[24803,24922]},{"content":"This window shows:","pos":[24923,24941]},{"content":"Warnings that might appear while the image is building.","pos":[24951,25006]},{"content":"Verbose build messages to indicate the phases within the image build process.","pos":[25015,25092]},{"content":"Error messages such as when the input files have schema errors or when the image fails to build.","pos":[25101,25197]},{"content":"If your build fails, an error message will be displayed.","pos":[25203,25259]},{"content":"You can review the build log to identify the issue by clicking View in Notepad.","pos":[25260,25339]},{"content":"If your build is successful, the name of the image and its location will be displayed.","pos":[25345,25431]},{"content":"Create an OEM package, and wrap the newly created provisioning package in the OEM package, as in the following example:","pos":[25437,25556]},{"pos":[26215,26441],"content":"The last step is to build a new IoT Core image with IMGGEN or Windows ICD and add the provisioning package as described in <bpt id=\"p1\">[</bpt>Build and apply a provisioning package<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/hardware/dn916107)</ept>."},{"pos":[26479,26493],"content":"Related topics"},{"content":"Download Windows 10 IoT Core","pos":[26497,26525]}],"content":"---\nauthor: kpacquer\nDescription: 'Windows 10 IoT Core (IoT Core) brings the power of Microsoft Windows together with breadth of the Internet of Things. Developers can now build and provision their own custom Windows 10 images for the IoT Core devices in their ecosystem.'\nms.assetid: 800596ab-ce50-4bc0-921a-280ed63a2d75\nMSHAttr: 'PreferredLib:/library'\ntitle: IoT Core deployment and imaging\n---\n\n# IoT Core deployment and imaging\n\n\nWindows 10 IoT Core (IoT Core) brings the power of Microsoft Windows together with breadth of the Internet of Things. Developers can now build and provision their own custom Windows 10 images for the IoT Core devices in their ecosystem.\n\n## <span id=\"Intended_audience\"></span><span id=\"intended_audience\"></span><span id=\"INTENDED_AUDIENCE\"></span>Intended audience\n\n\nOEMs and ODMs customizing and deploying images for IoT devices.\n\n## <span id=\"Download_and_install_the_kits_and_packages\"></span><span id=\"download_and_install_the_kits_and_packages\"></span><span id=\"DOWNLOAD_AND_INSTALL_THE_KITS_AND_PACKAGES\"></span>Download and install the kits and packages\n\n\nBefore you can create an IoT Core image, you must first install the Windows Assessment and Deployment Kit (ADK) as well as the IoT Core Core OS Packages.\n\n-   [Download the Windows Assessment and Deployment Kit (ADK)](http://go.microsoft.com/fwlink/p/?LinkId=526740)\n-   Download the [IoT Core OS Packages]( http://go.microsoft.com/fwlink/?LinkId=722759).\n\nWhen these installations are complete, verify that you have directories called *FMFiles*, *MSPackages*, and *OEMInputSamples* in your computerâ€™s C:\\\\Program Files (x86)\\\\Windows Kits\\\\10 directory.\n\n## <span id=\"Create_an_image\"></span><span id=\"create_an_image\"></span><span id=\"CREATE_AN_IMAGE\"></span>Create an image\n\n\nYou have two options for tools to use to create an image for IoT Core.\n\n-   Create an image with IMGGEN\n-   Create an image with Windows Imaging and Configuration Designer (ICD).\n\nLater in this topic, you will also learn how to customize packages, which will require that you create an image using one of these tools. Which tool you use is up to you.\n\n### <span id=\"Option_One__Create_an_image_with_IMGGEN\"></span><span id=\"option_one__create_an_image_with_imggen\"></span><span id=\"OPTION_ONE__CREATE_AN_IMAGE_WITH_IMGGEN\"></span>Option One: Create an image with IMGGEN\n\nThe Deployment and Imaging Tools Environment, or IMGGEN, is a command-line alternative to the Image Configuration Designer. Image creation can be automated or completed through scripting using IMGGEN.\n\n1.  Open **Deployment and Imaging Tools Environment** application by typing **Deployment and Imaging Tools Environment**in the Search bar.\n2.  Set the following environment variables, in the following order:`SET PATH=%KITSROOT%tools\\bin\\i386;%PATH%  SET AKROOT=%KITSROOT%`\n3.  Execute the following commands based on your device environment:\n    -   **Intel Minnowboard Max:**\n\n        `imggen.cmd IoTCore.ffu \"%KITSROOT%OEMInputSamples\\MBM\\ProductionOEMInput.xml\" \"%KITSROOT%MSPackages\" x86`\n\n    -   **Raspberry Pi 2 or Qualcomm Dragonboard:**\n\n        `imggen.cmd IoTCore.ffu \"%KITSROOT%OEMInputSamples\\RPi2\\ProductionOEMInput.xml\" \"%KITSROOT%MSPackages\" arm`\n\n### <span id=\"Option_Two__Create_an_image_with_Windows_ICD\"></span><span id=\"option_two__create_an_image_with_windows_icd\"></span><span id=\"OPTION_TWO__CREATE_AN_IMAGE_WITH_WINDOWS_ICD\"></span>Option Two: Create an image with Windows ICD\n\nTo create an IoT Core image with Windows ICD, see [Build and deploy a Windows 10 IoT Core (IoT Core) image](https://msdn.microsoft.com/library/windows/hardware/dn916104).\n\nThe following sections describe how to customize the image.\n\n## <span id=\"Create_customized_OEM_configuration_packages\"></span><span id=\"create_customized_oem_configuration_packages\"></span><span id=\"CREATE_CUSTOMIZED_OEM_CONFIGURATION_PACKAGES\"></span>Create customized OEM configuration packages\n\n\nRegardless of the tool you use to create your image, be it IMGGEN or Windows ICD, you may need to customize packages for the devices you deploy for branding or to enable unique scenarios. The applications, certificates, and settings on a device may need to be configured to match your specifications. This requires custom packages.\n\n### <span id=\"Create_the_packages\"></span><span id=\"create_the_packages\"></span><span id=\"CREATE_THE_PACKAGES\"></span>Create the packages\n\nThe process for creating a package is the same for IoT Core as it is for Windows 10 Mobile. Refer to [Creating mobile packages](https://msdn.microsoft.com/library/dn756642) for instructions to create your package.\n\n### <span id=\"Installing_test_certificates\"></span><span id=\"installing_test_certificates\"></span><span id=\"INSTALLING_TEST_CERTIFICATES\"></span>Installing test certificates\n\nOEM test certificates provide a trust relationship to package signatures. They need only be installed once. In order to install the test certificates,\n\n1.  Open the deployment and imaging tools environment (IMGGEN) with administrator privileges.\n2.  Set environment variables with the following commands:\n    -   `set W10_KITROOT=%ProgramFiles(x86)%\\Windows Kits\\10`\n    -   `set WPDKCONTENTROOT=%W10_KITROOT%`\n    -   `set W10_TOOL=%W10_KITROOT%\\bin\\x86;%W10_KITROOT%\\Tools\\bin\\i386`\n    -   `set PATH=%PATH%;%W10_TOOL%;`\n\n3.  Install OEM certificates with the following utility command:\n\n    `Installoemcerts.cmd`\n\n4.  Verify that W10\\_KITROOT is set to %ProgramFiles%\\\\Windows Kits\\\\10.\n\n### <span id=\"Author_the_feature_manifest_xml\"></span><span id=\"author_the_feature_manifest_xml\"></span><span id=\"AUTHOR_THE_FEATURE_MANIFEST_XML\"></span>Author the feature manifest xml\n\nXML files define the content of each step of the package creation and deployment process. Windows ICD and IMGGEN depend on an OEM Input file, located in the %KITSROOT%OEMInputSamples\\[device\\] directory (for instance C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\OEMInputSamples\\\\MBM ). This OEM Input file refers to a platform feature manifest file. This file contains a list of packages to be included in the created image, and references to additional required or optional OEM feature manifest files. For more information, see [OEMInput file contents](https://msdn.microsoft.com/library/windows/hardware/dn756778). The feature manifest file references the packages and cabinet files (CAB) to be included in the image. For more information, see [Feature manifest file contents](https://msdn.microsoft.com/library/windows/hardware/dn756745). For more information about how packages are used in building images, see [Provisioning packages](https://msdn.microsoft.com/library/windows/hardware/mt147447).\n\nThree OEM feature manifest files for IoT Core are provided as samples in the directories below.\n\n-   **Intel Minnowboard Max** C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\x86\\\\MBMFM.xml\n-   **Raspberry Pi 2** C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\arm\\\\RPi2FM.xml\n-   **Qualcomm Dragonboard 410c** C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\arm\\\\QCDB410CFM.xml\n\nThese manifests contain the following sections:\n\n-   Base package\n-   System information package\n-   Device information package\n-   Device platform package\n-   Feature based package\n\nYou can add base packages and features packages, which go into the base package and feature based package sections, respectively.\n\nHere is an example OEM feature manifest file.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<FeatureManifest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n   xmlns=\"http://schemas.microsoft.com/embedded/2004/10/ImageUpdate\">   \n   <BasePackages>      \n      <PackageFile Path=\"$(mspackageroot)\\Retail\\$(cputype)\\$(buildtype)\" \n         Name=\"OEMCoreFeature1.cab\" \n         FeatureIdentifierPackage=\"true\"/>      \n      <PackageFile Path=\"$(mspackageroot)\\Retail\\$(cputype)\\$(buildtype)\" \n         Name=\"OEMCoreFeature2.cab\" />   \n   </BasePackages>   \n   <Features>     \n      <Microsoft />     \n         <MSFeatureGroups />     \n      <OEM>\n         <PackageFile \n            Path=\"$(mspackageroot)\\Retail\\$(cputype)\\$(buildtype)\" \n            Name=\"OEMOptionalFeature1.cab\"  \n            FeatureIdentifierPackage=\"true\">         \n            <FeatureIDs>           \n               <FeatureID>OEM_OPTIONAL_1</FeatureID>         \n            </FeatureIDs>       \n         </PackageFile>       \n         <PackageFile Path=\"$(mspackageroot)\\Retail\\$(cputype)\\$(buildtype)\" \n            Name=\"OEMOptionalFeature2.cab\" \n            FeatureIdentifierPackage=\"true\">         \n            <FeatureIDs>           \n               <FeatureID>OEM_OPTIONAL_2</FeatureID>         \n            </FeatureIDs>       \n         </PackageFile>     \n      </OEM>     \n   <OEMFeatureGroups />   \n   </Features> \n</FeatureManifest>\n```\n\nHere are examples of packages that you can include in your IoT Core feature manifest file. In each case, the package must be part of an OEMFM.xml file.\n\n-   Adding a file to an image.\n    ```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <Package xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\"    \n    Owner=\"OEMName\"    \n    OwnerType=\"OEM\"        \n    ReleaseType=\"Test\"    \n    Platform=\"PlaformName\"    \n    Component=\"ComponentName\"    \n    SubComponent=\"SubName\">    \n       <Components>       \n          <OSComponent>          \n             <Files>             \n                <File Source=\"$(_RELEASEDIR)\\test_file1.dll\"/>             \n                <File Source=\"$(_RELEASEDIR)\\toBeRenamed.dat\"               \n                      DestinationDir=\"$(runtime.system32)\\test\" Name=\"test.dat\"/>          \n             </Files>      \n          </OSComponent>    \n       </Components> \n    </Package>\n    ```\n\n-   Adding a registry setting to an image.\n    ```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <Package xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\"    \n    Owner=\"OEMName\"    \n    OwnerType=\"OEM\"        \n    ReleaseType=\"Test\"    \n    Platform=\"PlaformName\"    \n    Component=\"ComponentName\"    \n    SubComponent=\"SubName\">    \n       <Components>       \n          <OSComponent>          \n             <RegKeys>             \n                <RegKey KeyName=\"$(hklm.software)\\OEMName\\test\">                \n                   <RegValue Name=\"StringValue\" Value=\"Test string\" Type=\"REG_SZ\"/>                \n                   <RegValue Name=\"DWordValue\" Value=\"12AB34CD\" Type=\"REG_DWORD\"/>                \n                   <RegValue Name=\"BinaryValue\" Value=\"12,AB,CD,EF\" Type=\"REG_BINARY\"/>             \n                </RegKey>             \n                <RegKey KeyName=\"$(hklm.software)\\OEMName\\EmptyKey\"/>          \n             </RegKeys>       \n          </OSComponent>    \n       </Components> \n    </Package>\n    ```\n\n-   Adding a driver to an image.\n    ```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n    <Package xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\"    \n    Owner=\"OEMName\"    \n    OwnerType=\"OEM\"        \n    ReleaseType=\"Production\"    \n    Platform=\"PlaformName\"    \n    Component=\"ComponentName\"    \n    SubComponent=\"SubName\">    \n       <Components>     \n          <Driver       \n          InfSource=\"$(_RELEASEDIR)\\Driver1\\driver1.inf\">       \n             <Reference         \n             Source=\"$(_RELEASEDIR)\\Driver1\\driver1.sys\" />       \n             <Files>         \n                <File Source=\"$(_RELEASEDIR)\\Driver1\\driver1.sys\" />       \n             </Files>     \n          </Driver>    \n       </Components> \n    </Package> \n    ```\n\n**Generate the packages**\n\n1.  Add a reference to the OEMFM.xml file in the OEM Input XML file named **RetailOEMInput.xml** for retail devices, or **ProductionOEMInput.xml** for production devices.\n2.  The package generator tool (pkggen.exe) generates packages and cabinet files (.CAB) for inclusion in the IoT Core image. This tool is installed by default in %WPDKCONTENTROOT%\\\\Tools\\\\bin\\\\.\n3.  Open the **Deployment and Imaging Tools Environment** command prompt with administrator privileges.\n4.  Issue the appropriate PKGGEN command for each of the packages to be added to the image.\n    -   **PKGGEN for a driver:**`PkgGen SampleDriver.pkg.xml /config:\"%WPDKCONTENTROOT%\\Tools\\bin\\i386\\pkggen.cfg.xml\" /version:1.0.0.0 /cpu:x86 /build:fre /variables:\"HIVE_ROOT=%WPDKCONTENTROOT%\\CoreSystem\"`\n    -   **PKGGEN for file or registry entry:**`PkgGen [package project file name] /config:\"%WPDKCONTENTROOT%\\Tools\\bin\\i386\\pkggen.cfg.xml\" /version:1.0.0.0 /cpu:x86 /build:fre`\n\n    **Note**  The /version field of a modified package should always be incremented when running package generator\n\n     \n\n5.  Copy all OEM packages to the directory that maps to your deviceâ€™s architecture. *For example: C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\x86\\\\fre*\n\n### <span id=\"Adding_an_OEM_package_during_image_creation\"></span><span id=\"adding_an_oem_package_during_image_creation\"></span><span id=\"ADDING_AN_OEM_PACKAGE_DURING_IMAGE_CREATION\"></span>Adding an OEM package during image creation\n\nTo add an OEM package to an IoT Core image as part of the image creation process, complete the following steps:\n\n1.  Author the package as described above and add it to the OEM packages directory for the device's architecture (for instance C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\x86\\\\fre.\n2.  Add a feature manifest file (OEMFM.xml) and copy it to the feature manifest file directory (for instance C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\x86\\\\)\n3.  Add references to the OEM feature manifest file and Feature ID in OEMInputFML.xml under both the Production and Retail folders.\n4.  Create a new image as described above using either Windows ICD or IMGGEN.\n\n### <span id=\"Adding_OEM_Packages_to_a_deployed_image_at_runtime\"></span><span id=\"adding_oem_packages_to_a_deployed_image_at_runtime\"></span><span id=\"ADDING_OEM_PACKAGES_TO_A_DEPLOYED_IMAGE_AT_RUNTIME\"></span>Adding OEM Packages to a deployed image at runtime\n\nTo add an OEM package to an IoT Core image as part of the image creation process, complete the following steps:\n\n1.  Copy the package to the device\n2.  Connect to the device via SSH or Powershell\n3.  Run these commands\n\n    `ApplyUpdate.exe â€“stage C:\\OEM\\Package1.cab`\n\n    `ApplyUpdate.exe â€“commit`\n\nThe device will reboot into the Update OS, complete the installation, and then reboot back to the main OS. Depending on the package size, this step can take up to 10 minutes.\n\n### <span id=\"Adding_OEM_FM_file_and_optional_features_to_the_OEM_Input_XML\"></span><span id=\"adding_oem_fm_file_and_optional_features_to_the_oem_input_xml\"></span><span id=\"ADDING_OEM_FM_FILE_AND_OPTIONAL_FEATURES_TO_THE_OEM_INPUT_XML\"></span>Adding OEM FM file and optional features to the OEM Input XML\n\nThere are two sample features manifest files installed as part of IoT Core Kits. You can find them here.\n\n-   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\OEMInputSamples\\\\MBM\\\\ProductionOEMInput.xml\n-   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\OEMInputSamples\\\\MBM\\\\RetailOEMInput.xml\n\n### <span id=\"Authoring_OEM_Customization_Packages\"></span><span id=\"authoring_oem_customization_packages\"></span><span id=\"AUTHORING_OEM_CUSTOMIZATION_PACKAGES\"></span>Authoring OEM Customization Packages\n\nThe OEMCustomization.cmd utility allows customization at device boot time. During each boot sequence, this script file is invoked as a result of a scheduled task. The OEMCustomization.cmd script file is not present in the image by default, and needs to be authored by the OEM. The customizations below are allowed and suggested:\n\n1.  Activate a user with Administrator-level privileges on the device Net user Administrator \"\\[insert desired Administrator password\\]\" /active:yes by authoring OEMCustomization.cmd. You'll have to create a password to replace \"\\[insert desired Administrator password\\]\" in the code example below.\n\n    ```\n    ::OEM CUSTOMIZATION Script File\n    ::Enable Administrator Password\n    net user Administrator \"[insert desired Administrator password]\" /active:yes\n    ```\n\n2.  Enable OEM application installation.\n    ```\n    ::Enable Application Installation\n    call c:\\OEM\\AppInstall.bat\n    ```\n\n3.  Author the OEMCustomization.pkg.xml to point to the OEMCustomization.cmd script.\n    ```\n    <?xml version=\"1.0 encoding=\"utf-8\"?>\n    <Package\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:xsd=\"http://www.w3.org/2001/SMLSchema\"\n      Owner=\"OEM\"\n      Component=\"OEMApp1\"\n      OwnerType\"OEM\"\n      ReleaseType=\"Production\"\n      xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\">\n      <Components>\n        <OSComponent>\n          <Files>\n            <File Source=\"C:\\OEM\\OEMCustomization.cmd\" />\n          </Files>\n        </OSComponent>\n      </Component>\n    </Package>\n    ```\n\n4.  Create the CAB File for the package using pkggen.exe.\n5.  Enable Bitlocker.\n\n## <span id=\"OEM_apps\"></span><span id=\"oem_apps\"></span><span id=\"OEM_APPS\"></span>OEM apps\n\n\nTo help get you started writing apps for IoT Core, we've uploaded some batch files to GitHub. You'll need to download those files from <https://github.com/ms-iot/samples/tree/develop/AppInstall>\n\n1.  Copy these files to the C:\\\\OEM directory on your development compute.\n    **Note**  Files from GitHub may not display in a friendly format for notepad and may need to be opened in a development environment like Visual Studio.\n\n     \n\n2.  Copy the APPX and CET files to C:\\\\OEM.\n3.  Edit the AppInstall.bat script file\n    -   Set defaultappx = \\[your appxâ€™s file name\\]\n    -   Set certslist = \\[your appxâ€™s certificatesâ€™ names\\] (multiple certificates may be added, separated by a space)\n\n4.  Edit the DeployApp.bat file\n    -   Set defaultappx = \\[your appxâ€™s file name\\]\n    -   Set defaultappid = \\[your appxâ€™s ID\\]\n    -   Set depenencylist = \\[include this if your appxes have dependencies that are required to be installed prior to your appx. Multiple dependency names are allowed, separated by space.\n\n    **Note**  Note: OEMs must choose an application that runs on the device \"out-of-the-box\", by default. This application will never be updated. The operating system needs to switch back to the OOBE for this installation to ensure there is no resource conflict during the applicationâ€™s installation or update\n\n     \n\n5.  Author the application package, called OEMApp.pkg.xml, as in the following example.\n\n    ```\n    <?xml version=\"1.0 encoding=\"utf-8\"?>\n    <Package\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xmlns:xsd=\"http://www.w3.org/2001/SMLSchema\"\n      Owner=\"Oem\"\n      Component=\"OEMApp1\"\n      OwnerType\"OEM\"\n      ReleaseType=\"Production\"\n      xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\">\n      <Components>\n        <OSComponent>\n          <Files>\n            <File Source=\"C:\\OEM\\AppInstall.bat\" DestinationDir=\"C:\\Windows\\AppInstall\"/>\n            <File Source=\"C:\\OEM\\DeployAppx.bat\" DestinationDir=\"C:\\Windows\\AppInstall\"/>\n            <File Source=\"C:\\OEM\\OEMApp1.appx\" DestinationDir=\"C:\\Windows\\AppInstall\"/>\n            <File Source=\"C:\\OEM\\OEMApp1.cer\" DestinationDir=\"C:\\Windows\\AppInstall\"/>\n          </Files>\n        </OSComponent>\n      </Component>\n    </Package>\n    ```\n\n6.  Place the created files and related resources in directories of the development device as follows:\n    -   **C:\\\\Windows\\\\appinstall:**\n        -   appx\n        -   dependency appx(s)\n        -   temp appx (optional)\n        -   certificate(s)\n        -   AppInstall.bat\n        -   DeployApp.bat\n    -   **C:\\\\Winodws\\\\system32:**\n        -   Oemcustomization.cmd\n\n7.  Restart the device. The specified appx will be installed automatically when the device restarts.\n\n### <span id=\"Image-time_configurations\"></span><span id=\"image-time_configurations\"></span><span id=\"IMAGE-TIME_CONFIGURATIONS\"></span>Image-time configurations\n\nThe following are examples of configuration settings you may want to include in your OEMImageCustomization.cmd.\n\n-   Headless configuration\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\currentcontrolset\\control\\wininit /v Headless /t REG_DWORD /d 1 /f`\n\n-   Crash dump configuration\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl /v AutoReboot /t REG_DWORD /d 1 /f`\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl /v CrashDumpEnabled /t REG_DWORD /d 1 /f`\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl /v DedicatedDumpFile /t REG_SZ /d c:\\1.sys /f`\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl /v DumpFile /t REG_EXPAND_SZ /d c:\\1.dmp /f`\n\n    `call reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl /v DumpFileSize /t REG_DWORD /d 600 /f`\n\n### <span id=\"Run-time_configurations\"></span><span id=\"run-time_configurations\"></span><span id=\"RUN-TIME_CONFIGURATIONS\"></span>Run-time configurations\n\nThe allowed runtime settings listed below should be included in a provisioning package generated with Windows ICD. These settings must be included in a single provisioning package and the provisioning package should be wrapped into a single OEM package.\n\n-   Certificates\n-   Firewall configuration\n-   Startup app\n-   Edition upgrade\n-   Policies update\n\n## <span id=\"Configuring_IoT_Core_update_settings\"></span><span id=\"configuring_iot_core_update_settings\"></span><span id=\"CONFIGURING_IOT_CORE_UPDATE_SETTINGS\"></span>Configuring IoT Core update settings\n\n\nTo configure an image to receive only OS updates, you must configure generic POP packages. Generic POP packages exist in the following locations; replace them with the examples from the list below.\n\n-   **Intel Minnowboard Max**\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\X86\\\\fre\\\\Intel.Generic.DeviceInfo.cab\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\X86\\\\fre\\\\Intel.Generic.DeviceTargetingInfo.cab\n    -   Replace with: C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\x86\\\\MBMFM.xml\n-   **Raspberry Pi 2**\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\ARM\\\\fre\\\\ RASPBERRYPI.Generic.DeviceInfo.cab\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\ARM\\\\fre\\\\ RASPBERRYPI.Generic.DeviceTargetingInfo.cab\n    -   Replace with: C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\arm\\\\RPi2FM.xml\n-   **Qualcomm Dragonboard 410c**\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\ARM\\\\fre \\\\Qualcomm.Generic.DeviceInfo.cab\n    -   C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\MSPackages\\\\Retail\\\\ARM\\\\fre \\\\Qualcomm.Generic.DeviceTargetingInfo.cab\n    -   Replace with: C:\\\\Program Files (x86)\\\\Windows Kits\\\\10\\\\FMFiles\\\\arm\\\\QCDB410CFM.xml\n\n## <span id=\"Creating_an_enterprise_IoT_Core_UAP_provisioning_package\"></span><span id=\"creating_an_enterprise_iot_core_uap_provisioning_package\"></span><span id=\"CREATING_AN_ENTERPRISE_IOT_CORE_UAP_PROVISIONING_PACKAGE\"></span>Creating an enterprise IoT Core UAP provisioning package\n\n\nTo create an enterprise provisioning package that you can deploy to a IoT Core device, follow these steps.\n\n1.  Download the IoT Core license file to the development device. More information about this step can be found at [IoT Core Commercialization](https://www.windowsforiotdevices.com/).\n2.  Create a new provisioning package containing a license file by selecting \"New provisioning package\" in Windows ICD, as in the following image, and then click **Next.**![](images/icdappmanager.png)\n3.  In the **Enter Project Details** window, enter a **Name**, **Project folder**, and optionally a **Description** of the provisioning package, then click **Next**.\n4.  In the **Select Windows Edition** window, select IoT Core, then click **Next**.\n5.  In the optional **Import a provisioning package** window, click **Finish.**\n6.  In the **Customizations** page, add the [upgradeeditionwithlicense](https://msdn.microsoft.com/library/windows/hardware/mt573160.aspx) customization. this customization provides a license for an edition upgrade of iot core devices. ![](images/upgadeeditionwithlicense.png)\n7.  Export the provisioning package by clicking the **Export** dropdown in the main menu, then selecting **Provisioning Package**, adding the required package information and specify options for the package. Click **Next** and then specify where the package will be saved.\n8.  Click **Build** to start building the image. The project information is displayed in the build page and the progress bar indicates the build status. If you need to cancel the build, click **Cancel**. This cancels the current build process, closes the wizard, and takes you back to the **Customizations** Page.\n\n    During the image build process, a lot of what's happening during the build process is shown in the build output window. This window shows:\n\n    -   Warnings that might appear while the image is building.\n    -   Verbose build messages to indicate the phases within the image build process.\n    -   Error messages such as when the input files have schema errors or when the image fails to build.\n\n    If your build fails, an error message will be displayed. You can review the build log to identify the issue by clicking View in Notepad.\n\n    If your build is successful, the name of the image and its location will be displayed.\n\n9.  Create an OEM package, and wrap the newly created provisioning package in the OEM package, as in the following example:\n    ```\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <Package\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:xsd:\"http:///www.w3.org/2001/XMLSchema\"\n       Owner=\"OEM\"\n       Component=\"Enterprise\"\n       SubComponent=\"ProvisioningPackage\"\n       OwnerType=\"OEM\"\n       ReleaseType=\"Production\"\n       xmlns=\"urn:Microsoft.WindowsPhone/PackageSchema.v8.00\">\n       <Components>\n          <OSComponent>\n             <Files>\n                <File Source=\"C:\\ICD\\EnterpriseSKU\\EnterpriseProvisioningPkg.ppkg\" DestinationDir=\"C:\\OEM\" />\n             </Files>\n          </OSComponent>\n       </Components>\n    </Package>\n    ```\n\n10. The last step is to build a new IoT Core image with IMGGEN or Windows ICD and add the provisioning package as described in [Build and apply a provisioning package](https://msdn.microsoft.com/library/windows/hardware/dn916107).\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Download Windows 10 IoT Core](http://ms-iot.github.io/content/en-US/Downloads.md)\n\n \n\n \n\n\n\n"}