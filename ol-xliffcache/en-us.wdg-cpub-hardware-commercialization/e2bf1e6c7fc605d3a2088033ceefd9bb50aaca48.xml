{"nodes":[{"content":"WlanMTEQuerySelfTestResult","pos":[34,60]},{"content":"WlanMTEQuerySelfTestResult","pos":[167,193]},{"content":"WlanMTEQuerySelfTestResult","pos":[201,227]},{"content":"Queries the driver for the results of a previously requested self-test.","pos":[230,301]},{"pos":[381,387],"content":"Syntax"},{"pos":[1299,1309],"content":"Parameters"},{"content":"hAdapter","pos":[1394,1402]},{"content":"in<ph id=\"ph1\">\\]</ph> The handle to the Wi-Fi adapter, obtained by calling <bpt id=\"p1\">[</bpt>WlanMTEOpenHandle<ept id=\"p1\">](wlanmteopenhandle.md)</ept>.","pos":[1408,1508]},{"content":"eTestType","pos":[1595,1604]},{"content":"in<ph id=\"ph1\">\\]</ph> The type of self-test requested.","pos":[1610,1647]},{"content":"The values of <bpt id=\"p1\">*</bpt>eTestType<ept id=\"p1\">*</ept> are defined by the DOT11<ph id=\"ph1\">\\_</ph>MANUFACTURING<ph id=\"ph2\">\\_</ph>SELF<ph id=\"ph3\">\\_</ph>TEST<ph id=\"ph4\">\\_</ph>TYPE enumeration, shown below:","pos":[1648,1757]},{"content":"uTestID","pos":[2158,2165]},{"content":"in<ph id=\"ph1\">\\]</ph> The ID for the self-test requested.","pos":[2171,2211]},{"content":"pvContext","pos":[2298,2307]},{"content":"in<ph id=\"ph1\">\\]</ph> The context that was specified in the original self-test request.","pos":[2313,2383]},{"content":"pbResult","pos":[2467,2475]},{"content":"out<ph id=\"ph1\">\\]</ph> The final result of the self-test.","pos":[2481,2521]},{"content":"<bpt id=\"p1\">**</bpt>True<ept id=\"p1\">**</ept> if passed, <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept> if failed.","pos":[2522,2562]},{"content":"puPinFailedBitMask","pos":[2676,2694]},{"content":"out<ph id=\"ph1\">\\]</ph> The bit mask for adapter pins that failed the test.","pos":[2700,2757]},{"content":"puBytesWrittenOut","pos":[2868,2885]},{"content":"out<ph id=\"ph1\">\\]</ph> The number of bytes of optional data returned from the self-test results.","pos":[2891,2970]},{"content":"uOutBufLen","pos":[3060,3070]},{"content":"in<ph id=\"ph1\">\\]</ph> The length of the buffer for returning any additional information about the self-test.","pos":[3076,3167]},{"content":"pucOutBuffer","pos":[3263,3275]},{"content":"out<ph id=\"ph1\">\\]</ph> The buffer of length <bpt id=\"p1\">*</bpt><ph id=\"ph2\">\\*</ph>puBytesWrittenOut<ept id=\"p1\">*</ept> that provides additional information about the self-test.","pos":[3281,3387]},{"content":"The value of <bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\*</ph>puBytesWrittenOut<ept id=\"p1\">*</ept> must be less than or equal to the value of <bpt id=\"p2\">*</bpt>uOutBufLen<ept id=\"p2\">*</ept>.","pos":[3388,3479]},{"pos":[3562,3569],"content":"Remarks"},{"content":"The application must have received a <bpt id=\"p1\">**</bpt>dot11<ph id=\"ph1\">\\_</ph>manufacturing<ph id=\"ph2\">\\_</ph>callback<ph id=\"ph3\">\\_</ph>self<ph id=\"ph4\">\\_</ph>test<ph id=\"ph5\">\\_</ph>complete<ept id=\"p1\">**</ept> callback prior to calling this command.","pos":[3572,3705]},{"content":"It should also provide the same context value that was used in the original self-test request in order to the get the results for the appropriate self-test request.","pos":[3706,3870]},{"pos":[3968,3980],"content":"Return Value"},{"content":"If the function succeeds, the return value is ERROR<ph id=\"ph1\">\\_</ph>SUCCESS.","pos":[3983,4044]},{"content":"If the function fails, the return value is one of the system error codes.","pos":[4046,4119]},{"content":"The following table lists the error codes that may be returned.","pos":[4120,4183]},{"content":"Error code","pos":[4301,4311]},{"content":"Description","pos":[4334,4345]},{"content":"ERROR_INVALID_PARAMETER","pos":[4411,4434]},{"content":"Returned if the <ph id=\"ph1\">&lt;em&gt;</ph>pbResult<ph id=\"ph2\">&lt;/em&gt;</ph>, <ph id=\"ph3\">&lt;em&gt;</ph>puPinFailedBitMask<ph id=\"ph4\">&lt;/em&gt;</ph>, or <ph id=\"ph5\">&lt;em&gt;</ph>puBytesWrittenOut<ph id=\"ph6\">&lt;/em&gt;</ph> parameter is NULL, or if the test type specified by the <ph id=\"ph7\">&lt;em&gt;</ph>eTestType<ph id=\"ph8\">&lt;/em&gt;</ph> parameter is invalid.","pos":[4464,4654]},{"content":"ERROR_INVALID_HANDLE","pos":[4708,4728]},{"content":"Returned if the <ph id=\"ph1\">&lt;em&gt;</ph>hAdapter<ph id=\"ph2\">&lt;/em&gt;</ph> handle is invalid.","pos":[4758,4810]},{"content":"ERROR_OUTOFMEMORY","pos":[4863,4880]},{"content":"Returned if sufficient memory to perform the operation could not be allocated.","pos":[4910,4988]},{"pos":[5122,5134],"content":"Requirements"},{"pos":[5137,5158],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> wifimte.w"},{"pos":[5196,5210],"content":"Related topics"},{"content":"Wi-Fi manufacturing API","pos":[5214,5237]}],"content":"---\nauthor: kpacquer\nDescription: WlanMTEQuerySelfTestResult\nms.assetid: 7c728c46-7adb-4b1c-8b0e-85eb58ddd026\nMSHAttr: 'PreferredLib:/library/windows/hardware'\ntitle: WlanMTEQuerySelfTestResult\n---\n\n# WlanMTEQuerySelfTestResult\n\n\nQueries the driver for the results of a previously requested self-test.\n\n## <span id=\"Syntax\"></span><span id=\"syntax\"></span><span id=\"SYNTAX\"></span>Syntax\n\n\n``` syntax\nDWORD WlanMTEQuerySelfTestResult(\n    __in                            HANDLE                              hAdapter,\n    __in                            DOT11_MANUFACTURING_SELF_TEST_TYPE  eTestType,\n    __in                            ULONG                               uTestID,\n    __in                            PVOID                               pvContext,\n    __out                           BOOLEAN                             *pbResult,\n    __out                           ULONG                               *puPinFailedBitMask,\n    __out                           ULONG                               *puBytesWrittenOut,\n    __in                            ULONG                               uOutBufLen,\n    __out_bcount_opt(uOutBufLen)    PUCHAR                              pucOutBuffer\n);\n```\n\n## <span id=\"Parameters\"></span><span id=\"parameters\"></span><span id=\"PARAMETERS\"></span>Parameters\n\n\n<span id=\"hAdapter\"></span><span id=\"hadapter\"></span><span id=\"HADAPTER\"></span>*hAdapter*  \n\\[in\\] The handle to the Wi-Fi adapter, obtained by calling [WlanMTEOpenHandle](wlanmteopenhandle.md).\n\n<span id=\"eTestType\"></span><span id=\"etesttype\"></span><span id=\"ETESTTYPE\"></span>*eTestType*  \n\\[in\\] The type of self-test requested. The values of *eTestType* are defined by the DOT11\\_MANUFACTURING\\_SELF\\_TEST\\_TYPE enumeration, shown below:\n\n``` syntax\ntypedef enum DOT11_MANUFACTURING_SELF_TEST_TYPE {\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = 1,\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE,\n        DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE\n    } DOT11_MANUFACTURING_SELF_TEST_TYPE, * PDOT11_MANUFACTURING_SELF_TEST_TYPE;\n```\n\n<span id=\"uTestID\"></span><span id=\"utestid\"></span><span id=\"UTESTID\"></span>*uTestID*  \n\\[in\\] The ID for the self-test requested.\n\n<span id=\"pvContext\"></span><span id=\"pvcontext\"></span><span id=\"PVCONTEXT\"></span>*pvContext*  \n\\[in\\] The context that was specified in the original self-test request.\n\n<span id=\"pbResult\"></span><span id=\"pbresult\"></span><span id=\"PBRESULT\"></span>*pbResult*  \n\\[out\\] The final result of the self-test. **True** if passed, **False** if failed.\n\n<span id=\"puPinFailedBitMask\"></span><span id=\"pupinfailedbitmask\"></span><span id=\"PUPINFAILEDBITMASK\"></span>*puPinFailedBitMask*  \n\\[out\\] The bit mask for adapter pins that failed the test.\n\n<span id=\"puBytesWrittenOut\"></span><span id=\"pubyteswrittenout\"></span><span id=\"PUBYTESWRITTENOUT\"></span>*puBytesWrittenOut*  \n\\[out\\] The number of bytes of optional data returned from the self-test results.\n\n<span id=\"uOutBufLen\"></span><span id=\"uoutbuflen\"></span><span id=\"UOUTBUFLEN\"></span>*uOutBufLen*  \n\\[in\\] The length of the buffer for returning any additional information about the self-test.\n\n<span id=\"pucOutBuffer\"></span><span id=\"pucoutbuffer\"></span><span id=\"PUCOUTBUFFER\"></span>*pucOutBuffer*  \n\\[out\\] The buffer of length *\\*puBytesWrittenOut* that provides additional information about the self-test. The value of *\\*puBytesWrittenOut* must be less than or equal to the value of *uOutBufLen*.\n\n## <span id=\"Remarks\"></span><span id=\"remarks\"></span><span id=\"REMARKS\"></span>Remarks\n\n\nThe application must have received a **dot11\\_manufacturing\\_callback\\_self\\_test\\_complete** callback prior to calling this command. It should also provide the same context value that was used in the original self-test request in order to the get the results for the appropriate self-test request.\n\n## <span id=\"Return_Value\"></span><span id=\"return_value\"></span><span id=\"RETURN_VALUE\"></span>Return Value\n\n\nIf the function succeeds, the return value is ERROR\\_SUCCESS.\n\nIf the function fails, the return value is one of the system error codes. The following table lists the error codes that may be returned.\n\n<table>\n<colgroup>\n<col width=\"50%\" />\n<col width=\"50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th align=\"left\">Error code</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td align=\"left\"><p>ERROR_INVALID_PARAMETER</p></td>\n<td align=\"left\"><p>Returned if the <em>pbResult</em>, <em>puPinFailedBitMask</em>, or <em>puBytesWrittenOut</em> parameter is NULL, or if the test type specified by the <em>eTestType</em> parameter is invalid.</p></td>\n</tr>\n<tr class=\"even\">\n<td align=\"left\"><p>ERROR_INVALID_HANDLE</p></td>\n<td align=\"left\"><p>Returned if the <em>hAdapter</em> handle is invalid.</p></td>\n</tr>\n<tr class=\"odd\">\n<td align=\"left\"><p>ERROR_OUTOFMEMORY</p></td>\n<td align=\"left\"><p>Returned if sufficient memory to perform the operation could not be allocated.</p></td>\n</tr>\n</tbody>\n</table>\n\n \n\n## <span id=\"Requirements\"></span><span id=\"requirements\"></span><span id=\"REQUIREMENTS\"></span>Requirements\n\n\n**Header:** wifimte.w\n\n## <span id=\"related_topics\"></span>Related topics\n\n\n[Wi-Fi manufacturing API](wi-fi-manufacturing-api.md)\n\n \n\n \n\n\n\n\n\n\n"}