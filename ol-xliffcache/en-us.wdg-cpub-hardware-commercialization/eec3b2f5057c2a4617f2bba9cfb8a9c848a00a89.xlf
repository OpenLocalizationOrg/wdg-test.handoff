<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\optimizing-performance-and-responsiveness-exercise-2.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">eec3b2f5057c2a4617f2bba9cfb8a9c848a00a89</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit</source>
          <target>Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>While the Fast Startup assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.</source>
          <target>While the Fast Startup assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit</source>
          <target>Exercise 2 - Evaluate Fast Startup Using Windows Performance Toolkit</target>
        </segment>
      </unit>
      <unit id="104">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>While the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.</source>
          <target>While the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> assessment is an easy way to get measurements in an easy to read report, it requires you to install the ADK, which takes some time to execute.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>It’s possible to quickly capture a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> trace using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Recorder (WPR)</pc> tool.</source>
          <target>It’s possible to quickly capture a <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> trace using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Windows Performance Recorder (WPR)</pc> tool.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Step 1: Open Fast Startup trace using WPA</source>
          <target>Step 1: Open Fast Startup trace using WPA</target>
        </segment>
      </unit>
      <unit id="107">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Open <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Recorder (WPR)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start</pc> menu</source>
          <target>Open <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Recorder (WPR)</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start</pc> menu</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Modify the tracing configuration.</source>
          <target>Modify the tracing configuration.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">First Level Triage</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CPU Usage</pc> providers.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">First Level Triage</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CPU Usage</pc> providers.</target>
        </segment>
      </unit>
      <unit id="110">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">performance scenario</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Fast Startup</pc>.</source>
          <target>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">performance scenario</pc> to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Fast Startup</pc>.</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of iterations</pc> to 1 in order to gather a single trace.</source>
          <target>Change the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of iterations</pc> to 1 in order to gather a single trace.</target>
        </segment>
      </unit>
      <unit id="112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc>.</source>
          <target>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc>.</target>
        </segment>
      </unit>
      <unit id="113">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Enter a path to save the resulting trace, and click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Save</pc>.</source>
          <target>Enter a path to save the resulting trace, and click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Save</pc>.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>This will force the system to reboot to gather and save the trace.</source>
          <target>This will force the system to reboot to gather and save the trace.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Once the system reboots, wait 5 minutes for tracing to finish.</source>
          <target>Once the system reboots, wait 5 minutes for tracing to finish.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You now have a trace that can be analyzed with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Analyzer (WPA)</pc>.</source>
          <target>You now have a trace that can be analyzed with <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Analyzer (WPA)</pc>.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Step 2: Open Fast Startup trace using WPA</source>
          <target>Step 2: Open Fast Startup trace using WPA</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Analyzer (WPA)</pc> from the Start menu.</source>
          <target>Open <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Performance Analyzer (WPA)</pc> from the Start menu.</target>
        </segment>
      </unit>
      <unit id="119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, open the trace that you created in Step 1.</source>
          <target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, open the trace that you created in Step 1.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Profiles</pc> menu, and click on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Apply…</pc></source>
          <target>Open the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Profiles</pc> menu, and click on <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Apply…</pc></target>
        </segment>
      </unit>
      <unit id="121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Browse Catalog…</pc></source>
          <target>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Browse Catalog…</pc></target>
        </segment>
      </unit>
      <unit id="122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FastStartup.wpaprofile</pc>.</source>
          <target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">FastStartup.wpaprofile</pc>.</target>
        </segment>
      </unit>
      <unit id="123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open.</pc></source>
          <target>Click on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Open.</pc></target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>You now have applied a visualization profile to the trace in order to get some commonly used graphs (CPU, disk, etc.).</source>
          <target>You now have applied a visualization profile to the trace in order to get some commonly used graphs (CPU, disk, etc.).</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Step 3: Visualize the activity timeline</source>
          <target>Step 3: Visualize the activity timeline</target>
        </segment>
      </unit>
      <unit id="126">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Look at the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regions of Interest</pc> graph in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Deep Analysis</pc> tab</source>
          <target>Look at the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regions of Interest</pc> graph in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Deep Analysis</pc> tab</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This view provides a timeline overview of all the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> subphases mentioned in Exercise 1.</source>
          <target>This view provides a timeline overview of all the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Fast Startup</pc> subphases mentioned in Exercise 1.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Hovering the mouse over a region bar causes a popup window to appear and provide more information for the region itself.</source>
          <target>Hovering the mouse over a region bar causes a popup window to appear and provide more information for the region itself.</target>
        </segment>
      </unit>
      <unit id="129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If you put the mouse over the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Boot Main Path</pc> region, you can see its duration.</source>
          <target>If you put the mouse over the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Boot Main Path</pc> region, you can see its duration.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>In the example below, it lasts 13.6 seconds.</source>
          <target>In the example below, it lasts 13.6 seconds.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Take the time to navigate through the regions tree, and look at all the subphases to familiarize yourself with it.</source>
          <target>Take the time to navigate through the regions tree, and look at all the subphases to familiarize yourself with it.</target>
        </segment>
      </unit>
      <unit id="132">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The time that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Explorer</pc> takes to initialize and finish is the time it takes to create the Windows desktop and make it visible to the user.</source>
          <target>The time that <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Explorer</pc> takes to initialize and finish is the time it takes to create the Windows desktop and make it visible to the user.</target>
        </segment>
      </unit>
      <unit id="133">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This phase (and everything happening after, known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc>) can be impacted by processes started on boot.</source>
          <target>This phase (and everything happening after, known as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc>) can be impacted by processes started on boot.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Select a 90 second interval starting at the beginning of Explorer Initialization and zoom in.</source>
          <target>Select a 90 second interval starting at the beginning of Explorer Initialization and zoom in.</target>
        </segment>
      </unit>
      <unit id="135">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regions of Interest</pc> graph, there are two other valuable graphs: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CPU Usage (sampled)</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Disk usage</pc>.</source>
          <target>Under the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Regions of Interest</pc> graph, there are two other valuable graphs: <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CPU Usage (sampled)</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Disk usage</pc>.</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>They will be used to evaluate the impact that the software preload has on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc> resource consumption and responsiveness.</source>
          <target>They will be used to evaluate the impact that the software preload has on <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc> resource consumption and responsiveness.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>High CPU usage by applications and services can contribute to a poor user experience, such as UI unresponsiveness or video and sound glitches.</source>
          <target>High CPU usage by applications and services can contribute to a poor user experience, such as UI unresponsiveness or video and sound glitches.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>When a single process uses too much CPU, other processes can be delayed because they must compete for system resources.</source>
          <target>When a single process uses too much CPU, other processes can be delayed because they must compete for system resources.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>When a thread uses storage resources, it can increase the duration of the activity.</source>
          <target>When a thread uses storage resources, it can increase the duration of the activity.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>When multiple threads contend for the use of storage, the resulting random disk seeks make delays more significant.</source>
          <target>When multiple threads contend for the use of storage, the resulting random disk seeks make delays more significant.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Step 4: Analyze process CPU usage</source>
          <target>Step 4: Analyze process CPU usage</target>
        </segment>
      </unit>
      <unit id="142">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In order to evaluate how much CPU time is consumed by a process, focus on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (sampled)</pc> graph.</source>
          <target>In order to evaluate how much CPU time is consumed by a process, focus on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (sampled)</pc> graph.</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The data that displays in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (Sampled)</pc> graph represents samples of CPU activity taken at regular 1 ms sampling intervals.</source>
          <target>The data that displays in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (Sampled)</pc> graph represents samples of CPU activity taken at regular 1 ms sampling intervals.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Each row in the table represents a single sample.</source>
          <target>Each row in the table represents a single sample.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Any CPU activity that occurs between samples is not recorded by this sampling method.</source>
          <target>Any CPU activity that occurs between samples is not recorded by this sampling method.</target>
        </segment>
      </unit>
      <unit id="146">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Therefore, activities of very short duration such as interrupts are not well represented in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Sampling</pc> graph.</source>
          <target>Therefore, activities of very short duration such as interrupts are not well represented in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Sampling</pc> graph.</target>
        </segment>
      </unit>
      <unit id="147">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Review the CPU usage for each process to identify the processes that have the highest CPU usage (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Weight</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">%Weight</pc>).</source>
          <target>Review the CPU usage for each process to identify the processes that have the highest CPU usage (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Weight</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">%Weight</pc>).</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To do this, scroll down to the graph <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (sampled)</pc>.</source>
          <target>To do this, scroll down to the graph <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CPU Usage (sampled)</pc>.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>On the left, view the list of processes.</source>
          <target>On the left, view the list of processes.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Each active process that is selected on the left displays on the graph.</source>
          <target>Each active process that is selected on the left displays on the graph.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Tip:</source>
          <target>Tip:</target>
        </segment>
      </unit>
      <unit id="152">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>While using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WPA</pc> graphs, you can change the view to display both the graph and the table.</source>
          <target>While using <pc dataRefEnd="id2" dataRefStart="id1" id="p1">WPA</pc> graphs, you can change the view to display both the graph and the table.</target>
        </segment>
      </unit>
      <unit id="153">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>You can click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Maximize</pc> button to hide the other graphs displayed on the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Analysis</pc> tab.</source>
          <target>You can click the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Maximize</pc> button to hide the other graphs displayed on the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Analysis</pc> tab.</target>
        </segment>
      </unit>
      <unit id="154">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In this example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSHELLY.exe</pc> consumes 12.4 seconds of CPU time over the interval of 90 seconds currently analyzed.</source>
          <target>In this example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSHELLY.exe</pc> consumes 12.4 seconds of CPU time over the interval of 90 seconds currently analyzed.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>Since the CPU on this system has two cores, this represents a relative percentage of utilization of 6.9%.</source>
          <target>Since the CPU on this system has two cores, this represents a relative percentage of utilization of 6.9%.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Using this information, you can investigate the specific process that is causing this CPU consumption, or forward these details to the developer who owns this process.</source>
          <target>Using this information, you can investigate the specific process that is causing this CPU consumption, or forward these details to the developer who owns this process.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>You can add additional columns to extract more information (right-click on the table column headers):</source>
          <target>You can add additional columns to extract more information (right-click on the table column headers):</target>
        </segment>
      </unit>
      <unit id="158">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Thread ID</pc>: Identifier of the thread causing CPU usage</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Thread ID</pc>: Identifier of the thread causing CPU usage</target>
        </segment>
      </unit>
      <unit id="159">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stack</pc>: Call stack that highlights the code paths and functions that are causing CPU usage</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Stack</pc>: Call stack that highlights the code paths and functions that are causing CPU usage</target>
        </segment>
      </unit>
      <unit id="160">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the example above, there is only one thread causing most of the CPU usage within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSHELLY.exe</pc> process: Thread 2612, with 10.77 seconds of CPU activity.</source>
          <target>In the example above, there is only one thread causing most of the CPU usage within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSHELLY.exe</pc> process: Thread 2612, with 10.77 seconds of CPU activity.</target>
        </segment>
      </unit>
      <unit id="161">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The stack shows that this activity is coming from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSTACEY.dll</pc> module.</source>
          <target>The stack shows that this activity is coming from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSTACEY.dll</pc> module.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Step 5: Analyze process disk usage</source>
          <target>Step 5: Analyze process disk usage</target>
        </segment>
      </unit>
      <unit id="163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In order to evaluate how much disk bandwidth is consumed by a process, focus on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disk Usage</pc> graph.</source>
          <target>In order to evaluate how much disk bandwidth is consumed by a process, focus on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disk Usage</pc> graph.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>The columns of interest are:</source>
          <target>The columns of interest are:</target>
        </segment>
      </unit>
      <unit id="165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pri</pc>: Priority of the disk I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pri</pc>: Priority of the disk I/O.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>The three possible priority levels are: normal, low, and very low.</source>
          <target>The three possible priority levels are: normal, low, and very low.</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Type</pc>: Type of the I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Type</pc>: Type of the I/O.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>The three possible I/O types are: read, write, and flush.</source>
          <target>The three possible I/O types are: read, write, and flush.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Process</pc>: Identifier of the process that created the disk I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Process</pc>: Identifier of the process that created the disk I/O.</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Tree</pc>: Structured tree that represents the locations of the files accessed by the I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Tree</pc>: Structured tree that represents the locations of the files accessed by the I/O.</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Size</pc>: Size (in bytes) of the I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Size</pc>: Size (in bytes) of the I/O.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disk Service time</pc>: Amount of time that it takes for the disk to service the I/O.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disk Service time</pc>: Amount of time that it takes for the disk to service the I/O.</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Time</pc>: Amount of time that the I/O spent in the Windows I/O queue.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Time</pc>: Amount of time that the I/O spent in the Windows I/O queue.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Time</pc> is always longer than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Disk Service Time</pc> because an I/O can be queued when there is disk contention or when an I/O dispatcher at a higher priority must be completed first.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">IO Time</pc> is always longer than <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Disk Service Time</pc> because an I/O can be queued when there is disk contention or when an I/O dispatcher at a higher priority must be completed first.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Add these columns and arrange them to obtain this view:</source>
          <target>Add these columns and arrange them to obtain this view:</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Post on/off</pc> only takes into account normal priority I/Os.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Post on/off</pc> only takes into account normal priority I/Os.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>Investigate the information about those disk reads according to process.</source>
          <target>Investigate the information about those disk reads according to process.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Disk reads usually account for more disk access time than disk writes on boot, as a lot of data must be read from disk in order to launch processes and services.</source>
          <target>Disk reads usually account for more disk access time than disk writes on boot, as a lot of data must be read from disk in order to launch processes and services.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Click the color markers beside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pri</pc>: Very Low and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pri</pc>: Low series so that only the normal priority I/Os are visible on the graph.</source>
          <target>Click the color markers beside the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Pri</pc>: Very Low and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Pri</pc>: Low series so that only the normal priority I/Os are visible on the graph.</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Normal</pc> priority row.</source>
          <target>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Normal</pc> priority row.</target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>In the table view, expand the rows for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Write</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Read</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Flush</pc>, and then click the header for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Size</pc> column to sort the contents in decreasing order.</source>
          <target>In the table view, expand the rows for <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Write</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Read</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Flush</pc>, and then click the header for the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Size</pc> column to sort the contents in decreasing order.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Your screen should look something like this:</source>
          <target>Your screen should look something like this:</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>The preceding example shows the following:</source>
          <target>The preceding example shows the following:</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>152 MB of data was read from disk at normal priority.</source>
          <target>152 MB of data was read from disk at normal priority.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>129 MB of data was written to disk at normal priority.</source>
          <target>129 MB of data was written to disk at normal priority.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Those are mainly disk writes to persist the captured ETL trace file on storage.</source>
          <target>Those are mainly disk writes to persist the captured ETL trace file on storage.</target>
        </segment>
      </unit>
      <unit id="187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Read IO Type</pc> row.</source>
          <target>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Read IO Type</pc> row.</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You should now be able to see the processes that caused the largest amount of read disk I/O during <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc>.</source>
          <target>You should now be able to see the processes that caused the largest amount of read disk I/O during <pc dataRefEnd="id2" dataRefStart="id1" id="p1">post on/off</pc>.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>Identify the top three processes that are contributing to disk reads and that are not Windows components.</source>
          <target>Identify the top three processes that are contributing to disk reads and that are not Windows components.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Tree</pc> row for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ImageSTUART.exe</pc>, and navigate through it.</source>
          <target>In the table view, expand the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Tree</pc> row for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ImageSTUART.exe</pc>, and navigate through it.</target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the preceding example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSTUART.exe</pc> reads 13.5 MB of data from disk when launched during <pc dataRefEnd="id4" dataRefStart="id3" id="p2">post on/off</pc>, and most of the accesses are made reading DLL components in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Program Files</pc> folder.</source>
          <target>In the preceding example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ImageSTUART.exe</pc> reads 13.5 MB of data from disk when launched during <pc dataRefEnd="id4" dataRefStart="id3" id="p2">post on/off</pc>, and most of the accesses are made reading DLL components in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Program Files</pc> folder.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Using this information, a software developer should identify his components and processes, and determine if the component size can be reduced, or if the launch code path can be optimized to minimize the amount of data read from disk.</source>
          <target>Using this information, a software developer should identify his components and processes, and determine if the component size can be reduced, or if the launch code path can be optimized to minimize the amount of data read from disk.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>You can also use this data to identify the 3rd party processes that launched on boot and is causing high disk usage.</source>
          <target>You can also use this data to identify the 3rd party processes that launched on boot and is causing high disk usage.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>If a process appears to be introducing disk contention, it can then be removed from the image or simply not started at boot time.</source>
          <target>If a process appears to be introducing disk contention, it can then be removed from the image or simply not started at boot time.</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>