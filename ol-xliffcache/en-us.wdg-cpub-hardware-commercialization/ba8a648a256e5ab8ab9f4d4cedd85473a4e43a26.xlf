<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">docset\performance\wpt\inheritance.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">ba8a648a256e5ab8ab9f4d4cedd85473a4e43a26</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Inheritance</source>
          <target>Inheritance</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Inheritance</source>
          <target>Inheritance</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Inheritance</source>
          <target>Inheritance</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Windows Performance Recorder (WPR) recording profiles are stored in an XML file that has a .wprp extension.</source>
          <target>Windows Performance Recorder (WPR) recording profiles are stored in an XML file that has a .wprp extension.</target>
        </segment>
      </unit>
      <unit id="105">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>WPR supports inheritance of its objects by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base=””</pc> attribute in the WPR profile XML schema.</source>
          <target>WPR supports inheritance of its objects by using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Base=””</pc> attribute in the WPR profile XML schema.</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Inheritance allows you to keep, reuse, and build upon common profile definitions to record specialized scenarios.</source>
          <target>Inheritance allows you to keep, reuse, and build upon common profile definitions to record specialized scenarios.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>For example, you can add a provider to an existing profile and thereby change buffer sizes without altering a definition in the actual profile.</source>
          <target>For example, you can add a provider to an existing profile and thereby change buffer sizes without altering a definition in the actual profile.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Important</source>
          <target>Important</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>When you author WPRP profiles, you should either inherit profile data from WPR's built-in base profiles, or reuse the same session names to avoid enabling the same provider multiple times.</source>
          <target>When you author WPRP profiles, you should either inherit profile data from WPR's built-in base profiles, or reuse the same session names to avoid enabling the same provider multiple times.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>In this article:</source>
          <target>In this article:</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Base Profiles</source>
          <target>Base Profiles</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Example</source>
          <target>Example</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Inheritance Best Practices</source>
          <target>Inheritance Best Practices</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Base Profiles</source>
          <target>Base Profiles</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>You can use XML tags to change the content of a profile.</source>
          <target>You can use XML tags to change the content of a profile.</target>
        </segment>
      </unit>
      <unit id="116">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute.</source>
          <target>You must use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The possible values for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
          <target>The possible values for the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute are <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
          <data id="id11">**</data>
          <data id="id12">**</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DerivedProfile</pc> adds the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReadyThread</pc> system keyword to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CpuConfig</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CSwitch</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">SampledProfile</pc> keywords that <pc dataRefEnd="id12" dataRefStart="id11" id="p6">BaseProfile</pc> defines.</source>
          <target>In the following example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DerivedProfile</pc> adds the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ReadyThread</pc> system keyword to the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">CpuConfig</pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p4">CSwitch</pc>, and <pc dataRefEnd="id10" dataRefStart="id9" id="p5">SampledProfile</pc> keywords that <pc dataRefEnd="id12" dataRefStart="id11" id="p6">BaseProfile</pc> defines.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you do not specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute but you use inheritance, WPR uses the default value <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc>.</source>
          <target>If you do not specify the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Operation</pc> attribute but you use inheritance, WPR uses the default value <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set</pc>.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Example</source>
          <target>Example</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>The following example defines a profile for file logging mode.</source>
          <target>The following example defines a profile for file logging mode.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>The memory version inherits from the file version and overwrites the logging mode only.</source>
          <target>The memory version inherits from the file version and overwrites the logging mode only.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Inheritance Best Practices</source>
          <target>Inheritance Best Practices</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Poorly architected inheritance can create unintended consequences.</source>
          <target>Poorly architected inheritance can create unintended consequences.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>We recommend that you only derive collectors from collectors, or profiles from profiles.</source>
          <target>We recommend that you only derive collectors from collectors, or profiles from profiles.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>You should never combine derivations across multiple types of objects.</source>
          <target>You should never combine derivations across multiple types of objects.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>The following three examples describe two good ways to use inheritance; the third example describes a poor use of inheritance.</source>
          <target>The following three examples describe two good ways to use inheritance; the third example describes a poor use of inheritance.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Example 1: Good Use of Inheritance</source>
          <target>Example 1: Good Use of Inheritance</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>You want to use the specifications of Event Collector-A, with some modifications.</source>
          <target>You want to use the specifications of Event Collector-A, with some modifications.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>To do so:</source>
          <target>To do so:</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Define a second collector (Collector-B) that inherits its specifications from Collector-A.</source>
          <target>Define a second collector (Collector-B) that inherits its specifications from Collector-A.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Modify Collector-B.</source>
          <target>Modify Collector-B.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Set the profile to reference Collector-B.</source>
          <target>Set the profile to reference Collector-B.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>This is a good practice because only the collector object inherits attributes from another collector object, which is then directly referenced by the profile.</source>
          <target>This is a good practice because only the collector object inherits attributes from another collector object, which is then directly referenced by the profile.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Example 2: Good Use of Inheritance</source>
          <target>Example 2: Good Use of Inheritance</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Profile-A references Collector-A.</source>
          <target>Profile-A references Collector-A.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Profile-B inherits attributes from Profile-A.</source>
          <target>Profile-B inherits attributes from Profile-A.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>You modify particular attributes in Profile-B.</source>
          <target>You modify particular attributes in Profile-B.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>This is good practice because only the profile object derives from another profile object.</source>
          <target>This is good practice because only the profile object derives from another profile object.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Example 3: Poor Use of Inheritance</source>
          <target>Example 3: Poor Use of Inheritance</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Profile-A references Collector-A.</source>
          <target>Profile-A references Collector-A.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Collector-B inherits from Collector-A.</source>
          <target>Collector-B inherits from Collector-A.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Profile-B inherits from Profile-A and also references Collector-B.</source>
          <target>Profile-B inherits from Profile-A and also references Collector-B.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>In this case, Profile-B references Collector-B two times: one time through inheritance by Profile-A, and one time by direct reference to Collector-B.</source>
          <target>In this case, Profile-B references Collector-B two times: one time through inheritance by Profile-A, and one time by direct reference to Collector-B.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>In this case, it is unclear how the definition for Collector-B should be evaluated; that is, which derivation should take precedence.</source>
          <target>In this case, it is unclear how the definition for Collector-B should be evaluated; that is, which derivation should take precedence.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>This example portrays a bad practice because the ordering is undefined and might lead to contradictory outcomes based on ordering of operations.</source>
          <target>This example portrays a bad practice because the ordering is undefined and might lead to contradictory outcomes based on ordering of operations.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>This type of inheritance should be avoided.</source>
          <target>This type of inheritance should be avoided.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Authoring Recording Profiles</source>
          <target>Authoring Recording Profiles</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>WPRControlProfiles Schema</source>
          <target>WPRControlProfiles Schema</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>