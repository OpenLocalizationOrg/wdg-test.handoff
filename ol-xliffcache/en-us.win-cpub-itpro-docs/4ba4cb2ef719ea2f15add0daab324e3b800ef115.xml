{"nodes":[{"content":"How to Convert a Package Created in a Previous Version of App-V","pos":[11,74]},{"content":"How to Convert a Package Created in a Previous Version of App-V","pos":[88,151]},{"content":"How to Convert a Package Created in a Previous Version of App-V","pos":[326,389]},{"content":"You can use the package converter utility to upgrade virtual application packages that have been created with previous versions of App-V.","pos":[392,529]},{"content":"Note","pos":[533,537]},{"content":"If you are running a computer with a 64-bit architecture, you must use the x86 version of PowerShell.","pos":[542,643]},{"content":"The package converter can only directly convert packages that were created by using the App-V 4.5 sequencer or a subsequent version.","pos":[648,780]},{"content":"Packages that were created using a version prior to App-V 4.5 must be upgraded to the App-V 4.5 or App-V 4.6 format before conversion.","pos":[781,915]},{"content":"The following information provides direction for converting existing virtual application packages.","pos":[917,1015]},{"content":"Important","pos":[1019,1028]},{"content":"You must configure the package converter to always save the package ingredients file to a secure location and directory.","pos":[1033,1153]},{"content":"A secure location is accessible only by an administrator.","pos":[1154,1211]},{"content":"Additionally, when you deploy the package, you should save the package to a location that is secure, or make sure that no other user is allowed to be logged in during the conversion process.","pos":[1212,1402]},{"content":"Getting started","pos":[1409,1424]},{"content":"Install the App-V Sequencer on a computer in your environment.","pos":[1432,1494]},{"content":"For information about how to install the Sequencer, see <bpt id=\"p1\">[</bpt>How to Install the Sequencer<ept id=\"p1\">](how-to-install-the-sequencer-beta-gb18030.md)</ept>.","pos":[1495,1628]},{"content":"The following cmdlets are available:","pos":[1640,1676]},{"content":"Test-AppvLegacyPackage – This cmdlet is designed to check packages.","pos":[1686,1753]},{"content":"It will return information about any failures with the package such as missing <bpt id=\"p1\">**</bpt>.sft<ept id=\"p1\">**</ept> files, an invalid source, <bpt id=\"p2\">**</bpt>.osd<ept id=\"p2\">**</ept> file errors, or invalid package version.","pos":[1754,1917]},{"content":"This cmdlet will not parse the <bpt id=\"p1\">**</bpt>.sft<ept id=\"p1\">**</ept> file or do any in depth validation.","pos":[1918,1993]},{"content":"For information about options and basic functionality for this cmdlet, using the PowerShell cmdline, type <ph id=\"ph1\">`Test-AppvLegacyPackage -?`</ph>.","pos":[1994,2128]},{"content":"ConvertFrom-AppvLegacyPackage – To convert an existing package, type <ph id=\"ph1\">`ConvertFrom-AppvLegacyPackage c:\\contentStore c:\\convertedPackages`</ph>.","pos":[2138,2276]},{"content":"In this command, <ph id=\"ph1\">`c:\\contentStore`</ph> represents the location of the existing package and <ph id=\"ph2\">`c:\\convertedPackages`</ph> is the output directory to which the resulting App-V 5.0 virtual application package file will be saved.","pos":[2277,2491]},{"content":"By default, if you do not specify a new name, the old package name will be used for the App-V 5.0 filename.","pos":[2492,2599]},{"content":"Additionally, the package converter optimizes performance of packages in App-V 5.0 by setting the package to stream fault the App-V package.","pos":[2609,2749]},{"content":"This is more performant than the primary feature block and fully downloading the package.","pos":[2751,2840]},{"content":"The flag <bpt id=\"p1\">**</bpt>DownloadFullPackageOnFirstLaunch<ept id=\"p1\">**</ept> allows you to convert the package and set the package to be fully downloaded by default.","pos":[2841,2975]},{"pos":[2985,3082],"content":"**Note**  \nBefore you specify the output directory, you must create the output directory.","leadings":["","        "],"nodes":[{"content":"Note","pos":[2,6]},{"content":"Before you specify the output directory, you must create the output directory.","pos":[11,89]}]},{"content":"Advanced Conversion Tips","pos":[3101,3125]},{"content":"Piping - PowerShell supports piping.","pos":[3137,3173]},{"content":"Piping allows you to call <ph id=\"ph1\">`dir c:\\contentStore\\myPackage | Test-AppvLegacyPackage`</ph>.","pos":[3174,3257]},{"content":"In this example, the directory object that represents <ph id=\"ph1\">`myPackage`</ph> will be given as input to the <ph id=\"ph2\">`Test-AppvLegacyPackage`</ph> command and bound to the <ph id=\"ph3\">`-Source`</ph> parameter.","pos":[3258,3424]},{"content":"Piping like this is especially useful when you want to batch commands together; for example, <ph id=\"ph1\">`dir .\\ | Test-AppvLegacyPackage | ConvertFrom-AppvLegacyAppvPackage -Target .\\ConvertedPackages`</ph>.","pos":[3425,3616]},{"content":"This piped command would test the packages and then pass those objects on to actually be converted.","pos":[3617,3716]},{"content":"You can also apply a filter on packages without errors or only specify a directory which contains an <bpt id=\"p1\">**</bpt>.sprj<ept id=\"p1\">**</ept> file or pipe them to another cmdlet that adds the filtered package to the server or publishes them to the App-V 5.0 client.","pos":[3717,3951]},{"content":"Batching - The PowerShell command enables batching.","pos":[3961,4012]},{"content":"More specifically, the cmdlets support taking a string<ph id=\"ph1\">\\[\\]</ph> object for the <ph id=\"ph2\">`-Source`</ph> parameter which represents a list of directory paths.","pos":[4013,4150]},{"content":"This allows you to enter <ph id=\"ph1\">`$packages = dir c:\\contentStore`</ph> and then call <ph id=\"ph2\">`ConvertFrom-AppvLegacyAppvPackage-Source $packages -Target c:\\ConvertedPackages`</ph> or to use piping and call <ph id=\"ph3\">`dir c:\\ContentStore | ConvertFrom-AppvLegacyAppvPackage -Target C:\\ConvertedPackages`</ph>.","pos":[4151,4419]},{"content":"Other functionality - PowerShell has other built-in functionality for features such as aliases, piping, lazy-binding, .NET object, and many others.","pos":[4429,4576]},{"content":"All of these are usable in PowerShell and can help you create advanced scenarios for the Package Converter.","pos":[4577,4684]},{"content":"<bpt id=\"p1\">**</bpt>Got a suggestion for App-V<ept id=\"p1\">**</ept>?","pos":[4690,4721]},{"content":"Add or vote on suggestions <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://appv.uservoice.com/forums/280448-microsoft-application-virtualization)</ept>.","pos":[4722,4834]},{"content":"<bpt id=\"p1\">**</bpt>Got an App-V issu<ept id=\"p1\">**</ept>e?","pos":[4835,4858]},{"content":"Use the <bpt id=\"p1\">[</bpt>App-V TechNet Forum<ept id=\"p1\">](https://social.technet.microsoft.com/Forums/home?forum=mdopappv)</ept>.","pos":[4859,4954]},{"content":"Related topics","pos":[4959,4973]},{"content":"Operations for App-V 5.0","pos":[4977,5001]}],"content":"---\ntitle: How to Convert a Package Created in a Previous Version of App-V\ndescription: How to Convert a Package Created in a Previous Version of App-V\nauthor: jamiejdt\nms.assetid: b092a5f8-cc5f-4df8-a5a2-0a68fd7bd5b2\nms.pagetype: mdop, appcompat, virtualization\nms.mktglfcycl: deploy\nms.sitesec: library\nms.prod: w10\n---\n\n\n# How to Convert a Package Created in a Previous Version of App-V\n\n\nYou can use the package converter utility to upgrade virtual application packages that have been created with previous versions of App-V.\n\n**Note**  \nIf you are running a computer with a 64-bit architecture, you must use the x86 version of PowerShell.\n\n \n\nThe package converter can only directly convert packages that were created by using the App-V 4.5 sequencer or a subsequent version. Packages that were created using a version prior to App-V 4.5 must be upgraded to the App-V 4.5 or App-V 4.6 format before conversion.\n\nThe following information provides direction for converting existing virtual application packages.\n\n**Important**  \nYou must configure the package converter to always save the package ingredients file to a secure location and directory. A secure location is accessible only by an administrator. Additionally, when you deploy the package, you should save the package to a location that is secure, or make sure that no other user is allowed to be logged in during the conversion process.\n\n \n\n**Getting started**\n\n1.  Install the App-V Sequencer on a computer in your environment. For information about how to install the Sequencer, see [How to Install the Sequencer](how-to-install-the-sequencer-beta-gb18030.md).\n\n2.  \n\n    The following cmdlets are available:\n\n    -   Test-AppvLegacyPackage – This cmdlet is designed to check packages. It will return information about any failures with the package such as missing **.sft** files, an invalid source, **.osd** file errors, or invalid package version. This cmdlet will not parse the **.sft** file or do any in depth validation. For information about options and basic functionality for this cmdlet, using the PowerShell cmdline, type `Test-AppvLegacyPackage -?`.\n\n    -   ConvertFrom-AppvLegacyPackage – To convert an existing package, type `ConvertFrom-AppvLegacyPackage c:\\contentStore c:\\convertedPackages`. In this command, `c:\\contentStore` represents the location of the existing package and `c:\\convertedPackages` is the output directory to which the resulting App-V 5.0 virtual application package file will be saved. By default, if you do not specify a new name, the old package name will be used for the App-V 5.0 filename.\n\n        Additionally, the package converter optimizes performance of packages in App-V 5.0 by setting the package to stream fault the App-V package.  This is more performant than the primary feature block and fully downloading the package. The flag **DownloadFullPackageOnFirstLaunch** allows you to convert the package and set the package to be fully downloaded by default.\n\n        **Note**  \n        Before you specify the output directory, you must create the output directory.\n\n         \n\n    **Advanced Conversion Tips**\n\n    -   Piping - PowerShell supports piping. Piping allows you to call `dir c:\\contentStore\\myPackage | Test-AppvLegacyPackage`. In this example, the directory object that represents `myPackage` will be given as input to the `Test-AppvLegacyPackage` command and bound to the `-Source` parameter. Piping like this is especially useful when you want to batch commands together; for example, `dir .\\ | Test-AppvLegacyPackage | ConvertFrom-AppvLegacyAppvPackage -Target .\\ConvertedPackages`. This piped command would test the packages and then pass those objects on to actually be converted. You can also apply a filter on packages without errors or only specify a directory which contains an **.sprj** file or pipe them to another cmdlet that adds the filtered package to the server or publishes them to the App-V 5.0 client.\n\n    -   Batching - The PowerShell command enables batching. More specifically, the cmdlets support taking a string\\[\\] object for the `-Source` parameter which represents a list of directory paths. This allows you to enter `$packages = dir c:\\contentStore` and then call `ConvertFrom-AppvLegacyAppvPackage-Source $packages -Target c:\\ConvertedPackages` or to use piping and call `dir c:\\ContentStore | ConvertFrom-AppvLegacyAppvPackage -Target C:\\ConvertedPackages`.\n\n    -   Other functionality - PowerShell has other built-in functionality for features such as aliases, piping, lazy-binding, .NET object, and many others. All of these are usable in PowerShell and can help you create advanced scenarios for the Package Converter.\n\n    **Got a suggestion for App-V**? Add or vote on suggestions [here](http://appv.uservoice.com/forums/280448-microsoft-application-virtualization). **Got an App-V issu**e? Use the [App-V TechNet Forum](https://social.technet.microsoft.com/Forums/home?forum=mdopappv).\n\n## Related topics\n\n\n[Operations for App-V 5.0](operations-for-app-v-50.md)\n\n \n\n \n\n\n\n\n\n"}