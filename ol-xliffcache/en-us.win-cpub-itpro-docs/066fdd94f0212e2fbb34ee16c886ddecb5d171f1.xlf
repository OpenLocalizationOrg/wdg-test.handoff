<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\keep-secure\bitlocker-countermeasures.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">066fdd94f0212e2fbb34ee16c886ddecb5d171f1</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>BitLocker Countermeasures (Windows 10)</source>
          <target>BitLocker Countermeasures (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Windows uses technologies including TPM, Secure Boot, Trusted Boot, and Early Launch Antimalware (ELAM) to protect against attacks on the BitLocker encryption key.</source>
          <target>Windows uses technologies including TPM, Secure Boot, Trusted Boot, and Early Launch Antimalware (ELAM) to protect against attacks on the BitLocker encryption key.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>BitLocker Countermeasures</source>
          <target>BitLocker Countermeasures</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Applies to</source>
          <target>Applies to</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Windows 10</source>
          <target>Windows 10</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Windows uses technologies including TPM, Secure Boot, Trusted Boot, and Early Launch Antimalware (ELAM) to protect against attacks on the BitLocker encryption key.</source>
          <target>Windows uses technologies including TPM, Secure Boot, Trusted Boot, and Early Launch Antimalware (ELAM) to protect against attacks on the BitLocker encryption key.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>BitLocker is part of a strategic approach to securing mobile data through encryption technology.</source>
          <target>BitLocker is part of a strategic approach to securing mobile data through encryption technology.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>Data on a lost or stolen computer is vulnerable to unauthorized access, either by running a software attack tool against it or by transferring the computer’s hard disk to a different computer.</source>
          <target>Data on a lost or stolen computer is vulnerable to unauthorized access, either by running a software attack tool against it or by transferring the computer’s hard disk to a different computer.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Today, BitLocker helps mitigate unauthorized data access on lost or stolen computers before the operating system is started by:</source>
          <target>Today, BitLocker helps mitigate unauthorized data access on lost or stolen computers before the operating system is started by:</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Encrypting the hard drives on your computer.</source>
          <target>Encrypting the hard drives on your computer.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>For example, you can turn on BitLocker for your operating system drive, a fixed data drive, or a removable data drive (such as a USB flash drive).</source>
          <target>For example, you can turn on BitLocker for your operating system drive, a fixed data drive, or a removable data drive (such as a USB flash drive).</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Turning on BitLocker for your operating system drive encrypts all system files on the operating system drive, including the swap files and hibernation files.</source>
          <target>Turning on BitLocker for your operating system drive encrypts all system files on the operating system drive, including the swap files and hibernation files.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Ensuring the integrity of early boot components and boot configuration data.</source>
          <target>Ensuring the integrity of early boot components and boot configuration data.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>On devices that have a TPM version 1.2 or higher, BitLocker uses the enhanced security capabilities of the TPM to help ensure that your data is accessible only if the computer’s boot components appear unaltered and the encrypted disk is located in the original computer.</source>
          <target>On devices that have a TPM version 1.2 or higher, BitLocker uses the enhanced security capabilities of the TPM to help ensure that your data is accessible only if the computer’s boot components appear unaltered and the encrypted disk is located in the original computer.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>The sections that follow provide more detailed information about the different technologies that Windows uses to protect against attacks on the BitLocker encryption key in four different boot phases: before startup, during pre-boot, during startup, and finally after startup.</source>
          <target>The sections that follow provide more detailed information about the different technologies that Windows uses to protect against attacks on the BitLocker encryption key in four different boot phases: before startup, during pre-boot, during startup, and finally after startup.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Protection before startup</source>
          <target>Protection before startup</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Before Windows starts, you must rely on security features implemented as part of the device hardware, including TPM andSecure Boot.</source>
          <target>Before Windows starts, you must rely on security features implemented as part of the device hardware, including TPM andSecure Boot.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Fortunately, many modern computers feature TPM.</source>
          <target>Fortunately, many modern computers feature TPM.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Trusted Platform Module</source>
          <target>Trusted Platform Module</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>Software alone isn’t sufficient to protect a system.</source>
          <target>Software alone isn’t sufficient to protect a system.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>After an attacker has compromised software, the software might be unable to detect the compromise.</source>
          <target>After an attacker has compromised software, the software might be unable to detect the compromise.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Therefore, a single successful software compromise results in an untrusted system that might never be detected.</source>
          <target>Therefore, a single successful software compromise results in an untrusted system that might never be detected.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Hardware, however, is much more difficult to modify.</source>
          <target>Hardware, however, is much more difficult to modify.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>A TPM is a microchip designed to provide basic security-related functions, primarily involving encryption keys.</source>
          <target>A TPM is a microchip designed to provide basic security-related functions, primarily involving encryption keys.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>The TPM is usually installed on the motherboard of a computer and communicates with the rest of the system through a hardware bus.</source>
          <target>The TPM is usually installed on the motherboard of a computer and communicates with the rest of the system through a hardware bus.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Physically, TPMs are designed to be tamper-proof.</source>
          <target>Physically, TPMs are designed to be tamper-proof.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>If an attacker tries to physically retrieve data directly from the chip, they’ll probably destroy the chip in the process.</source>
          <target>If an attacker tries to physically retrieve data directly from the chip, they’ll probably destroy the chip in the process.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>By binding the BitLocker encryption key with the TPM and properly configuring the device, it’s nearly impossible for an attacker to gain access to the BitLocker-encrypted data without obtaining an authorized user’s credentials.</source>
          <target>By binding the BitLocker encryption key with the TPM and properly configuring the device, it’s nearly impossible for an attacker to gain access to the BitLocker-encrypted data without obtaining an authorized user’s credentials.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Therefore, computers with a TPM can provide a high level of protection against attacks that attempt to directly retrieve the BitLocker encryption key.</source>
          <target>Therefore, computers with a TPM can provide a high level of protection against attacks that attempt to directly retrieve the BitLocker encryption key.</target>
        </segment>
      </unit>
      <unit id="130">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](trusted-platform-module-overview.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info about TPM, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trusted Platform Module</pc>.</source>
          <target>For more info about TPM, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Trusted Platform Module</pc>.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>UEFI and Secure Boot</source>
          <target>UEFI and Secure Boot</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>No operating system can protect a device when the operating system is offline.</source>
          <target>No operating system can protect a device when the operating system is offline.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>For that reason, Microsoft worked closely with hardware vendors to require firmware-level protection against boot and rootkits that might compromise an encryption solution’s encryption keys.</source>
          <target>For that reason, Microsoft worked closely with hardware vendors to require firmware-level protection against boot and rootkits that might compromise an encryption solution’s encryption keys.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>The UEFI is a programmable boot environment introduced as a replacement for BIOS, which has for the most part remained unchanged for the past 30 years.</source>
          <target>The UEFI is a programmable boot environment introduced as a replacement for BIOS, which has for the most part remained unchanged for the past 30 years.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Like BIOS, PCs start UEFI before any other software; it initializes devices, and UEFI then starts the operating system’s bootloader.</source>
          <target>Like BIOS, PCs start UEFI before any other software; it initializes devices, and UEFI then starts the operating system’s bootloader.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>As part of its introduction into the pre–operating system environment, UEFI serves a number of purposes, but one of the key benefits is to protect newer devices against a sophisticated type of malware called a bootkit through the use of its Secure Boot feature.</source>
          <target>As part of its introduction into the pre–operating system environment, UEFI serves a number of purposes, but one of the key benefits is to protect newer devices against a sophisticated type of malware called a bootkit through the use of its Secure Boot feature.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Recent implementations of UEFI (starting with version 2.3.1) can verify the digital signatures of the device’s firmware before running it.</source>
          <target>Recent implementations of UEFI (starting with version 2.3.1) can verify the digital signatures of the device’s firmware before running it.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Because only the PC’s hardware manufacturer has access to the digital certificate required to create a valid firmware signature, UEFI can prevent firmware-based bootkits.</source>
          <target>Because only the PC’s hardware manufacturer has access to the digital certificate required to create a valid firmware signature, UEFI can prevent firmware-based bootkits.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Thus, UEFI is the first link in the chain of trust.</source>
          <target>Thus, UEFI is the first link in the chain of trust.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Secure Boot is the foundation of platform and firmware security and was created to enhance security in the pre-boot environment regardless of device architecture.</source>
          <target>Secure Boot is the foundation of platform and firmware security and was created to enhance security in the pre-boot environment regardless of device architecture.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Using signatures to validate the integrity of firmware images before they are allowed to execute, Secure Boot helps reduce the risk of bootloader attacks.</source>
          <target>Using signatures to validate the integrity of firmware images before they are allowed to execute, Secure Boot helps reduce the risk of bootloader attacks.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>The purpose of Secure Boot is to block untrusted firmware and bootloaders (signed or unsigned) from being able to start on the system.</source>
          <target>The purpose of Secure Boot is to block untrusted firmware and bootloaders (signed or unsigned) from being able to start on the system.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>With the legacy BIOS boot process, the pre–operating system environment is vulnerable to attacks by redirecting bootloader handoff to possible malicious loaders.</source>
          <target>With the legacy BIOS boot process, the pre–operating system environment is vulnerable to attacks by redirecting bootloader handoff to possible malicious loaders.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>These loaders could remain undetected to operating system and antimalware software.</source>
          <target>These loaders could remain undetected to operating system and antimalware software.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>The diagram in Figure 1 contrasts the BIOS and UEFI startup processes.</source>
          <target>The diagram in Figure 1 contrasts the BIOS and UEFI startup processes.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>the bios and uefi startup processes</source>
          <target>the bios and uefi startup processes</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Figure 1.</source>
          <target>Figure 1.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>The BIOS and UEFI startup processes</source>
          <target>The BIOS and UEFI startup processes</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>With Secure Boot enabled, UEFI, in coordination with the TPM, can examine the bootloader and determine whether it’s trustworthy.</source>
          <target>With Secure Boot enabled, UEFI, in coordination with the TPM, can examine the bootloader and determine whether it’s trustworthy.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>To determine whether the bootloader is trustworthy, UEFI examines the bootloader’s digital signature.</source>
          <target>To determine whether the bootloader is trustworthy, UEFI examines the bootloader’s digital signature.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>Using the digital signature, UEFI verifies that the bootloader was signed using a trusted certificate.</source>
          <target>Using the digital signature, UEFI verifies that the bootloader was signed using a trusted certificate.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>If the bootloader passes these two tests, UEFI knows that the bootloader isn’t a bootkit and starts it.</source>
          <target>If the bootloader passes these two tests, UEFI knows that the bootloader isn’t a bootkit and starts it.</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>At this point, Trusted Boot takes over, and the Windows bootloader, using the same cryptographic technologies that UEFI used to verify the bootloader, then verifies that the Windows system files haven’t been changed.</source>
          <target>At this point, Trusted Boot takes over, and the Windows bootloader, using the same cryptographic technologies that UEFI used to verify the bootloader, then verifies that the Windows system files haven’t been changed.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>All Windows 8–certified devices must meet several requirements related to UEFI-based Secure Boot:</source>
          <target>All Windows 8–certified devices must meet several requirements related to UEFI-based Secure Boot:</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>They must have Secure Boot enabled by default.</source>
          <target>They must have Secure Boot enabled by default.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>They must trust Microsoft’s certificate (and thus any bootloader Microsoft has signed).</source>
          <target>They must trust Microsoft’s certificate (and thus any bootloader Microsoft has signed).</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>They must allow the user to configure Secure Boot to trust other signed bootloaders.</source>
          <target>They must allow the user to configure Secure Boot to trust other signed bootloaders.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Except for Windows RT devices, they must allow the user to completely disable Secure Boot.</source>
          <target>Except for Windows RT devices, they must allow the user to completely disable Secure Boot.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>These requirements help protect you from rootkits while allowing you to run any operating system you want.</source>
          <target>These requirements help protect you from rootkits while allowing you to run any operating system you want.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>You have three options for running non-Microsoft operating systems:</source>
          <target>You have three options for running non-Microsoft operating systems:</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Use an operating system with a certified bootloader.</source>
          <target>Use an operating system with a certified bootloader.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Microsoft can analyze and sign non-Microsoft bootloaders so that they can be trusted.</source>
          <target>Microsoft can analyze and sign non-Microsoft bootloaders so that they can be trusted.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>The Linux community is using this process to enable Linux to take advantage of Secure Boot on Windows-certified devices.</source>
          <target>The Linux community is using this process to enable Linux to take advantage of Secure Boot on Windows-certified devices.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Configure UEFI to trust your custom bootloader.</source>
          <target>Configure UEFI to trust your custom bootloader.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Your device can trust a signed, non-certified bootloader that you specify in the UEFI database, allowing you to run any operating system, including homemade operating systems.</source>
          <target>Your device can trust a signed, non-certified bootloader that you specify in the UEFI database, allowing you to run any operating system, including homemade operating systems.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>Turn off Secure Boot.</source>
          <target>Turn off Secure Boot.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>You can turn off Secure Boot.</source>
          <target>You can turn off Secure Boot.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>This does not help protect you from bootkits, however.</source>
          <target>This does not help protect you from bootkits, however.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>To prevent malware from abusing these options, the user has to manually configure the UEFI firmware to trust a non-certified bootloader or to turn off Secure Boot.</source>
          <target>To prevent malware from abusing these options, the user has to manually configure the UEFI firmware to trust a non-certified bootloader or to turn off Secure Boot.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Software cannot change the Secure Boot settings.</source>
          <target>Software cannot change the Secure Boot settings.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>Any device that doesn’t require Secure Boot or a similar bootloader-verification technology, regardless of the architecture or operating system, is vulnerable to bootkits, which can be used to compromise the encryption solution.</source>
          <target>Any device that doesn’t require Secure Boot or a similar bootloader-verification technology, regardless of the architecture or operating system, is vulnerable to bootkits, which can be used to compromise the encryption solution.</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>UEFI is secure by design, but it’s critical to protect the Secure Boot configuration by using password protection.</source>
          <target>UEFI is secure by design, but it’s critical to protect the Secure Boot configuration by using password protection.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>In addition, although several well-publicized attacks against UEFI have occurred, they were exploiting faulty UEFI implementations.</source>
          <target>In addition, although several well-publicized attacks against UEFI have occurred, they were exploiting faulty UEFI implementations.</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Those attacks are ineffective when UEFI is implemented properly.</source>
          <target>Those attacks are ineffective when UEFI is implemented properly.</target>
        </segment>
      </unit>
      <unit id="175">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://technet.microsoft.com/windows/dn168167.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about Secure Boot, refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Securing the Windows 8.1 Boot Process</pc>.</source>
          <target>For more information about Secure Boot, refer to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Securing the Windows 8.1 Boot Process</pc>.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Protection during pre-boot: Pre-boot authentication</source>
          <target>Protection during pre-boot: Pre-boot authentication</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>Pre-boot authentication with BitLocker is a process that requires the use of either a Trusted Platform Module (TPM), user input, such as a PIN, or both, depending on hardware and operating system configuration, to authenticate prior to making the contents of the system drive accessible.</source>
          <target>Pre-boot authentication with BitLocker is a process that requires the use of either a Trusted Platform Module (TPM), user input, such as a PIN, or both, depending on hardware and operating system configuration, to authenticate prior to making the contents of the system drive accessible.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>In the case of BitLocker, BitLocker encrypts the entire drive, including all system files.</source>
          <target>In the case of BitLocker, BitLocker encrypts the entire drive, including all system files.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>BitLocker accesses and stores the encryption key in memory only after a pre-boot authentication is completed using one or more of the following options: Trusted Platform Module (TPM), user provides a specific PIN, USB startup key.</source>
          <target>BitLocker accesses and stores the encryption key in memory only after a pre-boot authentication is completed using one or more of the following options: Trusted Platform Module (TPM), user provides a specific PIN, USB startup key.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>If Windows can’t access the encryption key, the device can’t read or edit the files on the system drive.</source>
          <target>If Windows can’t access the encryption key, the device can’t read or edit the files on the system drive.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Even if an attacker takes the disk out of the PC or steals the entire PC, they won’t be able to read or edit the files without the encryption key.</source>
          <target>Even if an attacker takes the disk out of the PC or steals the entire PC, they won’t be able to read or edit the files without the encryption key.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>The only option for bypassing pre-boot authentication is entering the highly complex, 48-digit recovery key.</source>
          <target>The only option for bypassing pre-boot authentication is entering the highly complex, 48-digit recovery key.</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>The BitLocker pre-boot authentication capability is not specifically designed to prevent the operating system from starting: That’s merely a side effect of how BitLocker protects data confidentiality and system integrity.</source>
          <target>The BitLocker pre-boot authentication capability is not specifically designed to prevent the operating system from starting: That’s merely a side effect of how BitLocker protects data confidentiality and system integrity.</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>Pre-boot authentication is designed to prevent the encryption key from being loaded to system memory on devices that are vulnerable to certain types of cold boot attacks.</source>
          <target>Pre-boot authentication is designed to prevent the encryption key from being loaded to system memory on devices that are vulnerable to certain types of cold boot attacks.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Many modern devices prevent an attacker from easily removing the memory, and Microsoft expects those devices to become even more common in the future.</source>
          <target>Many modern devices prevent an attacker from easily removing the memory, and Microsoft expects those devices to become even more common in the future.</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>On computers with a compatible TPM, operating system drives that are BitLocker-protected can be unlocked in four ways:</source>
          <target>On computers with a compatible TPM, operating system drives that are BitLocker-protected can be unlocked in four ways:</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>TPM-only.</source>
          <target>TPM-only.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>Using TPM-only validation does not require any interaction with the user to decrypt and provide access to the drive.</source>
          <target>Using TPM-only validation does not require any interaction with the user to decrypt and provide access to the drive.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>If the TPM validation succeeds, the user logon experience is the same as a standard logon.</source>
          <target>If the TPM validation succeeds, the user logon experience is the same as a standard logon.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>If the TPM is missing or changed or if the TPM detects changes to critical operating system startup files, BitLocker enters its recovery mode, and the user must enter a recovery password to regain access to the data.</source>
          <target>If the TPM is missing or changed or if the TPM detects changes to critical operating system startup files, BitLocker enters its recovery mode, and the user must enter a recovery password to regain access to the data.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>TPM with startup key.</source>
          <target>TPM with startup key.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>In addition to the protection that the TPM provides, part of the encryption key is stored on a USB flash drive, referred to as a startup key.</source>
          <target>In addition to the protection that the TPM provides, part of the encryption key is stored on a USB flash drive, referred to as a startup key.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Data on the encrypted volume cannot be accessed without the startup key.</source>
          <target>Data on the encrypted volume cannot be accessed without the startup key.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>TPM with PIN.</source>
          <target>TPM with PIN.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>In addition to the protection that the TPM provides, BitLocker requires that the user enter a PIN.</source>
          <target>In addition to the protection that the TPM provides, BitLocker requires that the user enter a PIN.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Data on the encrypted volume cannot be accessed without entering the PIN.</source>
          <target>Data on the encrypted volume cannot be accessed without entering the PIN.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>TPM with startup key and PIN.</source>
          <target>TPM with startup key and PIN.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>In addition to the core component protection that the TPM provides, part of the encryption key is stored on a USB flash drive, and a PIN is required to authenticate the user to the TPM.</source>
          <target>In addition to the core component protection that the TPM provides, part of the encryption key is stored on a USB flash drive, and a PIN is required to authenticate the user to the TPM.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>This configuration provides multifactor authentication so that if the USB key is lost or stolen, it cannot be used for access to the drive, because the correct PIN is also required.</source>
          <target>This configuration provides multifactor authentication so that if the USB key is lost or stolen, it cannot be used for access to the drive, because the correct PIN is also required.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>For many years, Microsoft has recommended using pre-boot authentication to protect against DMA and memory remanence attacks.</source>
          <target>For many years, Microsoft has recommended using pre-boot authentication to protect against DMA and memory remanence attacks.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Today, Microsoft only recommends using pre-boot authentication on PCs where the mitigations described in this document cannot be implemented.</source>
          <target>Today, Microsoft only recommends using pre-boot authentication on PCs where the mitigations described in this document cannot be implemented.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>These mitigations may be inherent to the device or may come by way of configurations that IT can provision to devices and Windows itself.</source>
          <target>These mitigations may be inherent to the device or may come by way of configurations that IT can provision to devices and Windows itself.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>Although effective, pre-boot authentication is inconvenient to users.</source>
          <target>Although effective, pre-boot authentication is inconvenient to users.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>In addition, if a user forgets their PIN or loses their startup key, they’re denied access to their data until they can contact their organization’s support team to obtain a recovery key.</source>
          <target>In addition, if a user forgets their PIN or loses their startup key, they’re denied access to their data until they can contact their organization’s support team to obtain a recovery key.</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>Today, most new PCs running Windows 10, Windows 8.1, or Windows 8 provide sufficient protection against DMA attacks without requiring pre-boot authentication.</source>
          <target>Today, most new PCs running Windows 10, Windows 8.1, or Windows 8 provide sufficient protection against DMA attacks without requiring pre-boot authentication.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>For example, most modern PCs include USB port options (which are not vulnerable to DMA attacks) but do not include FireWire or Thunderbolt ports (which are vulnerable to DMA attacks).</source>
          <target>For example, most modern PCs include USB port options (which are not vulnerable to DMA attacks) but do not include FireWire or Thunderbolt ports (which are vulnerable to DMA attacks).</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>BitLocker-encrypted devices with DMA ports enabled, including FireWire or Thunderbolt ports, should be configured with pre-boot authentication if they are running Windows 10, Windows 7, Windows 8, or Windows 8.1 and disabling the ports using policy or firmware configuration is not an option.</source>
          <target>BitLocker-encrypted devices with DMA ports enabled, including FireWire or Thunderbolt ports, should be configured with pre-boot authentication if they are running Windows 10, Windows 7, Windows 8, or Windows 8.1 and disabling the ports using policy or firmware configuration is not an option.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>Windows 8.1 and later InstantGo devices do not need pre-boot authentication to defend against DMA-based port attacks, as the ports will not be present on certified devices.</source>
          <target>Windows 8.1 and later InstantGo devices do not need pre-boot authentication to defend against DMA-based port attacks, as the ports will not be present on certified devices.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>A non-InstantGo Windows 8.1 and later device requires pre-boot authentication if DMA ports are enabled on the device and additional mitigations described in this document are not implemented.</source>
          <target>A non-InstantGo Windows 8.1 and later device requires pre-boot authentication if DMA ports are enabled on the device and additional mitigations described in this document are not implemented.</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Many customers find that the DMA ports on their devices are never used, and they choose to eliminate the possibility of an attack by disabling the DMA ports themselves, either at the hardware level or through Group Policy.</source>
          <target>Many customers find that the DMA ports on their devices are never used, and they choose to eliminate the possibility of an attack by disabling the DMA ports themselves, either at the hardware level or through Group Policy.</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>Many new mobile devices have the system memory soldered to the motherboard, which helps prevent the cold boot–style attack, where the system memory is frozen, removed, and then placed into another device.</source>
          <target>Many new mobile devices have the system memory soldered to the motherboard, which helps prevent the cold boot–style attack, where the system memory is frozen, removed, and then placed into another device.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Those devices, and most PCs, can still be vulnerable when booting to a malicious operating system, however.</source>
          <target>Those devices, and most PCs, can still be vulnerable when booting to a malicious operating system, however.</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>You can mitigate the risk of booting to a malicious operating system:</source>
          <target>You can mitigate the risk of booting to a malicious operating system:</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Windows 10 (without Secure Boot), Windows 8.1 (without Secure Boot), Windows 8 (without UEFI-based Secure Boot), or Windows 7 (with or without a TPM).</source>
          <target>Windows 10 (without Secure Boot), Windows 8.1 (without Secure Boot), Windows 8 (without UEFI-based Secure Boot), or Windows 7 (with or without a TPM).</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>Disable booting from external media, and require a firmware password to prevent the attacker from changing that option.</source>
          <target>Disable booting from external media, and require a firmware password to prevent the attacker from changing that option.</target>
        </segment>
      </unit>
      <unit id="216">
        <segment state="initial">
          <source>Windows 10, Windows 8.1, or Windows 8 (certified or with Secure Boot).</source>
          <target>Windows 10, Windows 8.1, or Windows 8 (certified or with Secure Boot).</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Password protect the firmware, and do not disable Secure Boot.</source>
          <target>Password protect the firmware, and do not disable Secure Boot.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>Protection During Startup</source>
          <target>Protection During Startup</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>During the startup process, Windows 10 uses Trusted Boot and Early Launch Antimalware (ELAM) to examine the integrity of every component.</source>
          <target>During the startup process, Windows 10 uses Trusted Boot and Early Launch Antimalware (ELAM) to examine the integrity of every component.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>The sections that follow describe these technologies in more detail.</source>
          <target>The sections that follow describe these technologies in more detail.</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Trusted Boot</source>
          <target>Trusted Boot</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Trusted Boot takes over where UEFI-based Secure Boot leaves off—during the operating system initialization phase.</source>
          <target>Trusted Boot takes over where UEFI-based Secure Boot leaves off—during the operating system initialization phase.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>The bootloader verifies the digital signature of the Windows kernel before loading it.</source>
          <target>The bootloader verifies the digital signature of the Windows kernel before loading it.</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>The Windows kernel, in turn, verifies every other component of the Windows startup process, including the boot drivers, startup files, and ELAM driver.</source>
          <target>The Windows kernel, in turn, verifies every other component of the Windows startup process, including the boot drivers, startup files, and ELAM driver.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>If a file has been modified or is not properly signed with a Microsoft signature, Windows detects the problem and refuses to load the corrupted component.</source>
          <target>If a file has been modified or is not properly signed with a Microsoft signature, Windows detects the problem and refuses to load the corrupted component.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>Often, Windows can automatically repair the corrupted component, restoring the integrity of Windows and allowing the PC to start normally.</source>
          <target>Often, Windows can automatically repair the corrupted component, restoring the integrity of Windows and allowing the PC to start normally.</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Windows 10 uses Trusted Boot on any hardware platform: It requires neither UEFI nor a TPM.</source>
          <target>Windows 10 uses Trusted Boot on any hardware platform: It requires neither UEFI nor a TPM.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>However, without Secure Boot, it’s possible for malware to compromise the startup process prior to Windows starting, at which point Trusted Boot protections could be bypassed or potentially disabled.</source>
          <target>However, without Secure Boot, it’s possible for malware to compromise the startup process prior to Windows starting, at which point Trusted Boot protections could be bypassed or potentially disabled.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Early Launch Antimalware</source>
          <target>Early Launch Antimalware</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>Because UEFI-based Secure Boot has protected the bootloader and Trusted Boot has protected the Windows kernel or other Windows startup components, the next opportunity for malware to start is by infecting a non-Microsoft boot-related driver.</source>
          <target>Because UEFI-based Secure Boot has protected the bootloader and Trusted Boot has protected the Windows kernel or other Windows startup components, the next opportunity for malware to start is by infecting a non-Microsoft boot-related driver.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Traditional antimalware apps don’t start until after the boot-related drivers have been loaded, giving a rootkit disguised as a driver the opportunity to work.</source>
          <target>Traditional antimalware apps don’t start until after the boot-related drivers have been loaded, giving a rootkit disguised as a driver the opportunity to work.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>The purpose of ELAM is to load an antimalware driver before drivers that are flagged as boot-start can be executed.</source>
          <target>The purpose of ELAM is to load an antimalware driver before drivers that are flagged as boot-start can be executed.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>This approach provides the ability for an antimalware driver to register as a trusted boot-critical driver.</source>
          <target>This approach provides the ability for an antimalware driver to register as a trusted boot-critical driver.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>It is launched during the Trusted Boot process, and with that, Windows ensures that it is loaded before any other non-Microsoft software.</source>
          <target>It is launched during the Trusted Boot process, and with that, Windows ensures that it is loaded before any other non-Microsoft software.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>With this solution in place, boot drivers are initialized based on the classification that the ELAM driver returns according to an initialization policy.</source>
          <target>With this solution in place, boot drivers are initialized based on the classification that the ELAM driver returns according to an initialization policy.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>IT pros have the ability to change this policy through Group Policy.</source>
          <target>IT pros have the ability to change this policy through Group Policy.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>ELAM classifies drivers as follows:</source>
          <target>ELAM classifies drivers as follows:</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Good.</source>
          <target>Good.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>The driver has been signed and has not been tampered with.</source>
          <target>The driver has been signed and has not been tampered with.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>Bad.</source>
          <target>Bad.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>The driver has been identified as malware.</source>
          <target>The driver has been identified as malware.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>It is recommended that you not allow known bad drivers to be initialized.</source>
          <target>It is recommended that you not allow known bad drivers to be initialized.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Bad but required for boot.</source>
          <target>Bad but required for boot.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>The driver has been identified as malware, but the computer cannot successfully boot without loading this driver.</source>
          <target>The driver has been identified as malware, but the computer cannot successfully boot without loading this driver.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>Unknown.</source>
          <target>Unknown.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>This driver has not been attested to by your malware-detection application or classified by the ELAM boot-start driver.</source>
          <target>This driver has not been attested to by your malware-detection application or classified by the ELAM boot-start driver.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>While the features listed above protect the Windows boot process from malware threats that could compromise BitLocker security, it is important to note that DMA ports may be enabled during the window of time between when BitLocker unlocks the drive and Windows boots to the point that Windows can set any port related policies that have been configured.</source>
          <target>While the features listed above protect the Windows boot process from malware threats that could compromise BitLocker security, it is important to note that DMA ports may be enabled during the window of time between when BitLocker unlocks the drive and Windows boots to the point that Windows can set any port related policies that have been configured.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>This period of time where the encryption key could be exposed to a DMA attack could be less than a minute on recent devices or longer depending on system performance.</source>
          <target>This period of time where the encryption key could be exposed to a DMA attack could be less than a minute on recent devices or longer depending on system performance.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>The use of pre-boot authentication with a PIN can be used to successfully mitigate against an attack.</source>
          <target>The use of pre-boot authentication with a PIN can be used to successfully mitigate against an attack.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>Protection After Startup: eliminate DMA availability</source>
          <target>Protection After Startup: eliminate DMA availability</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>Windows InstantGo–certified devices do not have DMA ports, eliminating the risk of DMA attacks.</source>
          <target>Windows InstantGo–certified devices do not have DMA ports, eliminating the risk of DMA attacks.</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>On other devices, you can disable FireWire, Thunderbolt, or other ports that support DMA.</source>
          <target>On other devices, you can disable FireWire, Thunderbolt, or other ports that support DMA.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>See also</source>
          <target>See also</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>Types of Attacks for Volume Encryption Keys</source>
          <target>Types of Attacks for Volume Encryption Keys</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>Choose the right BitLocker countermeasure</source>
          <target>Choose the right BitLocker countermeasure</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>Protect BitLocker from pre-boot attacks</source>
          <target>Protect BitLocker from pre-boot attacks</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>BitLocker overview</source>
          <target>BitLocker overview</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>