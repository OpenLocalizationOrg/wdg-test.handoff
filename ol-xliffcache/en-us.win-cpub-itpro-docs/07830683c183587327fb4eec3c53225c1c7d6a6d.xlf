<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\keep-secure\understanding-the-publisher-rule-condition-in-applocker.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">07830683c183587327fb4eec3c53225c1c7d6a6d</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Understanding the publisher rule condition in AppLocker (Windows 10)</source>
          <target>Understanding the publisher rule condition in AppLocker (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>This topic explains the AppLocker publisher rule condition, what controls are available, and how it is applied.</source>
          <target>This topic explains the AppLocker publisher rule condition, what controls are available, and how it is applied.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Understanding the publisher rule condition in AppLocker</source>
          <target>Understanding the publisher rule condition in AppLocker</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Applies to</source>
          <target>Applies to</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Windows 10</source>
          <target>Windows 10</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This topic explains the AppLocker publisher rule condition, what controls are available, and how it is applied.</source>
          <target>This topic explains the AppLocker publisher rule condition, what controls are available, and how it is applied.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Publisher conditions can be made only for files that are digitally signed; this condition identifies an app based on its digital signature and extended attributes.</source>
          <target>Publisher conditions can be made only for files that are digitally signed; this condition identifies an app based on its digital signature and extended attributes.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>The digital signature contains information about the company that created the app (the publisher).</source>
          <target>The digital signature contains information about the company that created the app (the publisher).</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>The extended attributes, which are obtained from the binary resource, contain the name of the product that the app is part of and the version number of the app.</source>
          <target>The extended attributes, which are obtained from the binary resource, contain the name of the product that the app is part of and the version number of the app.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>The publisher may be a software development company, such as Microsoft, or the Information Technology department of your organization.</source>
          <target>The publisher may be a software development company, such as Microsoft, or the Information Technology department of your organization.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Publisher conditions are easier to maintain than file hash conditions and are generally more secure than path conditions.</source>
          <target>Publisher conditions are easier to maintain than file hash conditions and are generally more secure than path conditions.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Rules that are specified to the version level might have to be updated when a new version of the file is released.</source>
          <target>Rules that are specified to the version level might have to be updated when a new version of the file is released.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>The following table describes the advantages and disadvantages of the publisher condition.</source>
          <target>The following table describes the advantages and disadvantages of the publisher condition.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Publisher condition advantages</source>
          <target>Publisher condition advantages</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Publisher condition disadvantages</source>
          <target>Publisher condition disadvantages</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Frequent updating is not required.</source>
          <target>Frequent updating is not required.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>You can apply different values within a certificate.</source>
          <target>You can apply different values within a certificate.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>A single rule can be used to allow an entire product suite.</source>
          <target>A single rule can be used to allow an entire product suite.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>You can use the asterisk (*) wildcard character within a publisher rule to specify that any value should be matched.</source>
          <target>You can use the asterisk (*) wildcard character within a publisher rule to specify that any value should be matched.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>The file must be signed.</source>
          <target>The file must be signed.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Although a single rule can be used to allow an entire product suite, all files in the suite must be signed uniformly.</source>
          <target>Although a single rule can be used to allow an entire product suite, all files in the suite must be signed uniformly.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>Wildcard characters can be used as values in the publisher rule fields according to the following specifications:</source>
          <target>Wildcard characters can be used as values in the publisher rule fields according to the following specifications:</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Publisher</source>
          <target>Publisher</target>
        </segment>
      </unit>
      <unit id="124">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any publisher.</source>
          <target>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any publisher.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>When combined with any string value, the rule is limited to the publisher with a value in the signed certificate that matches the character string.</source>
          <target>When combined with any string value, the rule is limited to the publisher with a value in the signed certificate that matches the character string.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>In other words, the asterisk is not treated as a wildcard character if used with other characters in this field.</source>
          <target>In other words, the asterisk is not treated as a wildcard character if used with other characters in this field.</target>
        </segment>
      </unit>
      <unit id="127">
        <originalData>
          <data id="id1">\*</data>
          <data id="id2">\*</data>
        </originalData>
        <segment state="initial">
          <source>For example, using the characters "M<ph dataRef="id1" id="ph1" />" limits the publisher name to only a publisher with the name "M<ph dataRef="id2" id="ph2" />."</source>
          <target>For example, using the characters "M<ph dataRef="id1" id="ph1" />" limits the publisher name to only a publisher with the name "M<ph dataRef="id2" id="ph2" />."</target>
        </segment>
      </unit>
      <unit id="128">
        <originalData>
          <data id="id1">\*</data>
          <data id="id2">\*</data>
          <data id="id3">\*</data>
          <data id="id4">\*</data>
        </originalData>
        <segment state="initial">
          <source>Using the characters "<ph dataRef="id1" id="ph1" />x<ph dataRef="id2" id="ph2" />" limits the publisher name only to the name “<ph dataRef="id3" id="ph3" />x<ph dataRef="id4" id="ph4" />”.</source>
          <target>Using the characters "<ph dataRef="id1" id="ph1" />x<ph dataRef="id2" id="ph2" />" limits the publisher name only to the name “<ph dataRef="id3" id="ph3" />x<ph dataRef="id4" id="ph4" />”.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>A question mark (?) is not a valid wildcard character in this field.</source>
          <target>A question mark (?) is not a valid wildcard character in this field.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Product name</source>
          <target>Product name</target>
        </segment>
      </unit>
      <unit id="131">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any product name.</source>
          <target>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any product name.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>When combined with any string value, the rule is limited to the product of the publisher with a value in the signed certificate that matches the character string.</source>
          <target>When combined with any string value, the rule is limited to the product of the publisher with a value in the signed certificate that matches the character string.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>In other words, the asterisk is not treated as a wildcard character if used with other characters in this field.</source>
          <target>In other words, the asterisk is not treated as a wildcard character if used with other characters in this field.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>A question mark (?) is not a valid wildcard character in this field.</source>
          <target>A question mark (?) is not a valid wildcard character in this field.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>File name</source>
          <target>File name</target>
        </segment>
      </unit>
      <unit id="136">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>Either the asterisk (<ph dataRef="id1" id="ph1" />) or question mark (?) characters used by themselves represent any and all file names.</source>
          <target>Either the asterisk (<ph dataRef="id1" id="ph1" />) or question mark (?) characters used by themselves represent any and all file names.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>When combined with any string value, the string is matched with any file name containing that string.</source>
          <target>When combined with any string value, the string is matched with any file name containing that string.</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>File version</source>
          <target>File version</target>
        </segment>
      </unit>
      <unit id="139">
        <originalData>
          <data id="id1">\*</data>
        </originalData>
        <segment state="initial">
          <source>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any file version.</source>
          <target>The asterisk (<ph dataRef="id1" id="ph1" />) character used by itself represents any file version.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>If you want to limit the file version to a specific version or as a starting point, you can state the file version and then use the following options to apply limits:</source>
          <target>If you want to limit the file version to a specific version or as a starting point, you can state the file version and then use the following options to apply limits:</target>
        </segment>
      </unit>
      <unit id="141">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exactly</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exactly</pc>.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>The rule applies only to this version of the app</source>
          <target>The rule applies only to this version of the app</target>
        </segment>
      </unit>
      <unit id="143">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">And above</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">And above</pc>.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>The rule applies to this version and all later versions.</source>
          <target>The rule applies to this version and all later versions.</target>
        </segment>
      </unit>
      <unit id="145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">And Below</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">And Below</pc>.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>The rule applies to this version and all earlier versions.</source>
          <target>The rule applies to this version and all earlier versions.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>The following table describes how a publisher condition is applied.</source>
          <target>The following table describes how a publisher condition is applied.</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>Option</source>
          <target>Option</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>The publisher condition allows or denies…</source>
          <target>The publisher condition allows or denies…</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>All signed files</source>
          <target>All signed files</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>All files that are signed by a publisher.</source>
          <target>All files that are signed by a publisher.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Publisher only</source>
          <target>Publisher only</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>All files that are signed by the named publisher.</source>
          <target>All files that are signed by the named publisher.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Publisher and product name</source>
          <target>Publisher and product name</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>All files for the specified product that are signed by the named publisher.</source>
          <target>All files for the specified product that are signed by the named publisher.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Publisher, product name, and file name</source>
          <target>Publisher, product name, and file name</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Any version of the named file for the named product that is signed by the publisher.</source>
          <target>Any version of the named file for the named product that is signed by the publisher.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Publisher, product name, file name, and file version</source>
          <target>Publisher, product name, file name, and file version</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>Exactly</source>
          <target>Exactly</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>The specified version of the named file for the named product that is signed by the publisher.</source>
          <target>The specified version of the named file for the named product that is signed by the publisher.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Publisher, product name, file name, and file version</source>
          <target>Publisher, product name, file name, and file version</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>And above</source>
          <target>And above</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>The specified version of the named file and any new releases for the product that are signed by the publisher.</source>
          <target>The specified version of the named file and any new releases for the product that are signed by the publisher.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>Publisher, product name, file name, and file version</source>
          <target>Publisher, product name, file name, and file version</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>And below</source>
          <target>And below</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>The specified version of the named file and any older versions for the product that are signed by the publisher.</source>
          <target>The specified version of the named file and any older versions for the product that are signed by the publisher.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>Custom</source>
          <target>Custom</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>You can edit the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Publisher</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Product name</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">File name</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Version</pc> fields to create a custom rule.</source>
          <target>You can edit the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Publisher</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Product name</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">File name</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Version</pc> fields to create a custom rule.</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](understanding-applocker-rule-condition-types.md)</data>
        </originalData>
        <segment state="initial">
          <source>For an overview of the three types of AppLocker rule conditions and explanations of the advantages and disadvantages of each, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Understanding AppLocker rule condition types</pc>.</source>
          <target>For an overview of the three types of AppLocker rule conditions and explanations of the advantages and disadvantages of each, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Understanding AppLocker rule condition types</pc>.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>How AppLocker works</source>
          <target>How AppLocker works</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>