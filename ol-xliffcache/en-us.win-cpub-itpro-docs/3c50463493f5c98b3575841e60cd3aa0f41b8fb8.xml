{"nodes":[{"content":"How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell","pos":[11,113]},{"content":"How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell","pos":[127,229]},{"content":"How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell","pos":[404,506]},{"content":"Use the following PowerShell procedure to convert any number of Active Directory Domain Services (AD DS) user or machine accounts into formatted Security Identifiers (SIDs) both in the standard format and in the hexadecimal format used by Microsoft SQL Server when running SQL scripts.","pos":[509,794]},{"content":"Before attempting this procedure, you should read and understand the information and examples displayed in the following list:","pos":[796,922]},{"content":"<bpt id=\"p1\">**</bpt>.INPUTS<ept id=\"p1\">**</ept> – The account or accounts used to convert to SID format.","pos":[928,996]},{"content":"This can be a single account name or an array of account names.","pos":[997,1060]},{"pos":[1066,1168],"content":"<bpt id=\"p1\">**</bpt>.OUTPUTS<ept id=\"p1\">**</ept> - A list of account names with the corresponding SID in standard and hexadecimal formats."},{"pos":[1176,1184],"content":"Examples"},{"pos":[1194,1305],"content":"<bpt id=\"p1\">**</bpt>.<ph id=\"ph1\">\\\\</ph>ConvertToSID.ps1 DOMAIN<ph id=\"ph2\">\\\\</ph>user<ph id=\"ph3\">\\_</ph>account1 DOMAIN<ph id=\"ph4\">\\\\</ph>machine<ph id=\"ph5\">\\_</ph>account1$ DOMAIN<ph id=\"ph6\">\\\\</ph>user<ph id=\"ph7\">\\_</ph>account2 | Format-List<ept id=\"p1\">**</ept>."},{"content":"$accountsArray = @(\"DOMAIN<ph id=\"ph1\">\\\\</ph>user<ph id=\"ph2\">\\_</ph>account1\", \"DOMAIN<ph id=\"ph3\">\\\\</ph>machine<ph id=\"ph4\">\\_</ph>account1$\", \"DOMAIN<ph id=\"ph5\">\\_</ph>user<ph id=\"ph6\">\\_</ph>account2\")","pos":[1313,1413]},{"content":".<ph id=\"ph1\">\\\\</ph>ConvertToSID.ps1 $accountsArray | Write-Output -FilePath .<ph id=\"ph2\">\\\\</ph>SIDs.txt -Width 200","pos":[1423,1505]},{"content":"To convert any number of Active Directory Domain Services (AD DS) user or machine accounts into formatted Security Identifiers (SIDs)","pos":[1523,1656]},{"pos":[1664,1784],"content":"Copy the following script into a text editor and save it as a PowerShell script file, for example <bpt id=\"p1\">**</bpt>ConvertToSIDs.ps1<ept id=\"p1\">**</ept>."},{"content":"To open a PowerShell console click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> and type <bpt id=\"p2\">**</bpt>PowerShell<ept id=\"p2\">**</ept>.","pos":[1790,1859]},{"content":"Right-click <bpt id=\"p1\">**</bpt>Windows PowerShell<ept id=\"p1\">**</ept> and select <bpt id=\"p2\">**</bpt>Run as Administrator<ept id=\"p2\">**</ept>.","pos":[1860,1931]},{"content":"{","pos":[3421,3422]},{"content":"param(<ph id=\"ph1\">\\[</ph>System.Security.Principal.SecurityIdentifier<ph id=\"ph2\">\\]</ph>$sidToConvert)","pos":[3431,3499]},{"content":"{","pos":[4270,4271]},{"content":"Run the script you saved in step one of this procedure passing the accounts to convert as arguments.","pos":[8381,8481]},{"content":"For example,","pos":[8487,8499]},{"content":".<ph id=\"ph1\">\\\\</ph>ConvertToSID.ps1 DOMAIN<ph id=\"ph2\">\\\\</ph>user<ph id=\"ph3\">\\_</ph>account1 DOMAIN<ph id=\"ph4\">\\\\</ph>machine<ph id=\"ph5\">\\_</ph>account1$ DOMAIN<ph id=\"ph6\">\\\\</ph>user<ph id=\"ph7\">\\_</ph>account2 | Format-List” or “$accountsArray = @(\"DOMAIN<ph id=\"ph8\">\\\\</ph>user<ph id=\"ph9\">\\_</ph>account1\", \"DOMAIN<ph id=\"ph10\">\\\\</ph>machine<ph id=\"ph11\">\\_</ph>account1$\", \"DOMAIN<ph id=\"ph12\">\\_</ph>user<ph id=\"ph13\">\\_</ph>account2\")","pos":[8507,8719]},{"content":".<ph id=\"ph1\">\\\\</ph>ConvertToSID.ps1 $accountsArray | Write-Output -FilePath .<ph id=\"ph2\">\\\\</ph>SIDs.txt -Width 200”","pos":[8729,8812]},{"content":"<bpt id=\"p1\">**</bpt>Got a suggestion for App-V<ept id=\"p1\">**</ept>?","pos":[8820,8851]},{"content":"Add or vote on suggestions <bpt id=\"p1\">[</bpt>here<ept id=\"p1\">](http://appv.uservoice.com/forums/280448-microsoft-application-virtualization)</ept>.","pos":[8852,8964]},{"content":"<bpt id=\"p1\">**</bpt>Got an App-V issu<ept id=\"p1\">**</ept>e?","pos":[8965,8988]},{"content":"Use the <bpt id=\"p1\">[</bpt>App-V TechNet Forum<ept id=\"p1\">](https://social.technet.microsoft.com/Forums/home?forum=mdopappv)</ept>.","pos":[8989,9084]},{"content":"Related topics","pos":[9089,9103]},{"content":"Administering App-V by Using PowerShell","pos":[9107,9146]}],"content":"---\ntitle: How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell\ndescription: How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell\nauthor: jamiejdt\nms.assetid: 9399342b-1ea7-41df-b988-33e302f9debe\nms.pagetype: mdop, appcompat, virtualization\nms.mktglfcycl: deploy\nms.sitesec: library\nms.prod: w10\n---\n\n\n# How to Install the App-V Databases and Convert the Associated Security Identifiers by Using PowerShell\n\n\nUse the following PowerShell procedure to convert any number of Active Directory Domain Services (AD DS) user or machine accounts into formatted Security Identifiers (SIDs) both in the standard format and in the hexadecimal format used by Microsoft SQL Server when running SQL scripts.\n\nBefore attempting this procedure, you should read and understand the information and examples displayed in the following list:\n\n-   **.INPUTS** – The account or accounts used to convert to SID format. This can be a single account name or an array of account names.\n\n-   **.OUTPUTS** - A list of account names with the corresponding SID in standard and hexadecimal formats.\n\n-   **Examples** -\n\n    **.\\\\ConvertToSID.ps1 DOMAIN\\\\user\\_account1 DOMAIN\\\\machine\\_account1$ DOMAIN\\\\user\\_account2 | Format-List**.\n\n    **$accountsArray = @(\"DOMAIN\\\\user\\_account1\", \"DOMAIN\\\\machine\\_account1$\", \"DOMAIN\\_user\\_account2\")**\n\n    **.\\\\ConvertToSID.ps1 $accountsArray | Write-Output -FilePath .\\\\SIDs.txt -Width 200**\n\n    \\#&gt;\n\n**To convert any number of Active Directory Domain Services (AD DS) user or machine accounts into formatted Security Identifiers (SIDs)**\n\n1.  Copy the following script into a text editor and save it as a PowerShell script file, for example **ConvertToSIDs.ps1**.\n\n2.  To open a PowerShell console click **Start** and type **PowerShell**. Right-click **Windows PowerShell** and select **Run as Administrator**.\n\n    ``` syntax\n    <#\n    ```\n\n    ``` syntax\n    .SYNOPSIS\n    ```\n\n    ``` syntax\n    This PowerShell script will take an array of account names and try to convert each of them to the corresponding SID in standard and hexadecimal formats.\n    ```\n\n    ``` syntax\n    .DESCRIPTION\n    ```\n\n    ``` syntax\n    This is a PowerShell script that converts any number of Active Directory (AD) user or machine accounts into formatted Security Identifiers (SIDs) both in the standard format and in the hexadecimal format used by SQL server when running SQL scripts.\n    ```\n\n    ``` syntax\n    .INPUTS\n    ```\n\n    ``` syntax\n    The account(s) to convert to SID format. This can be a single account name or an array of account names. Please see examples below.\n    ```\n\n    ``` syntax\n    .OUTPUTS\n    ```\n\n    ``` syntax\n    A list of account names with the corresponding SID in standard and hexadecimal formats\n    ```\n\n    ``` syntax\n    .EXAMPLE\n    ```\n\n    ``` syntax\n    .\\ConvertToSID.ps1 DOMAIN\\user_account1 DOMAIN\\machine_account1$ DOMAIN\\user_account2 | Format-List\n    ```\n\n    ``` syntax\n    .EXAMPLE\n    ```\n\n    ``` syntax\n    $accountsArray = @(\"DOMAIN\\user_account1\", \"DOMAIN\\machine_account1$\", \"DOMAIN_user_account2\")\n    ```\n\n    ``` syntax\n    .\\ConvertToSID.ps1 $accountsArray | Write-Output -FilePath .\\SIDs.txt -Width 200\n    ```\n\n    ``` syntax\n#>\n    ```\n\n    ``` syntax\n    ```\n\n    []()  \n\n    []()  \n\n    ``` syntax\n    function ConvertSIDToHexFormat\n    ```\n\n    {\n\n       param(\\[System.Security.Principal.SecurityIdentifier\\]$sidToConvert)\n\n    ``` syntax\n    ```\n\n    ``` syntax\n       $sb = New-Object System.Text.StringBuilder\n    ```\n\n    ``` syntax\n        [int] $binLength = $sidToConvert.BinaryLength\n    ```\n\n    ``` syntax\n        [Byte[]] $byteArray = New-Object Byte[] $binLength\n    ```\n\n    ``` syntax\n       $sidToConvert.GetBinaryForm($byteArray, 0)\n    ```\n\n    ``` syntax\n       foreach($byte in $byteArray)\n    ```\n\n    ``` syntax\n       {\n    ```\n\n    ``` syntax\n       $sb.Append($byte.ToString(\"X2\")) |Out-Null\n    ```\n\n    ``` syntax\n       }\n    ```\n\n    ``` syntax\n       return $sb.ToString()\n    ```\n\n    ``` syntax\n    }\n    ```\n\n    ``` syntax\n     [string[]]$myArgs = $args\n    ```\n\n    ``` syntax\n    if(($myArgs.Length -lt 1) -or ($myArgs[0].CompareTo(\"/?\") -eq 0))\n    ```\n\n    {\n\n    ``` syntax\n     [string]::Format(\"{0}====== Description ======{0}{0}\" +\n    ```\n\n    ``` syntax\n    \"  Converts any number of user or machine account names to string and hexadecimal SIDs.{0}\" +\n    ```\n\n    ``` syntax\n                   \"  Pass the account(s) as space separated command line parameters. (For example 'ConvertToSID.exe DOMAIN\\\\Account1 DOMAIN\\\\Account2 ...'){0}\" +\n    ```\n\n    ``` syntax\n                   \"  The output is written to the console in the format 'Account name    SID as string   SID as hexadecimal'{0}\" +\n    ```\n\n    ``` syntax\n                   \"  And can be written out to a file using standard PowerShell redirection{0}\" +\n    ```\n\n    ``` syntax\n                   \"  Please specify user accounts in the format 'DOMAIN\\username'{0}\" + \n    ```\n\n    ``` syntax\n                   \"  Please specify machine accounts in the format 'DOMAIN\\machinename$'{0}\" +\n    ```\n\n    ``` syntax\n                   \"  For more help content, please run 'Get-Help ConvertToSID.ps1'{0}\" + \n    ```\n\n    ``` syntax\n                   \"{0}====== Arguments ======{0}\" +\n    ```\n\n    ``` syntax\n                   \"{0}  /?    Show this help message\", [Environment]::NewLine) \n    ```\n\n    ``` syntax\n    {\n    ```\n\n    ``` syntax\n    else\n    ```\n\n    ``` syntax\n    {  \n        #If an array was passed in, try to split it\n    ```\n\n    ``` syntax\n        if($myArgs.Length -eq 1)\n    ```\n\n    ``` syntax\n        {\n    ```\n\n    ``` syntax\n            $myArgs = $myArgs.Split(' ')\n    ```\n\n    ``` syntax\n        }\n    ```\n\n    ``` syntax\n\n        #Parse the arguments for account names\n    ```\n\n    ``` syntax\n        foreach($accountName in $myArgs)\n    ```\n\n    ``` syntax\n        {    \n    ```\n\n    ``` syntax\n            [string[]] $splitString = $accountName.Split('\\')  # We're looking for the format \"DOMAIN\\Account\" so anything that does not match, we reject\n    ```\n\n    ``` syntax\n            if($splitString.Length -ne 2)\n    ```\n\n    ``` syntax\n            {\n    ```\n\n    ``` syntax\n                $message = [string]::Format(\"{0} is not a valid account name. Expected format 'Domain\\username' for user accounts or 'DOMAIN\\machinename$' for machine accounts.\", $accountName)\n    ```\n\n    ``` syntax\n                Write-Error -Message $message\n    ```\n\n    ``` syntax\n                continue\n    ```\n\n    ``` syntax\n            }\n    ```\n\n    ``` syntax\n            \n    ```\n\n    ``` syntax\n            #Convert any account names to SIDs\n    ```\n\n    ``` syntax\n            try\n    ```\n\n    ``` syntax\n            {\n    ```\n\n    ``` syntax\n                [System.Security.Principal.NTAccount] $account = New-Object System.Security.Principal.NTAccount($splitString[0], $splitString[1])\n    ```\n\n    ``` syntax\n                [System.Security.Principal.SecurityIdentifier] $SID = [System.Security.Principal.SecurityIdentifier]($account.Translate([System.Security.Principal.SecurityIdentifier]))\n    ```\n\n    ``` syntax\n            }\n    ```\n\n    ``` syntax\n            catch [System.Security.Principal.IdentityNotMappedException]\n    ```\n\n    ``` syntax\n            {\n    ```\n\n    ``` syntax\n                $message = [string]::Format(\"Failed to translate account object '{0}' to a SID. Please verify that this is a valid user or machine account.\", $account.ToString())\n    ```\n\n    ``` syntax\n                Write-Error -Message $message\n    ```\n\n    ``` syntax\n                continue\n    ```\n\n    ``` syntax\n            }\n    ```\n\n    ``` syntax\n\n            #Convert regular SID to binary format used by SQL\n    ```\n\n    ``` syntax\n            $hexSIDString = ConvertSIDToHexFormat $SID\n    ```\n\n    ``` syntax\n            \n            $SIDs = New-Object PSObject\n    ```\n\n    ``` syntax\n            $SIDs | Add-Member NoteProperty Account $accountName\n    ```\n\n    ``` syntax\n            $SIDs | Add-Member NoteProperty SID $SID.ToString()\n    ```\n\n    ``` syntax\n            $SIDs | Add-Member NoteProperty Hexadecimal $hexSIDString\n    ```\n\n    ``` syntax\n\n            Write-Output $SIDs\n    ```\n\n    ``` syntax\n        }\n    ```\n\n    ``` syntax\n    }\n    ```\n\n3.  Run the script you saved in step one of this procedure passing the accounts to convert as arguments.\n\n    For example,\n\n    **.\\\\ConvertToSID.ps1 DOMAIN\\\\user\\_account1 DOMAIN\\\\machine\\_account1$ DOMAIN\\\\user\\_account2 | Format-List” or “$accountsArray = @(\"DOMAIN\\\\user\\_account1\", \"DOMAIN\\\\machine\\_account1$\", \"DOMAIN\\_user\\_account2\")**\n\n    **.\\\\ConvertToSID.ps1 $accountsArray | Write-Output -FilePath .\\\\SIDs.txt -Width 200”**\n\n    **Got a suggestion for App-V**? Add or vote on suggestions [here](http://appv.uservoice.com/forums/280448-microsoft-application-virtualization). **Got an App-V issu**e? Use the [App-V TechNet Forum](https://social.technet.microsoft.com/Forums/home?forum=mdopappv).\n\n## Related topics\n\n\n[Administering App-V by Using PowerShell](administering-app-v-by-using-powershell.md)\n\n \n\n \n\n\n\n\n\n"}