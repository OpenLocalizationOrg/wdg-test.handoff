<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\deploy\usmt-xml-elements-library.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">2ee58dd9a6f07c44a22903c9f9fefeb17b400a31</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>XML Elements Library (Windows 10)</source>
          <target>XML Elements Library (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>XML Elements Library</source>
          <target>XML Elements Library</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>XML Elements Library</source>
          <target>XML Elements Library</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Overview</source>
          <target>Overview</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>This topic describes the XML elements and helper functions that you can employ to author migration .xml files to use with User State Migration Tool (USMT).</source>
          <target>This topic describes the XML elements and helper functions that you can employ to author migration .xml files to use with User State Migration Tool (USMT).</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>It is assumed that you understand the basics of XML.</source>
          <target>It is assumed that you understand the basics of XML.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>.</source>
          <target>.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>In This Topic</source>
          <target>In This Topic</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>In addition to XML elements and helper functions, this topic describes how to specify encoded locations and locations patterns, functions that are for internal USMT use only, and the version tags that you can use with helper functions.</source>
          <target>In addition to XML elements and helper functions, this topic describes how to specify encoded locations and locations patterns, functions that are for internal USMT use only, and the version tags that you can use with helper functions.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Elements and helper functions</source>
          <target>Elements and helper functions</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Appendix</source>
          <target>Appendix</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Specifying locations</source>
          <target>Specifying locations</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>Internal USMT functions</source>
          <target>Internal USMT functions</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Valid version tags</source>
          <target>Valid version tags</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Elements and Helper Functions</source>
          <target>Elements and Helper Functions</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>The following table describes the XML elements and helper functions you can use with USMT.</source>
          <target>The following table describes the XML elements and helper functions you can use with USMT.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Elements A-K</source>
          <target>Elements A-K</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>Elements L-Z</source>
          <target>Elements L-Z</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Helper functions</source>
          <target>Helper functions</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>addObjects</source>
          <target>addObjects</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>attributes</source>
          <target>attributes</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>bytes</source>
          <target>bytes</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>commandLine</source>
          <target>commandLine</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>component</source>
          <target>component</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>condition</source>
          <target>condition</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>conditions</source>
          <target>conditions</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>content</source>
          <target>content</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>contentModify</source>
          <target>contentModify</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>description</source>
          <target>description</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>destinationCleanup</source>
          <target>destinationCleanup</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>detect</source>
          <target>detect</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>detects</source>
          <target>detects</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>detection</source>
          <target>detection</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>displayName</source>
          <target>displayName</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>environment</source>
          <target>environment</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>exclude</source>
          <target>exclude</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>excludeAttributes</source>
          <target>excludeAttributes</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>extensions</source>
          <target>extensions</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>extension</source>
          <target>extension</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>externalProcess</source>
          <target>externalProcess</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>icon</source>
          <target>icon</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>include</source>
          <target>include</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>includeAttribute</source>
          <target>includeAttribute</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>library</source>
          <target>library</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>location</source>
          <target>location</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>locationModify</source>
          <target>locationModify</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>_locDefinition</source>
          <target>_locDefinition</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>manufacturer</source>
          <target>manufacturer</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>merge</source>
          <target>merge</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>migration</source>
          <target>migration</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>namedElements</source>
          <target>namedElements</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>object</source>
          <target>object</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>objectSet</source>
          <target>objectSet</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>path</source>
          <target>path</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>paths</source>
          <target>paths</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>pattern</source>
          <target>pattern</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>processing</source>
          <target>processing</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>plugin</source>
          <target>plugin</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>role</source>
          <target>role</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>rules</source>
          <target>rules</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>script</source>
          <target>script</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>text</source>
          <target>text</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>unconditionalExclude</source>
          <target>unconditionalExclude</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>variable</source>
          <target>variable</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>version</source>
          <target>version</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>windowsObjects</source>
          <target>windowsObjects</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>condition<ph dataRef="id1" id="ph1" /> functions</source>
          <target>condition<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="168">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>content<ph dataRef="id1" id="ph1" /> functions</source>
          <target>content<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="169">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>contentModify<ph dataRef="id1" id="ph1" /> functions</source>
          <target>contentModify<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="170">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> filter functions</source>
          <target>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> filter functions</target>
        </segment>
      </unit>
      <unit id="171">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>locationModify<ph dataRef="id1" id="ph1" /> functions</source>
          <target>locationModify<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>merge<ph dataRef="id1" id="ph1" /> functions</source>
          <target>merge<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="173">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>script<ph dataRef="id1" id="ph1" /> functions</source>
          <target>script<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>Internal USMT functions</source>
          <target>Internal USMT functions</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>addObjects</source>
          <target>addObjects</target>
        </segment>
      </unit>
      <unit id="176">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />addObjects<ph dataRef="id2" id="ph2" /> element emulates the existence of one or more objects on the source computer.</source>
          <target>The <ph dataRef="id1" id="ph1" />addObjects<ph dataRef="id2" id="ph2" /> element emulates the existence of one or more objects on the source computer.</target>
        </segment>
      </unit>
      <unit id="177">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The child <ph dataRef="id1" id="ph1" />object<ph dataRef="id2" id="ph2" /> elements provide the details of the emulated objects.</source>
          <target>The child <ph dataRef="id1" id="ph1" />object<ph dataRef="id2" id="ph2" /> elements provide the details of the emulated objects.</target>
        </segment>
      </unit>
      <unit id="178">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the content is a <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> element, the result of the invocation will be an array of objects.</source>
          <target>If the content is a <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> element, the result of the invocation will be an array of objects.</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#object)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#location)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#attribute)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">&amp;lt;</data>
          <data id="id16">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc> In addition, you must specify <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />location<ph dataRef="id10" id="ph4" /></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />attribute<ph dataRef="id14" id="ph6" /></pc> as child elements of this <ph dataRef="id15" id="ph7" />object<ph dataRef="id16" id="ph8" /> element.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc> In addition, you must specify <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />location<ph dataRef="id10" id="ph4" /></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />attribute<ph dataRef="id14" id="ph6" /></pc> as child elements of this <ph dataRef="id15" id="ph7" />object<ph dataRef="id16" id="ph8" /> element.</target>
        </segment>
      </unit>
      <unit id="182">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">[</data>
          <data id="id10">](#script)</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <ph dataRef="id7" id="ph3" />condition<ph dataRef="id8" id="ph4" />, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />script<ph dataRef="id12" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <ph dataRef="id7" id="ph3" />condition<ph dataRef="id8" id="ph4" />, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />script<ph dataRef="id12" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>addObjects</source>
          <target>addObjects</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>/addObjects</source>
          <target>/addObjects</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>attributes</source>
          <target>attributes</target>
        </segment>
      </unit>
      <unit id="188">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />attributes<ph dataRef="id2" id="ph2" /> element defines the attributes for a registry key or file.</source>
          <target>The <ph dataRef="id1" id="ph1" />attributes<ph dataRef="id2" id="ph2" /> element defines the attributes for a registry key or file.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each <ph dataRef="id3" id="ph1" />object</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each <ph dataRef="id3" id="ph1" />object</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#object)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="191">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="193">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>attributes<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Content</pc><ph dataRef="id4" id="ph2" />/attributes</source>
          <target>attributes<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Content</pc><ph dataRef="id4" id="ph2" />/attributes</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Content</source>
          <target>Content</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>The content depends on the type of object specified.</source>
          <target>The content depends on the type of object specified.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>For files, the content can be a string containing any of the following attributes separated by commas:</source>
          <target>For files, the content can be a string containing any of the following attributes separated by commas:</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Archive</source>
          <target>Archive</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Read-only</source>
          <target>Read-only</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>System</source>
          <target>System</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Hidden</source>
          <target>Hidden</target>
        </segment>
      </unit>
      <unit id="205">
        <segment state="initial">
          <source>For registry keys, the content can be one of the following types:</source>
          <target>For registry keys, the content can be one of the following types:</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>None</source>
          <target>None</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>String</source>
          <target>String</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>ExpandString</source>
          <target>ExpandString</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>Binary</source>
          <target>Binary</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Dword</source>
          <target>Dword</target>
        </segment>
      </unit>
      <unit id="211">
        <segment state="initial">
          <source>REG_SZ</source>
          <target>REG_SZ</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>bytes</source>
          <target>bytes</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You must specify the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element only for files because, if <ph dataRef="id3" id="ph3" />location<ph dataRef="id4" id="ph4" /> corresponds to a registry key or a directory, then <ph dataRef="id5" id="ph5" />bytes<ph dataRef="id6" id="ph6" /> will be ignored.</source>
          <target>You must specify the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element only for files because, if <ph dataRef="id3" id="ph3" />location<ph dataRef="id4" id="ph4" /> corresponds to a registry key or a directory, then <ph dataRef="id5" id="ph5" />bytes<ph dataRef="id6" id="ph6" /> will be ignored.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#object)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>bytes string="Yes|No" expand="Yes|No"<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Content</pc><ph dataRef="id4" id="ph2" />/bytes</source>
          <target>bytes string="Yes|No" expand="Yes|No"<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Content</pc><ph dataRef="id4" id="ph2" />/bytes</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>string</source>
          <target>string</target>
        </segment>
      </unit>
      <unit id="224">
        <segment state="initial">
          <source>No, default is No</source>
          <target>No, default is No</target>
        </segment>
      </unit>
      <unit id="225">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Determines whether <ph dataRef="id1" id="ph1" />Content<ph dataRef="id2" id="ph2" /> should be interpreted as a string or as bytes.</source>
          <target>Determines whether <ph dataRef="id1" id="ph1" />Content<ph dataRef="id2" id="ph2" /> should be interpreted as a string or as bytes.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>expand</source>
          <target>expand</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>No (default = Yes</source>
          <target>No (default = Yes</target>
        </segment>
      </unit>
      <unit id="228">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When the expand parameter is Yes, the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is first expanded in the context of the source computer and then interpreted.</source>
          <target>When the expand parameter is Yes, the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is first expanded in the context of the source computer and then interpreted.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>Content</source>
          <target>Content</target>
        </segment>
      </unit>
      <unit id="230">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Depends on the value of the string.</source>
          <target>Depends on the value of the string.</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When the string is Yes: the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is interpreted as a string.</source>
          <target>When the string is Yes: the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is interpreted as a string.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When the string is No: the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is interpreted as bytes.</source>
          <target>When the string is No: the content of the <ph dataRef="id1" id="ph1" />bytes<ph dataRef="id2" id="ph2" /> element is interpreted as bytes.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Each two characters represent the hexadecimal value of a byte.</source>
          <target>Each two characters represent the hexadecimal value of a byte.</target>
        </segment>
      </unit>
      <unit id="235">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />616263<ph dataRef="id2" id="ph2" /> is the representation for the <ph dataRef="id3" id="ph3" />abc<ph dataRef="id4" id="ph4" /> ANSI string.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />616263<ph dataRef="id2" id="ph2" /> is the representation for the <ph dataRef="id3" id="ph3" />abc<ph dataRef="id4" id="ph4" /> ANSI string.</target>
        </segment>
      </unit>
      <unit id="236">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>A complete representation of the UNICODE string <ph dataRef="id1" id="ph1" />abc<ph dataRef="id2" id="ph2" /> including the string terminator would be: <ph dataRef="id3" id="ph3" />6100620063000000<ph dataRef="id4" id="ph4" />.</source>
          <target>A complete representation of the UNICODE string <ph dataRef="id1" id="ph1" />abc<ph dataRef="id2" id="ph2" /> including the string terminator would be: <ph dataRef="id3" id="ph3" />6100620063000000<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>commandLine</source>
          <target>commandLine</target>
        </segment>
      </unit>
      <unit id="239">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You might want to use the <ph dataRef="id1" id="ph1" />commandLine<ph dataRef="id2" id="ph2" /> element if you want to start or stop a service or application before or after you run the ScanState and LoadState tools.</source>
          <target>You might want to use the <ph dataRef="id1" id="ph1" />commandLine<ph dataRef="id2" id="ph2" /> element if you want to start or stop a service or application before or after you run the ScanState and LoadState tools.</target>
        </segment>
      </unit>
      <unit id="240">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#externalprocess)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />externalProcess<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />externalProcess<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none****</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none****</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="244">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>commandLine<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">CommandLineString</pc><ph dataRef="id4" id="ph2" />/commandLine</source>
          <target>commandLine<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">CommandLineString</pc><ph dataRef="id4" id="ph2" />/commandLine</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>CommandLineString</source>
          <target>CommandLineString</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>A valid command line.</source>
          <target>A valid command line.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>component</source>
          <target>component</target>
        </segment>
      </unit>
      <unit id="252">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</source>
          <target>The <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>This element defines the most basic construct of a migration .xml file.</source>
          <target>This element defines the most basic construct of a migration .xml file.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>For example, in the MigApp.xml file, "Microsoft® Office 2003" is a component that contains another component, "Microsoft Office Access® 2003".</source>
          <target>For example, in the MigApp.xml file, "Microsoft® Office 2003" is a component that contains another component, "Microsoft Office Access® 2003".</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>You can use the child elements to define the component.</source>
          <target>You can use the child elements to define the component.</target>
        </segment>
      </unit>
      <unit id="256">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>A component can be nested inside another component; that is, the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element can be a child of the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element within the <ph dataRef="id5" id="ph5" />component<ph dataRef="id6" id="ph6" /> element in two cases: 1) when the parent <ph dataRef="id7" id="ph7" />component<ph dataRef="id8" id="ph8" /> element is a container or 2) if the child <ph dataRef="id9" id="ph9" />component<ph dataRef="id10" id="ph10" /> element has the same role as the parent <ph dataRef="id11" id="ph11" />component<ph dataRef="id12" id="ph12" /> element.</source>
          <target>A component can be nested inside another component; that is, the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element can be a child of the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element within the <ph dataRef="id5" id="ph5" />component<ph dataRef="id6" id="ph6" /> element in two cases: 1) when the parent <ph dataRef="id7" id="ph7" />component<ph dataRef="id8" id="ph8" /> element is a container or 2) if the child <ph dataRef="id9" id="ph9" />component<ph dataRef="id10" id="ph10" /> element has the same role as the parent <ph dataRef="id11" id="ph11" />component<ph dataRef="id12" id="ph12" /> element.</target>
        </segment>
      </unit>
      <unit id="257">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="258">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#migration)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#role)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />migration<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />role<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />migration<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />role<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="259">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#role)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#displayname)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />displayName<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />displayName<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="260">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#manufacturer)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#version)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#description)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#paths)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">[</data>
          <data id="id20">](#icon)</data>
          <data id="id21">&amp;lt;</data>
          <data id="id22">&amp;gt;</data>
          <data id="id23">[</data>
          <data id="id24">](#bkmk-environment)</data>
          <data id="id25">&amp;lt;</data>
          <data id="id26">&amp;gt;</data>
          <data id="id27">[</data>
          <data id="id28">](#extensions)</data>
          <data id="id29">&amp;lt;</data>
          <data id="id30">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />manufacturer<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />version<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />description<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />paths<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />icon<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />environment<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />extensions<ph dataRef="id30" id="ph14" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />manufacturer<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />version<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />description<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />paths<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />icon<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />environment<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />extensions<ph dataRef="id30" id="ph14" /></pc></target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>component type="System|Application|Device|Documents" context="User|System|UserAndSystem" defaultSupported="TRUE|FALSE|YES|NO"</source>
          <target>component type="System|Application|Device|Documents" context="User|System|UserAndSystem" defaultSupported="TRUE|FALSE|YES|NO"</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>hidden="Yes|No"</source>
          <target>hidden="Yes|No"</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>/component</source>
          <target>/component</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>type</source>
          <target>type</target>
        </segment>
      </unit>
      <unit id="269">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>You can use the following to group settings, and define the type of the component.</source>
          <target>You can use the following to group settings, and define the type of the component.</target>
        </segment>
      </unit>
      <unit id="271">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>System:<ph dataRef="id1" id="ph1" /> Operating system settings.</source>
          <target>System:<ph dataRef="id1" id="ph1" /> Operating system settings.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>All Windows® components are defined by this type.</source>
          <target>All Windows® components are defined by this type.</target>
        </segment>
      </unit>
      <unit id="273">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>When type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" /> the settings will not migrate unless there is an equivalent component in the .xml files that is specified on the LoadState command line.</source>
          <target>When type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" /> the settings will not migrate unless there is an equivalent component in the .xml files that is specified on the LoadState command line.</target>
        </segment>
      </unit>
      <unit id="274">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, the default MigSys.xml file contains components with type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" />.</source>
          <target>For example, the default MigSys.xml file contains components with type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>If you specify this file on the ScanState command line, you must also specify the file on the LoadState command line for the settings to migrate.</source>
          <target>If you specify this file on the ScanState command line, you must also specify the file on the LoadState command line for the settings to migrate.</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source>This is because the LoadState tool must detect an equivalent component.</source>
          <target>This is because the LoadState tool must detect an equivalent component.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source>That is, the component must have the same migration urlid of the .xml file and an identical display name.</source>
          <target>That is, the component must have the same migration urlid of the .xml file and an identical display name.</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>Otherwise, the LoadState tool will not migrate those settings from the store.</source>
          <target>Otherwise, the LoadState tool will not migrate those settings from the store.</target>
        </segment>
      </unit>
      <unit id="279">
        <segment state="initial">
          <source>This is helpful when the source computer is running Windows XP, and you are migrating to both Windows Vista and Windows XP because you can use the same store for both destination computers.</source>
          <target>This is helpful when the source computer is running Windows XP, and you are migrating to both Windows Vista and Windows XP because you can use the same store for both destination computers.</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Application:<ph dataRef="id1" id="ph1" /> Settings for an application.</source>
          <target>Application:<ph dataRef="id1" id="ph1" /> Settings for an application.</target>
        </segment>
      </unit>
      <unit id="281">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Device:<ph dataRef="id1" id="ph1" /> Settings for a device.</source>
          <target>Device:<ph dataRef="id1" id="ph1" /> Settings for a device.</target>
        </segment>
      </unit>
      <unit id="282">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Documents:<ph dataRef="id1" id="ph1" /> Specifies files.</source>
          <target>Documents:<ph dataRef="id1" id="ph1" /> Specifies files.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>Default = UserAndSystem</source>
          <target>Default = UserAndSystem</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>Defines the scope of this parameter; that is, whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter; that is, whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="287">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element.</source>
          <target>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="288">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it has a context of User.</source>
          <target>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it has a context of User.</target>
        </segment>
      </unit>
      <unit id="289">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If a <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element has a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element is not there.</source>
          <target>If a <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element has a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element is not there.</target>
        </segment>
      </unit>
      <unit id="290">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>User<ph dataRef="id1" id="ph1" />.</source>
          <target>User<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>Evaluates the component for each user.</source>
          <target>Evaluates the component for each user.</target>
        </segment>
      </unit>
      <unit id="292">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>System<ph dataRef="id1" id="ph1" />.</source>
          <target>System<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source>Evaluates the component only once for the system.</source>
          <target>Evaluates the component only once for the system.</target>
        </segment>
      </unit>
      <unit id="294">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>UserAndSystem<ph dataRef="id1" id="ph1" />.</source>
          <target>UserAndSystem<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source>Evaluates the component for the entire operating system and each user.</source>
          <target>Evaluates the component for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source>defaultSupported</source>
          <target>defaultSupported</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source>(default = TRUE)</source>
          <target>(default = TRUE)</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>Can be any of TRUE, FALSE, YES or NO.</source>
          <target>Can be any of TRUE, FALSE, YES or NO.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source>If this parameter is FALSE (or NO), the component will not be migrated unless there is an equivalent component on the destination computer.</source>
          <target>If this parameter is FALSE (or NO), the component will not be migrated unless there is an equivalent component on the destination computer.</target>
        </segment>
      </unit>
      <unit id="301">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>When type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" /> the settings will not migrate unless there is an equivalent component in the .xml files that are specified on the LoadState command line.</source>
          <target>When type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" /> the settings will not migrate unless there is an equivalent component in the .xml files that are specified on the LoadState command line.</target>
        </segment>
      </unit>
      <unit id="302">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, the default MigSys.xml file contains components with type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" />.</source>
          <target>For example, the default MigSys.xml file contains components with type=<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" /> and defaultSupported=<ph dataRef="id3" id="ph3" />FALSE<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source>If you specify this file on the ScanState command line, you must also specify the file on the LoadState command line for the settings to migrate.</source>
          <target>If you specify this file on the ScanState command line, you must also specify the file on the LoadState command line for the settings to migrate.</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source>This is because the LoadState tool must detect an equivalent component.</source>
          <target>This is because the LoadState tool must detect an equivalent component.</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source>That is, the component must have the same migration urlid of the .xml file and an identical display name or the LoadState tool will not migrate those settings from the store.</source>
          <target>That is, the component must have the same migration urlid of the .xml file and an identical display name or the LoadState tool will not migrate those settings from the store.</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source>This is helpful when the source computer is running Windows XP, and you are migrating to both Windows Vista and Windows XP because you can use the same store for both destination computers.</source>
          <target>This is helpful when the source computer is running Windows XP, and you are migrating to both Windows Vista and Windows XP because you can use the same store for both destination computers.</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>hidden</source>
          <target>hidden</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source>This parameter is for internal USMT use only.</source>
          <target>This parameter is for internal USMT use only.</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source>For an example, see any of the default migration .xml files.</source>
          <target>For an example, see any of the default migration .xml files.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source>condition</source>
          <target>condition</target>
        </segment>
      </unit>
      <unit id="311">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Although the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> element under the <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" />, and <ph dataRef="id7" id="ph7" />addObjects<ph dataRef="id8" id="ph8" /> elements is supported, we recommend that you do not use it.</source>
          <target>Although the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> element under the <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" />, and <ph dataRef="id7" id="ph7" />addObjects<ph dataRef="id8" id="ph8" /> elements is supported, we recommend that you do not use it.</target>
        </segment>
      </unit>
      <unit id="312">
        <segment state="initial">
          <source>This element might be deprecated in future versions of USMT, requiring you to rewrite your scripts.</source>
          <target>This element might be deprecated in future versions of USMT, requiring you to rewrite your scripts.</target>
        </segment>
      </unit>
      <unit id="313">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">[</data>
          <data id="id6">](#conditions)</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>We recommend that, if you need to use a condition within the <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />addObjects<ph dataRef="id4" id="ph4" /> elements, you use the more powerful <pc dataRefEnd="id6" dataRefStart="id5" id="p1"><ph dataRef="id7" id="ph5" />conditions<ph dataRef="id8" id="ph6" /></pc> element, which allows you to formulate complex Boolean statements.</source>
          <target>We recommend that, if you need to use a condition within the <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />addObjects<ph dataRef="id4" id="ph4" /> elements, you use the more powerful <pc dataRefEnd="id6" dataRefStart="id5" id="p1"><ph dataRef="id7" id="ph5" />conditions<ph dataRef="id8" id="ph6" /></pc> element, which allows you to formulate complex Boolean statements.</target>
        </segment>
      </unit>
      <unit id="314">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> element has a Boolean result.</source>
          <target>The <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> element has a Boolean result.</target>
        </segment>
      </unit>
      <unit id="315">
        <segment state="initial">
          <source>You can use this element to specify the conditions in which the parent element will be evaluated.</source>
          <target>You can use this element to specify the conditions in which the parent element will be evaluated.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>If any of the present conditions return FALSE, the parent element will not be evaluated.</source>
          <target>If any of the present conditions return FALSE, the parent element will not be evaluated.</target>
        </segment>
      </unit>
      <unit id="317">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited.</target>
        </segment>
      </unit>
      <unit id="318">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <ph dataRef="id7" id="ph3" />detect<ph dataRef="id8" id="ph4" />, <ph dataRef="id9" id="ph5" />objectSet<ph dataRef="id10" id="ph6" />, <ph dataRef="id11" id="ph7" />addObjects</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <ph dataRef="id7" id="ph3" />detect<ph dataRef="id8" id="ph4" />, <ph dataRef="id9" id="ph5" />objectSet<ph dataRef="id10" id="ph6" />, <ph dataRef="id11" id="ph7" />addObjects</target>
        </segment>
      </unit>
      <unit id="319">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="320">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditionfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />condition<ph dataRef="id6" id="ph2" /> functions</pc> with this element: DoesOSMatch, IsNative64Bit(), IsOSLaterThan, IsOSEarlierThan, DoesObjectExist, DoesFileVersionMatch, IsFileVersionAbove, IsFileVersionBelow, IsSystemContext, DoesStringContentEqual, DoesStringContentContain, IsSameObject, IsSameContent, and IsSameStringContent.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />condition<ph dataRef="id6" id="ph2" /> functions</pc> with this element: DoesOSMatch, IsNative64Bit(), IsOSLaterThan, IsOSEarlierThan, DoesObjectExist, DoesFileVersionMatch, IsFileVersionAbove, IsFileVersionBelow, IsSystemContext, DoesStringContentEqual, DoesStringContentContain, IsSameObject, IsSameContent, and IsSameStringContent.</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="322">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>condition negation="Yes|No"<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ScriptName</pc><ph dataRef="id4" id="ph2" />/condition</source>
          <target>condition negation="Yes|No"<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ScriptName</pc><ph dataRef="id4" id="ph2" />/condition</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source>negation</source>
          <target>negation</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source>Default = No</source>
          <target>Default = No</target>
        </segment>
      </unit>
      <unit id="329">
        <originalData>
          <data id="id1">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>Yes<ph dataRef="id1" id="ph1" /> reverses the True/False value of the condition.</source>
          <target>Yes<ph dataRef="id1" id="ph1" /> reverses the True/False value of the condition.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>ScriptName</source>
          <target>ScriptName</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="332">
        <segment state="initial">
          <source>A script that has been defined within this migration section.</source>
          <target>A script that has been defined within this migration section.</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source>For example,</source>
          <target>For example,</target>
        </segment>
      </unit>
      <unit id="334">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>In the code sample below, the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, A and B, are joined together by the AND operator because they are in separate <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> sections.</source>
          <target>In the code sample below, the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, A and B, are joined together by the AND operator because they are in separate <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> sections.</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="336">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>However, in the code sample below, the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, A and B, are joined together by the OR operator because they are in the same <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> section.</source>
          <target>However, in the code sample below, the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, A and B, are joined together by the OR operator because they are in the same <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> section.</target>
        </segment>
      </unit>
      <unit id="337">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>condition<ph dataRef="id1" id="ph1" /> functions</source>
          <target>condition<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="338">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> functions return a Boolean value.</source>
          <target>The <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> functions return a Boolean value.</target>
        </segment>
      </unit>
      <unit id="339">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use these elements in <ph dataRef="id1" id="ph1" />addObjects<ph dataRef="id2" id="ph2" /> conditions.</source>
          <target>You can use these elements in <ph dataRef="id1" id="ph1" />addObjects<ph dataRef="id2" id="ph2" /> conditions.</target>
        </segment>
      </unit>
      <unit id="340">
        <segment state="initial">
          <source>Operating system version functions</source>
          <target>Operating system version functions</target>
        </segment>
      </unit>
      <unit id="341">
        <segment state="initial">
          <source>Object content functions</source>
          <target>Object content functions</target>
        </segment>
      </unit>
      <unit id="342">
        <segment state="initial">
          <source>Operating system version functions</source>
          <target>Operating system version functions</target>
        </segment>
      </unit>
      <unit id="343">
        <segment state="initial">
          <source>DoesOSMatch</source>
          <target>DoesOSMatch</target>
        </segment>
      </unit>
      <unit id="344">
        <segment state="initial">
          <source>All matches are case insensitive.</source>
          <target>All matches are case insensitive.</target>
        </segment>
      </unit>
      <unit id="345">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: DoesOSMatch("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</source>
          <target>Syntax: DoesOSMatch("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="348">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source>OSType</source>
          <target>OSType</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="351">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The only valid value for this setting is <ph dataRef="id1" id="ph1" />NT<ph dataRef="id2" id="ph2" />.</source>
          <target>The only valid value for this setting is <ph dataRef="id1" id="ph1" />NT<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="352">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Note, however, that you must set this setting for the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> functions to work correctly.</source>
          <target>Note, however, that you must set this setting for the <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> functions to work correctly.</target>
        </segment>
      </unit>
      <unit id="353">
        <segment state="initial">
          <source>OSVersion</source>
          <target>OSVersion</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="355">
        <segment state="initial">
          <source>The major version, minor version, build number and corrected service diskette version separated by periods.</source>
          <target>The major version, minor version, build number and corrected service diskette version separated by periods.</target>
        </segment>
      </unit>
      <unit id="356">
        <originalData>
          <data id="id1">&lt;code&gt;5.0.2600.Service Pack 1&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="357">
        <segment state="initial">
          <source>You can also specify partial specification of the version with a pattern.</source>
          <target>You can also specify partial specification of the version with a pattern.</target>
        </segment>
      </unit>
      <unit id="358">
        <originalData>
          <data id="id1">&lt;code&gt;5.0.*&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="359">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="360">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">\*</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesOSMatch("NT","<ph dataRef="id2" id="ph2" />")<ph dataRef="id3" id="ph3" />/condition</source>
          <target>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesOSMatch("NT","<ph dataRef="id2" id="ph2" />")<ph dataRef="id3" id="ph3" />/condition</target>
        </segment>
      </unit>
      <unit id="361">
        <segment state="initial">
          <source>IsNative64Bit</source>
          <target>IsNative64Bit</target>
        </segment>
      </unit>
      <unit id="362">
        <segment state="initial">
          <source>The IsNative64Bit function returns TRUE if the migration process is running as a native 64-bit process; that is, a process running on a 64-bit system without Windows on Windows (WOW).</source>
          <target>The IsNative64Bit function returns TRUE if the migration process is running as a native 64-bit process; that is, a process running on a 64-bit system without Windows on Windows (WOW).</target>
        </segment>
      </unit>
      <unit id="363">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="364">
        <segment state="initial">
          <source>IsOSLaterThan</source>
          <target>IsOSLaterThan</target>
        </segment>
      </unit>
      <unit id="365">
        <segment state="initial">
          <source>All comparisons are case insensitive.</source>
          <target>All comparisons are case insensitive.</target>
        </segment>
      </unit>
      <unit id="366">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsOSLaterThan("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</source>
          <target>Syntax: IsOSLaterThan("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</target>
        </segment>
      </unit>
      <unit id="367">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="368">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="369">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="370">
        <segment state="initial">
          <source>OSType</source>
          <target>OSType</target>
        </segment>
      </unit>
      <unit id="371">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="372">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Can be <ph dataRef="id1" id="ph1" />9x<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />NT<ph dataRef="id4" id="ph4" />.</source>
          <target>Can be <ph dataRef="id1" id="ph1" />9x<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />NT<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="373">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>If <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> does not match the type of the current operating system, then it returns FALSE.</source>
          <target>If <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> does not match the type of the current operating system, then it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="374">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the current operating system is Windows NT-based and <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> is “9x”, the result will be FALSE.</source>
          <target>For example, if the current operating system is Windows NT-based and <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> is “9x”, the result will be FALSE.</target>
        </segment>
      </unit>
      <unit id="375">
        <segment state="initial">
          <source>OSVersion</source>
          <target>OSVersion</target>
        </segment>
      </unit>
      <unit id="376">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="377">
        <segment state="initial">
          <source>The major version, minor version, build number, and corrected service diskette version separated by periods.</source>
          <target>The major version, minor version, build number, and corrected service diskette version separated by periods.</target>
        </segment>
      </unit>
      <unit id="378">
        <originalData>
          <data id="id1">&lt;code&gt;5.0.2600.Service Pack 1&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="379">
        <segment state="initial">
          <source>You can also specify partial specification of the version but no pattern is allowed.</source>
          <target>You can also specify partial specification of the version but no pattern is allowed.</target>
        </segment>
      </unit>
      <unit id="380">
        <originalData>
          <data id="id1">&lt;code&gt;5.0&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="381">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The IsOSLaterThan function returns TRUE if the current operating system is later than or equal to <ph dataRef="id1" id="ph1" />OSVersion<ph dataRef="id2" id="ph2" />.</source>
          <target>The IsOSLaterThan function returns TRUE if the current operating system is later than or equal to <ph dataRef="id1" id="ph1" />OSVersion<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="382">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="383">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>condition negation="Yes"<ph dataRef="id1" id="ph1" />MigXmlHelper.IsOSLaterThan("NT","6.0")<ph dataRef="id2" id="ph2" />/condition</source>
          <target>condition negation="Yes"<ph dataRef="id1" id="ph1" />MigXmlHelper.IsOSLaterThan("NT","6.0")<ph dataRef="id2" id="ph2" />/condition</target>
        </segment>
      </unit>
      <unit id="384">
        <segment state="initial">
          <source>IsOSEarlierThan</source>
          <target>IsOSEarlierThan</target>
        </segment>
      </unit>
      <unit id="385">
        <segment state="initial">
          <source>All comparisons are case insensitive.</source>
          <target>All comparisons are case insensitive.</target>
        </segment>
      </unit>
      <unit id="386">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsOSEarlierThan("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</source>
          <target>Syntax: IsOSEarlierThan("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OSType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OSVersion</pc>")</target>
        </segment>
      </unit>
      <unit id="387">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="388">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="389">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="390">
        <segment state="initial">
          <source>OSType</source>
          <target>OSType</target>
        </segment>
      </unit>
      <unit id="391">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="392">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Can be <ph dataRef="id1" id="ph1" />9x<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />NT<ph dataRef="id4" id="ph4" />.</source>
          <target>Can be <ph dataRef="id1" id="ph1" />9x<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />NT<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="393">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>If <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> does not match the type of the current operating system, then it returns FALSE.</source>
          <target>If <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> does not match the type of the current operating system, then it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="394">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the current operating system is Windows NT-based and <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> is “9x” the result will be FALSE.</source>
          <target>For example, if the current operating system is Windows NT-based and <ph dataRef="id1" id="ph1" />OSType<ph dataRef="id2" id="ph2" /> is “9x” the result will be FALSE.</target>
        </segment>
      </unit>
      <unit id="395">
        <segment state="initial">
          <source>OSVersion</source>
          <target>OSVersion</target>
        </segment>
      </unit>
      <unit id="396">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="397">
        <segment state="initial">
          <source>The major version, minor version, build number, and corrected service diskette version separated by periods.</source>
          <target>The major version, minor version, build number, and corrected service diskette version separated by periods.</target>
        </segment>
      </unit>
      <unit id="398">
        <originalData>
          <data id="id1">&lt;code&gt;5.0.2600.Service Pack 1&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="399">
        <segment state="initial">
          <source>You can also specify partial specification of the version but no pattern is allowed.</source>
          <target>You can also specify partial specification of the version but no pattern is allowed.</target>
        </segment>
      </unit>
      <unit id="400">
        <originalData>
          <data id="id1">&lt;code&gt;5.0&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="401">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The IsOSEarlierThan function returns TRUE if the current operating system is earlier than <ph dataRef="id1" id="ph1" />OSVersion<ph dataRef="id2" id="ph2" />.</source>
          <target>The IsOSEarlierThan function returns TRUE if the current operating system is earlier than <ph dataRef="id1" id="ph1" />OSVersion<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="402">
        <segment state="initial">
          <source>Object content functions</source>
          <target>Object content functions</target>
        </segment>
      </unit>
      <unit id="403">
        <segment state="initial">
          <source>DoesObjectExist</source>
          <target>DoesObjectExist</target>
        </segment>
      </unit>
      <unit id="404">
        <segment state="initial">
          <source>The DoesObjectExist function returns TRUE if any object exists that matches the location pattern.</source>
          <target>The DoesObjectExist function returns TRUE if any object exists that matches the location pattern.</target>
        </segment>
      </unit>
      <unit id="405">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="406">
        <segment state="initial">
          <source>The location pattern is expanded before attempting the enumeration.</source>
          <target>The location pattern is expanded before attempting the enumeration.</target>
        </segment>
      </unit>
      <unit id="407">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: DoesObjectExist("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>")</source>
          <target>Syntax: DoesObjectExist("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>")</target>
        </segment>
      </unit>
      <unit id="408">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="409">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="410">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="411">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="412">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="413">
        <segment state="initial">
          <source>Defines the object type.</source>
          <target>Defines the object type.</target>
        </segment>
      </unit>
      <unit id="414">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="415">
        <segment state="initial">
          <source>EncodedLocationPattern</source>
          <target>EncodedLocationPattern</target>
        </segment>
      </unit>
      <unit id="416">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="417">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc>.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc>.</target>
        </segment>
      </unit>
      <unit id="418">
        <segment state="initial">
          <source>Environment variables are allowed.</source>
          <target>Environment variables are allowed.</target>
        </segment>
      </unit>
      <unit id="419">
        <segment state="initial">
          <source>For an example of this element, see the MigApp.xml file.</source>
          <target>For an example of this element, see the MigApp.xml file.</target>
        </segment>
      </unit>
      <unit id="420">
        <segment state="initial">
          <source>DoesFileVersionMatch</source>
          <target>DoesFileVersionMatch</target>
        </segment>
      </unit>
      <unit id="421">
        <segment state="initial">
          <source>The pattern check is case insensitive.</source>
          <target>The pattern check is case insensitive.</target>
        </segment>
      </unit>
      <unit id="422">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: DoesFileVersionMatch("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</source>
          <target>Syntax: DoesFileVersionMatch("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</target>
        </segment>
      </unit>
      <unit id="423">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="424">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="425">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="426">
        <segment state="initial">
          <source>EncodedFileLocation</source>
          <target>EncodedFileLocation</target>
        </segment>
      </unit>
      <unit id="427">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="428">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</target>
        </segment>
      </unit>
      <unit id="429">
        <segment state="initial">
          <source>Environment variables are allowed.</source>
          <target>Environment variables are allowed.</target>
        </segment>
      </unit>
      <unit id="430">
        <segment state="initial">
          <source>VersionTag</source>
          <target>VersionTag</target>
        </segment>
      </unit>
      <unit id="431">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="432">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#allowed)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</target>
        </segment>
      </unit>
      <unit id="433">
        <segment state="initial">
          <source>VersionValue</source>
          <target>VersionValue</target>
        </segment>
      </unit>
      <unit id="434">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="435">
        <segment state="initial">
          <source>A string pattern.</source>
          <target>A string pattern.</target>
        </segment>
      </unit>
      <unit id="436">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />Microsoft*<ph dataRef="id2" id="ph2" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />Microsoft*<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="437">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="438">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">\\</data>
          <data id="id3">\*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesFileVersionMatch("%MSNMessengerInstPath%<ph dataRef="id2" id="ph2" />msnmsgr.exe","ProductVersion","6.<ph dataRef="id3" id="ph3" />")<ph dataRef="id4" id="ph4" />/condition</source>
          <target>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesFileVersionMatch("%MSNMessengerInstPath%<ph dataRef="id2" id="ph2" />msnmsgr.exe","ProductVersion","6.<ph dataRef="id3" id="ph3" />")<ph dataRef="id4" id="ph4" />/condition</target>
        </segment>
      </unit>
      <unit id="439">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">\\</data>
          <data id="id3">\*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesFileVersionMatch("%MSNMessengerInstPath%<ph dataRef="id2" id="ph2" />msnmsgr.exe","ProductVersion","7.<ph dataRef="id3" id="ph3" />")<ph dataRef="id4" id="ph4" />/condition</source>
          <target>condition<ph dataRef="id1" id="ph1" />MigXmlHelper.DoesFileVersionMatch("%MSNMessengerInstPath%<ph dataRef="id2" id="ph2" />msnmsgr.exe","ProductVersion","7.<ph dataRef="id3" id="ph3" />")<ph dataRef="id4" id="ph4" />/condition</target>
        </segment>
      </unit>
      <unit id="440">
        <segment state="initial">
          <source>IsFileVersionAbove</source>
          <target>IsFileVersionAbove</target>
        </segment>
      </unit>
      <unit id="441">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>The IsFileVersionAbove function returns TRUE if the version of the file is higher than <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VersionValue</pc>.</source>
          <target>The IsFileVersionAbove function returns TRUE if the version of the file is higher than <pc dataRefEnd="id2" dataRefStart="id1" id="p1">VersionValue</pc>.</target>
        </segment>
      </unit>
      <unit id="442">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsFileVersionAbove("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</source>
          <target>Syntax: IsFileVersionAbove("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</target>
        </segment>
      </unit>
      <unit id="443">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="444">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="445">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="446">
        <segment state="initial">
          <source>EncodedFileLocation</source>
          <target>EncodedFileLocation</target>
        </segment>
      </unit>
      <unit id="447">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="448">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</target>
        </segment>
      </unit>
      <unit id="449">
        <segment state="initial">
          <source>Environment variables are allowed.</source>
          <target>Environment variables are allowed.</target>
        </segment>
      </unit>
      <unit id="450">
        <segment state="initial">
          <source>VersionTag</source>
          <target>VersionTag</target>
        </segment>
      </unit>
      <unit id="451">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="452">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#allowed)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</target>
        </segment>
      </unit>
      <unit id="453">
        <segment state="initial">
          <source>VersionValue</source>
          <target>VersionValue</target>
        </segment>
      </unit>
      <unit id="454">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="455">
        <segment state="initial">
          <source>The value to compare to.</source>
          <target>The value to compare to.</target>
        </segment>
      </unit>
      <unit id="456">
        <segment state="initial">
          <source>You cannot specify a pattern.</source>
          <target>You cannot specify a pattern.</target>
        </segment>
      </unit>
      <unit id="457">
        <segment state="initial">
          <source>IsFileVersionBelow</source>
          <target>IsFileVersionBelow</target>
        </segment>
      </unit>
      <unit id="458">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsFileVersionBelow("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</source>
          <target>Syntax: IsFileVersionBelow("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">EncodedFileLocation</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">VersionTag</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">VersionValue</pc>")</target>
        </segment>
      </unit>
      <unit id="459">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="460">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="461">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="462">
        <segment state="initial">
          <source>EncodedFileLocation</source>
          <target>EncodedFileLocation</target>
        </segment>
      </unit>
      <unit id="463">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="464">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc> for the file that will be checked.</target>
        </segment>
      </unit>
      <unit id="465">
        <segment state="initial">
          <source>Environment variables are allowed.</source>
          <target>Environment variables are allowed.</target>
        </segment>
      </unit>
      <unit id="466">
        <segment state="initial">
          <source>VersionTag</source>
          <target>VersionTag</target>
        </segment>
      </unit>
      <unit id="467">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="468">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#allowed)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">version tag</pc> value that will be checked.</target>
        </segment>
      </unit>
      <unit id="469">
        <segment state="initial">
          <source>VersionValue</source>
          <target>VersionValue</target>
        </segment>
      </unit>
      <unit id="470">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="471">
        <segment state="initial">
          <source>The value to compare to.</source>
          <target>The value to compare to.</target>
        </segment>
      </unit>
      <unit id="472">
        <segment state="initial">
          <source>You cannot specify a pattern.</source>
          <target>You cannot specify a pattern.</target>
        </segment>
      </unit>
      <unit id="473">
        <segment state="initial">
          <source>IsSystemContext</source>
          <target>IsSystemContext</target>
        </segment>
      </unit>
      <unit id="474">
        <segment state="initial">
          <source>The IsSystemContext function returns TRUE if the current context is "System".</source>
          <target>The IsSystemContext function returns TRUE if the current context is "System".</target>
        </segment>
      </unit>
      <unit id="475">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="476">
        <segment state="initial">
          <source>Syntax: IsSystemContext()</source>
          <target>Syntax: IsSystemContext()</target>
        </segment>
      </unit>
      <unit id="477">
        <segment state="initial">
          <source>DoesStringContentEqual</source>
          <target>DoesStringContentEqual</target>
        </segment>
      </unit>
      <unit id="478">
        <originalData>
          <data id="id1">`StringContent`</data>
        </originalData>
        <segment state="initial">
          <source>The DoesStringContentEqual function returns TRUE if the string representation of the given object is identical to <ph dataRef="id1" id="ph1" />.</source>
          <target>The DoesStringContentEqual function returns TRUE if the string representation of the given object is identical to <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="479">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: DoesStringContentEqual("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">StringContent</pc>")</source>
          <target>Syntax: DoesStringContentEqual("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">StringContent</pc>")</target>
        </segment>
      </unit>
      <unit id="480">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="481">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="482">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="483">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="484">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="485">
        <segment state="initial">
          <source>Defines the type of object.</source>
          <target>Defines the type of object.</target>
        </segment>
      </unit>
      <unit id="486">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="487">
        <segment state="initial">
          <source>EncodedLocationPattern</source>
          <target>EncodedLocationPattern</target>
        </segment>
      </unit>
      <unit id="488">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="489">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the object that will be examined.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the object that will be examined.</target>
        </segment>
      </unit>
      <unit id="490">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="491">
        <segment state="initial">
          <source>StringContent</source>
          <target>StringContent</target>
        </segment>
      </unit>
      <unit id="492">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="493">
        <segment state="initial">
          <source>The string that will be checked against.</source>
          <target>The string that will be checked against.</target>
        </segment>
      </unit>
      <unit id="494">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="495">
        <segment state="initial">
          <source>DoesStringContentContain</source>
          <target>DoesStringContentContain</target>
        </segment>
      </unit>
      <unit id="496">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>The DoesStringContentContain function returns TRUE if there is at least one occurrence of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StrToFind</pc> in the string representation of the object.</source>
          <target>The DoesStringContentContain function returns TRUE if there is at least one occurrence of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StrToFind</pc> in the string representation of the object.</target>
        </segment>
      </unit>
      <unit id="497">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: DoesStringContentContain("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">StrToFind</pc>")</source>
          <target>Syntax: DoesStringContentContain("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">StrToFind</pc>")</target>
        </segment>
      </unit>
      <unit id="498">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="499">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="500">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="501">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="502">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="503">
        <segment state="initial">
          <source>Defines the type of object.</source>
          <target>Defines the type of object.</target>
        </segment>
      </unit>
      <unit id="504">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="505">
        <segment state="initial">
          <source>EncodedLocationPattern</source>
          <target>EncodedLocationPattern</target>
        </segment>
      </unit>
      <unit id="506">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="507">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the object that will be examined.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the object that will be examined.</target>
        </segment>
      </unit>
      <unit id="508">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="509">
        <segment state="initial">
          <source>StrToFind</source>
          <target>StrToFind</target>
        </segment>
      </unit>
      <unit id="510">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="511">
        <segment state="initial">
          <source>A string that will be searched inside the content of the given object.</source>
          <target>A string that will be searched inside the content of the given object.</target>
        </segment>
      </unit>
      <unit id="512">
        <segment state="initial">
          <source>IsSameObject</source>
          <target>IsSameObject</target>
        </segment>
      </unit>
      <unit id="513">
        <segment state="initial">
          <source>The IsSameObject function returns TRUE if the given encoded locations resolve to the same physical object.</source>
          <target>The IsSameObject function returns TRUE if the given encoded locations resolve to the same physical object.</target>
        </segment>
      </unit>
      <unit id="514">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="515">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsSameObject("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">EncodedLocation2</pc>")</source>
          <target>Syntax: IsSameObject("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">EncodedLocation2</pc>")</target>
        </segment>
      </unit>
      <unit id="516">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="517">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="518">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="519">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="520">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="521">
        <segment state="initial">
          <source>Defines the type of object.</source>
          <target>Defines the type of object.</target>
        </segment>
      </unit>
      <unit id="522">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="523">
        <segment state="initial">
          <source>EncodedLocation1</source>
          <target>EncodedLocation1</target>
        </segment>
      </unit>
      <unit id="524">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="525">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</target>
        </segment>
      </unit>
      <unit id="526">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="527">
        <segment state="initial">
          <source>EncodedLocation2</source>
          <target>EncodedLocation2</target>
        </segment>
      </unit>
      <unit id="528">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="529">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</target>
        </segment>
      </unit>
      <unit id="530">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="531">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="532">
        <segment state="initial">
          <source>IsSameContent</source>
          <target>IsSameContent</target>
        </segment>
      </unit>
      <unit id="533">
        <segment state="initial">
          <source>The IsSameContent function returns TRUE if the given objects have the same content.</source>
          <target>The IsSameContent function returns TRUE if the given objects have the same content.</target>
        </segment>
      </unit>
      <unit id="534">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="535">
        <segment state="initial">
          <source>The content will be compared byte by byte.</source>
          <target>The content will be compared byte by byte.</target>
        </segment>
      </unit>
      <unit id="536">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsSameContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType1</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ObjectType2</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p4">EncodedLocation2</pc>")</source>
          <target>Syntax: IsSameContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType1</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ObjectType2</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p4">EncodedLocation2</pc>")</target>
        </segment>
      </unit>
      <unit id="537">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="538">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="539">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="540">
        <segment state="initial">
          <source>ObjectType1</source>
          <target>ObjectType1</target>
        </segment>
      </unit>
      <unit id="541">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="542">
        <segment state="initial">
          <source>Defines the type of the first object.</source>
          <target>Defines the type of the first object.</target>
        </segment>
      </unit>
      <unit id="543">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="544">
        <segment state="initial">
          <source>EncodedLocation1</source>
          <target>EncodedLocation1</target>
        </segment>
      </unit>
      <unit id="545">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="546">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</target>
        </segment>
      </unit>
      <unit id="547">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="548">
        <segment state="initial">
          <source>ObjectType2</source>
          <target>ObjectType2</target>
        </segment>
      </unit>
      <unit id="549">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="550">
        <segment state="initial">
          <source>Defines the type of the second object.</source>
          <target>Defines the type of the second object.</target>
        </segment>
      </unit>
      <unit id="551">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="552">
        <segment state="initial">
          <source>EncodedLocation2</source>
          <target>EncodedLocation2</target>
        </segment>
      </unit>
      <unit id="553">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="554">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</target>
        </segment>
      </unit>
      <unit id="555">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="556">
        <segment state="initial">
          <source>IsSameStringContent</source>
          <target>IsSameStringContent</target>
        </segment>
      </unit>
      <unit id="557">
        <segment state="initial">
          <source>The IsSameStringContent function returns TRUE if the given objects have the same content.</source>
          <target>The IsSameStringContent function returns TRUE if the given objects have the same content.</target>
        </segment>
      </unit>
      <unit id="558">
        <segment state="initial">
          <source>Otherwise, it returns FALSE.</source>
          <target>Otherwise, it returns FALSE.</target>
        </segment>
      </unit>
      <unit id="559">
        <segment state="initial">
          <source>The content will be interpreted as a string.</source>
          <target>The content will be interpreted as a string.</target>
        </segment>
      </unit>
      <unit id="560">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: IsSameStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType1</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ObjectType2</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p4">EncodedLocation2</pc>")</source>
          <target>Syntax: IsSameStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType1</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocation1</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ObjectType2</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p4">EncodedLocation2</pc>")</target>
        </segment>
      </unit>
      <unit id="561">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="562">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="563">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="564">
        <segment state="initial">
          <source>ObjectType1</source>
          <target>ObjectType1</target>
        </segment>
      </unit>
      <unit id="565">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="566">
        <segment state="initial">
          <source>Defines the type of the first object.</source>
          <target>Defines the type of the first object.</target>
        </segment>
      </unit>
      <unit id="567">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="568">
        <segment state="initial">
          <source>EncodedLocation1</source>
          <target>EncodedLocation1</target>
        </segment>
      </unit>
      <unit id="569">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="570">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the first object.</target>
        </segment>
      </unit>
      <unit id="571">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="572">
        <segment state="initial">
          <source>ObjectType2</source>
          <target>ObjectType2</target>
        </segment>
      </unit>
      <unit id="573">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="574">
        <segment state="initial">
          <source>Defines the type of the second object.</source>
          <target>Defines the type of the second object.</target>
        </segment>
      </unit>
      <unit id="575">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="576">
        <segment state="initial">
          <source>EncodedLocation2</source>
          <target>EncodedLocation2</target>
        </segment>
      </unit>
      <unit id="577">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="578">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">encoded location</pc> for the second object.</target>
        </segment>
      </unit>
      <unit id="579">
        <segment state="initial">
          <source>You can specify environment variables.</source>
          <target>You can specify environment variables.</target>
        </segment>
      </unit>
      <unit id="580">
        <segment state="initial">
          <source>conditions</source>
          <target>conditions</target>
        </segment>
      </unit>
      <unit id="581">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> element returns a Boolean result that is used to specify the conditions in which the parent element is evaluated.</source>
          <target>The <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> element returns a Boolean result that is used to specify the conditions in which the parent element is evaluated.</target>
        </segment>
      </unit>
      <unit id="582">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>USMT evaluates the child elements, and then joins their results using the operators AND or OR according to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">operation</pc> parameter.</source>
          <target>USMT evaluates the child elements, and then joins their results using the operators AND or OR according to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">operation</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="583">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited inside another <ph dataRef="id3" id="ph1" />conditions<ph dataRef="id4" id="ph2" /> element.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited inside another <ph dataRef="id3" id="ph1" />conditions<ph dataRef="id4" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="584">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#detection)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">[</data>
          <data id="id6">](#rules)</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">[</data>
          <data id="id10">](#addobjects)</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
          <data id="id13">[</data>
          <data id="id14">](#objectset)</data>
          <data id="id15">&amp;lt;</data>
          <data id="id16">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Limited to one occurrence in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />rules<ph dataRef="id8" id="ph4" /></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />addObjects<ph dataRef="id12" id="ph6" /></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p4"><ph dataRef="id15" id="ph7" />objectSet<ph dataRef="id16" id="ph8" /></pc></source>
          <target>Limited to one occurrence in <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />rules<ph dataRef="id8" id="ph4" /></pc>, <pc dataRefEnd="id10" dataRefStart="id9" id="p3"><ph dataRef="id11" id="ph5" />addObjects<ph dataRef="id12" id="ph6" /></pc>, and <pc dataRefEnd="id14" dataRefStart="id13" id="p4"><ph dataRef="id15" id="ph7" />objectSet<ph dataRef="id16" id="ph8" /></pc></target>
        </segment>
      </unit>
      <unit id="585">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#detection)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#bkmk-environment)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#rules)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">[</data>
          <data id="id20">](#addobjects)</data>
          <data id="id21">&amp;lt;</data>
          <data id="id22">&amp;gt;</data>
          <data id="id23">[</data>
          <data id="id24">](#objectset)</data>
          <data id="id25">&amp;lt;</data>
          <data id="id26">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />detection<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />environment<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />rules<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />addObjects<ph dataRef="id22" id="ph10" /></pc>, and <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />objectSet<ph dataRef="id26" id="ph12" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />detection<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />environment<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />rules<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />addObjects<ph dataRef="id22" id="ph10" /></pc>, and <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />objectSet<ph dataRef="id26" id="ph12" /></pc></target>
        </segment>
      </unit>
      <unit id="586">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#condition)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />condition<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />condition<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="587">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="588">
        <segment state="initial">
          <source>conditions operation="AND|OR"</source>
          <target>conditions operation="AND|OR"</target>
        </segment>
      </unit>
      <unit id="589">
        <segment state="initial">
          <source>/conditions</source>
          <target>/conditions</target>
        </segment>
      </unit>
      <unit id="590">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="591">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="592">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="593">
        <segment state="initial">
          <source>operation</source>
          <target>operation</target>
        </segment>
      </unit>
      <unit id="594">
        <segment state="initial">
          <source>No, default = AND</source>
          <target>No, default = AND</target>
        </segment>
      </unit>
      <unit id="595">
        <segment state="initial">
          <source>Defines the Boolean operation that is performed on the results that are obtained from the child elements.</source>
          <target>Defines the Boolean operation that is performed on the results that are obtained from the child elements.</target>
        </segment>
      </unit>
      <unit id="596">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="597">
        <segment state="initial">
          <source>content</source>
          <target>content</target>
        </segment>
      </unit>
      <unit id="598">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />content<ph dataRef="id2" id="ph2" /> element to specify a list of object patterns to obtain an object set from the source computer.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />content<ph dataRef="id2" id="ph2" /> element to specify a list of object patterns to obtain an object set from the source computer.</target>
        </segment>
      </unit>
      <unit id="599">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Each <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> within a <ph dataRef="id3" id="ph3" />content<ph dataRef="id4" id="ph4" /> element is evaluated.</source>
          <target>Each <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> within a <ph dataRef="id3" id="ph3" />content<ph dataRef="id4" id="ph4" /> element is evaluated.</target>
        </segment>
      </unit>
      <unit id="600">
        <segment state="initial">
          <source>For each resulting object pattern list, the objects that match it are enumerated and their content is filtered by the filter parameter.</source>
          <target>For each resulting object pattern list, the objects that match it are enumerated and their content is filtered by the filter parameter.</target>
        </segment>
      </unit>
      <unit id="601">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The resulting string array is the output for the <ph dataRef="id1" id="ph1" />content<ph dataRef="id2" id="ph2" /> element.</source>
          <target>The resulting string array is the output for the <ph dataRef="id1" id="ph1" />content<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="602">
        <segment state="initial">
          <source>The filter script returns an array of locations.</source>
          <target>The filter script returns an array of locations.</target>
        </segment>
      </unit>
      <unit id="603">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The parent <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> element can contain multiple child <ph dataRef="id3" id="ph3" />content<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>The parent <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> element can contain multiple child <ph dataRef="id3" id="ph3" />content<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="604">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="605">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="606">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="607">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#contentfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />content<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ExtractSingleFile, ExtractMultipleFiles, and ExtractDirectory.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />content<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ExtractSingleFile, ExtractMultipleFiles, and ExtractDirectory.</target>
        </segment>
      </unit>
      <unit id="608">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="609">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>content filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>content filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="610">
        <segment state="initial">
          <source>/content</source>
          <target>/content</target>
        </segment>
      </unit>
      <unit id="611">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="612">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="613">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="614">
        <segment state="initial">
          <source>filter</source>
          <target>filter</target>
        </segment>
      </unit>
      <unit id="615">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="616">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="617">
        <originalData>
          <data id="id1">&lt;code&gt;, MyScripts.AScript (&amp;quot;Arg1&amp;quot;,&amp;quot;Arg2&amp;quot;)&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example<ph dataRef="id1" id="ph1" />.</source>
          <target>For example<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="618">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The script is called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>The script is called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="619">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="620">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="621">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="622">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>content<ph dataRef="id1" id="ph1" /> functions</source>
          <target>content<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="623">
        <segment state="initial">
          <source>The following functions generate patterns out of the content of an object.</source>
          <target>The following functions generate patterns out of the content of an object.</target>
        </segment>
      </unit>
      <unit id="624">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</source>
          <target>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</target>
        </segment>
      </unit>
      <unit id="625">
        <segment state="initial">
          <source>ExtractSingleFile</source>
          <target>ExtractSingleFile</target>
        </segment>
      </unit>
      <unit id="626">
        <segment state="initial">
          <source>If the registry value is a MULTI-SZ, only the first segment is processed.</source>
          <target>If the registry value is a MULTI-SZ, only the first segment is processed.</target>
        </segment>
      </unit>
      <unit id="627">
        <segment state="initial">
          <source>The returned pattern is the encoded location for a file that must exist on the system.</source>
          <target>The returned pattern is the encoded location for a file that must exist on the system.</target>
        </segment>
      </unit>
      <unit id="628">
        <segment state="initial">
          <source>If the specification is correct in the registry value, but the file does not exist, this function returns NULL.</source>
          <target>If the specification is correct in the registry value, but the file does not exist, this function returns NULL.</target>
        </segment>
      </unit>
      <unit id="629">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ExtractSingleFile(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathHints</pc>)</source>
          <target>Syntax: ExtractSingleFile(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathHints</pc>)</target>
        </segment>
      </unit>
      <unit id="630">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="631">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="632">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="633">
        <segment state="initial">
          <source>Separators</source>
          <target>Separators</target>
        </segment>
      </unit>
      <unit id="634">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="635">
        <segment state="initial">
          <source>A list of possible separators that might follow the file specification in this registry value name.</source>
          <target>A list of possible separators that might follow the file specification in this registry value name.</target>
        </segment>
      </unit>
      <unit id="636">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</source>
          <target>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</target>
        </segment>
      </unit>
      <unit id="637">
        <segment state="initial">
          <source>You can specify NULL.</source>
          <target>You can specify NULL.</target>
        </segment>
      </unit>
      <unit id="638">
        <segment state="initial">
          <source>PathHints</source>
          <target>PathHints</target>
        </segment>
      </unit>
      <unit id="639">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="640">
        <segment state="initial">
          <source>A list of extra paths, separated by colons (;), where the function will look for a file matching the current content.</source>
          <target>A list of extra paths, separated by colons (;), where the function will look for a file matching the current content.</target>
        </segment>
      </unit>
      <unit id="641">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the content is <ph dataRef="id1" id="ph1" />Notepad.exe<ph dataRef="id2" id="ph2" /> and the path is the %Path% environment variable, the function will find Notepad.exe in %windir% and returns <ph dataRef="id3" id="ph3" />c:\Windows [Notepad.exe]<ph dataRef="id4" id="ph4" />.</source>
          <target>For example, if the content is <ph dataRef="id1" id="ph1" />Notepad.exe<ph dataRef="id2" id="ph2" /> and the path is the %Path% environment variable, the function will find Notepad.exe in %windir% and returns <ph dataRef="id3" id="ph3" />c:\Windows [Notepad.exe]<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="642">
        <segment state="initial">
          <source>You can specify NULL.</source>
          <target>You can specify NULL.</target>
        </segment>
      </unit>
      <unit id="643">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="644">
        <segment state="initial">
          <source>and</source>
          <target>and</target>
        </segment>
      </unit>
      <unit id="645">
        <segment state="initial">
          <source>ExtractMultipleFiles</source>
          <target>ExtractMultipleFiles</target>
        </segment>
      </unit>
      <unit id="646">
        <segment state="initial">
          <source>The ExtractMultipleFiles function returns multiple patterns, one for each file that is found in the content of the given registry value.</source>
          <target>The ExtractMultipleFiles function returns multiple patterns, one for each file that is found in the content of the given registry value.</target>
        </segment>
      </unit>
      <unit id="647">
        <segment state="initial">
          <source>If the registry value is a MULTI-SZ, the MULTI-SZ separator is considered a separator by default.</source>
          <target>If the registry value is a MULTI-SZ, the MULTI-SZ separator is considered a separator by default.</target>
        </segment>
      </unit>
      <unit id="648">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>therefore, for MULTI-SZ, the <ph dataRef="id1" id="ph1" />Separators<ph dataRef="id2" id="ph2" /> argument must be NULL.</source>
          <target>therefore, for MULTI-SZ, the <ph dataRef="id1" id="ph1" />Separators<ph dataRef="id2" id="ph2" /> argument must be NULL.</target>
        </segment>
      </unit>
      <unit id="649">
        <segment state="initial">
          <source>The returned patterns are the encoded locations for files that must exist on the source computer.</source>
          <target>The returned patterns are the encoded locations for files that must exist on the source computer.</target>
        </segment>
      </unit>
      <unit id="650">
        <segment state="initial">
          <source>If the specification is correct in the registry value but the file does not exist, it will not be included in the resulting list.</source>
          <target>If the specification is correct in the registry value but the file does not exist, it will not be included in the resulting list.</target>
        </segment>
      </unit>
      <unit id="651">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ExtractMultipleFiles(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathHints</pc>)</source>
          <target>Syntax: ExtractMultipleFiles(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">PathHints</pc>)</target>
        </segment>
      </unit>
      <unit id="652">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="653">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="654">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="655">
        <segment state="initial">
          <source>Separators</source>
          <target>Separators</target>
        </segment>
      </unit>
      <unit id="656">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="657">
        <segment state="initial">
          <source>A list of possible separators that might follow the file specification in this registry value name.</source>
          <target>A list of possible separators that might follow the file specification in this registry value name.</target>
        </segment>
      </unit>
      <unit id="658">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</source>
          <target>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</target>
        </segment>
      </unit>
      <unit id="659">
        <segment state="initial">
          <source>This parameter must be NULL when processing MULTI-SZ registry values.</source>
          <target>This parameter must be NULL when processing MULTI-SZ registry values.</target>
        </segment>
      </unit>
      <unit id="660">
        <segment state="initial">
          <source>PathHints</source>
          <target>PathHints</target>
        </segment>
      </unit>
      <unit id="661">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="662">
        <segment state="initial">
          <source>A list of extra paths, separated by colons (;), where the function will look for a file matching the current content.</source>
          <target>A list of extra paths, separated by colons (;), where the function will look for a file matching the current content.</target>
        </segment>
      </unit>
      <unit id="663">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the content is <ph dataRef="id1" id="ph1" />Notepad.exe<ph dataRef="id2" id="ph2" /> and the path is the %Path% environment variable, the function will find Notepad.exe in %windir% and returns <ph dataRef="id3" id="ph3" />c:\Windows [Notepad.exe]<ph dataRef="id4" id="ph4" />.</source>
          <target>For example, if the content is <ph dataRef="id1" id="ph1" />Notepad.exe<ph dataRef="id2" id="ph2" /> and the path is the %Path% environment variable, the function will find Notepad.exe in %windir% and returns <ph dataRef="id3" id="ph3" />c:\Windows [Notepad.exe]<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="664">
        <segment state="initial">
          <source>You can specify NULL.</source>
          <target>You can specify NULL.</target>
        </segment>
      </unit>
      <unit id="665">
        <segment state="initial">
          <source>ExtractDirectory</source>
          <target>ExtractDirectory</target>
        </segment>
      </unit>
      <unit id="666">
        <segment state="initial">
          <source>The ExtractDirectory function returns a pattern that is the encoded location for a directory that must exist on the source computer.</source>
          <target>The ExtractDirectory function returns a pattern that is the encoded location for a directory that must exist on the source computer.</target>
        </segment>
      </unit>
      <unit id="667">
        <segment state="initial">
          <source>If the specification is correct in the registry value, but the directory does not exist, this function returns NULL.</source>
          <target>If the specification is correct in the registry value, but the directory does not exist, this function returns NULL.</target>
        </segment>
      </unit>
      <unit id="668">
        <segment state="initial">
          <source>If it is processing a registry value that is a MULTI-SZ, only the first segment will be processed.</source>
          <target>If it is processing a registry value that is a MULTI-SZ, only the first segment will be processed.</target>
        </segment>
      </unit>
      <unit id="669">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ExtractDirectory(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">LevelsToTrim</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">PatternSuffix</pc>)</source>
          <target>Syntax: ExtractDirectory(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Separators</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">LevelsToTrim</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">PatternSuffix</pc>)</target>
        </segment>
      </unit>
      <unit id="670">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="671">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="672">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="673">
        <segment state="initial">
          <source>Separators</source>
          <target>Separators</target>
        </segment>
      </unit>
      <unit id="674">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="675">
        <segment state="initial">
          <source>A list of possible separators that might follow the file specification in this registry value name.</source>
          <target>A list of possible separators that might follow the file specification in this registry value name.</target>
        </segment>
      </unit>
      <unit id="676">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</source>
          <target>For example, if the content is <ph dataRef="id1" id="ph1" />C:\Windows\Notepad.exe,-2<ph dataRef="id2" id="ph2" />, the separator is a comma.</target>
        </segment>
      </unit>
      <unit id="677">
        <segment state="initial">
          <source>You must specify NULL when processing MULTI-SZ registry values.</source>
          <target>You must specify NULL when processing MULTI-SZ registry values.</target>
        </segment>
      </unit>
      <unit id="678">
        <segment state="initial">
          <source>LevelsToTrim</source>
          <target>LevelsToTrim</target>
        </segment>
      </unit>
      <unit id="679">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="680">
        <segment state="initial">
          <source>The number of levels to delete from the end of the directory specification.</source>
          <target>The number of levels to delete from the end of the directory specification.</target>
        </segment>
      </unit>
      <unit id="681">
        <segment state="initial">
          <source>Use this function to extract a root directory when you have a registry value that points inside that root directory in a known location.</source>
          <target>Use this function to extract a root directory when you have a registry value that points inside that root directory in a known location.</target>
        </segment>
      </unit>
      <unit id="682">
        <segment state="initial">
          <source>PatternSuffix</source>
          <target>PatternSuffix</target>
        </segment>
      </unit>
      <unit id="683">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="684">
        <segment state="initial">
          <source>The pattern to add to the directory specification.</source>
          <target>The pattern to add to the directory specification.</target>
        </segment>
      </unit>
      <unit id="685">
        <originalData>
          <data id="id1">&lt;code&gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4"> [</data>
          <data id="id5">]&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1"><ph dataRef="id4" id="ph2" /></pc><ph dataRef="id5" id="ph3" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1"><ph dataRef="id4" id="ph2" /></pc><ph dataRef="id5" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="686">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="687">
        <segment state="initial">
          <source>contentModify</source>
          <target>contentModify</target>
        </segment>
      </unit>
      <unit id="688">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />contentModify<ph dataRef="id2" id="ph2" /> element modifies the content of an object before it is written to the destination computer.</source>
          <target>The <ph dataRef="id1" id="ph1" />contentModify<ph dataRef="id2" id="ph2" /> element modifies the content of an object before it is written to the destination computer.</target>
        </segment>
      </unit>
      <unit id="689">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />contentModify<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>For each <ph dataRef="id1" id="ph1" />contentModify<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="690">
        <segment state="initial">
          <source>This element returns the new content of the object that is being processed.</source>
          <target>This element returns the new content of the object that is being processed.</target>
        </segment>
      </unit>
      <unit id="691">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="692">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="693">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="694">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#contentmodifyfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions</pc>: You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />contentModify<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ConvertToDWORD, ConvertToString, ConvertToBinary, KeepExisting, OffsetValue, SetValueByTable, MergeMultiSzContent, and MergeDelimitedContent.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions</pc>: You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />contentModify<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ConvertToDWORD, ConvertToString, ConvertToBinary, KeepExisting, OffsetValue, SetValueByTable, MergeMultiSzContent, and MergeDelimitedContent.</target>
        </segment>
      </unit>
      <unit id="695">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="696">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>contentModify script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>contentModify script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="697">
        <segment state="initial">
          <source>/contentModify</source>
          <target>/contentModify</target>
        </segment>
      </unit>
      <unit id="698">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="699">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="700">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="701">
        <segment state="initial">
          <source>script</source>
          <target>script</target>
        </segment>
      </unit>
      <unit id="702">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="703">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="704">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="705">
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the include rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the include rule.</target>
        </segment>
      </unit>
      <unit id="706">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="707">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="708">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="709">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>contentModify<ph dataRef="id1" id="ph1" /> functions</source>
          <target>contentModify<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="710">
        <segment state="initial">
          <source>The following functions change the content of objects as they are migrated.</source>
          <target>The following functions change the content of objects as they are migrated.</target>
        </segment>
      </unit>
      <unit id="711">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</source>
          <target>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</target>
        </segment>
      </unit>
      <unit id="712">
        <segment state="initial">
          <source>ConvertToDWORD</source>
          <target>ConvertToDWORD</target>
        </segment>
      </unit>
      <unit id="713">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The ConvertToDWORD function converts the content of registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a DWORD.</source>
          <target>The ConvertToDWORD function converts the content of registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a DWORD.</target>
        </segment>
      </unit>
      <unit id="714">
        <segment state="initial">
          <source>For example, ConvertToDWORD will convert the string "1" to the DWORD 0x00000001.</source>
          <target>For example, ConvertToDWORD will convert the string "1" to the DWORD 0x00000001.</target>
        </segment>
      </unit>
      <unit id="715">
        <segment state="initial">
          <source>If the conversion fails, then the value of DefaultValueOnError will be applied.</source>
          <target>If the conversion fails, then the value of DefaultValueOnError will be applied.</target>
        </segment>
      </unit>
      <unit id="716">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ConvertToDWORD(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc>)</source>
          <target>Syntax: ConvertToDWORD(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc>)</target>
        </segment>
      </unit>
      <unit id="717">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="718">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="719">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="720">
        <segment state="initial">
          <source>DefaultValueOnError</source>
          <target>DefaultValueOnError</target>
        </segment>
      </unit>
      <unit id="721">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="722">
        <segment state="initial">
          <source>The value that will be written into the value name if the conversion fails.</source>
          <target>The value that will be written into the value name if the conversion fails.</target>
        </segment>
      </unit>
      <unit id="723">
        <segment state="initial">
          <source>You can specify NULL, and 0 will be written if the conversion fails.</source>
          <target>You can specify NULL, and 0 will be written if the conversion fails.</target>
        </segment>
      </unit>
      <unit id="724">
        <segment state="initial">
          <source>ConvertToString</source>
          <target>ConvertToString</target>
        </segment>
      </unit>
      <unit id="725">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The ConvertToString function converts the content of registry values that match the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a string.</source>
          <target>The ConvertToString function converts the content of registry values that match the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a string.</target>
        </segment>
      </unit>
      <unit id="726">
        <segment state="initial">
          <source>For example, it will convert the DWORD 0x00000001 to the string "1".</source>
          <target>For example, it will convert the DWORD 0x00000001 to the string "1".</target>
        </segment>
      </unit>
      <unit id="727">
        <segment state="initial">
          <source>If the conversion fails, then the value of DefaultValueOnError will be applied.</source>
          <target>If the conversion fails, then the value of DefaultValueOnError will be applied.</target>
        </segment>
      </unit>
      <unit id="728">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ConvertToString(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc>)</source>
          <target>Syntax: ConvertToString(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc>)</target>
        </segment>
      </unit>
      <unit id="729">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="730">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="731">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="732">
        <segment state="initial">
          <source>DefaultValueOnError</source>
          <target>DefaultValueOnError</target>
        </segment>
      </unit>
      <unit id="733">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="734">
        <segment state="initial">
          <source>The value that will be written into the value name if the conversion fails.</source>
          <target>The value that will be written into the value name if the conversion fails.</target>
        </segment>
      </unit>
      <unit id="735">
        <segment state="initial">
          <source>You can specify NULL, and 0 will be written if the conversion fails.</source>
          <target>You can specify NULL, and 0 will be written if the conversion fails.</target>
        </segment>
      </unit>
      <unit id="736">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="737">
        <segment state="initial">
          <source>ConvertToBinary</source>
          <target>ConvertToBinary</target>
        </segment>
      </unit>
      <unit id="738">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The ConvertToBinary function converts the content of registry values that match the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a binary type.</source>
          <target>The ConvertToBinary function converts the content of registry values that match the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element to a binary type.</target>
        </segment>
      </unit>
      <unit id="739">
        <segment state="initial">
          <source>Syntax: ConvertToBinary ()</source>
          <target>Syntax: ConvertToBinary ()</target>
        </segment>
      </unit>
      <unit id="740">
        <segment state="initial">
          <source>OffsetValue</source>
          <target>OffsetValue</target>
        </segment>
      </unit>
      <unit id="741">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>The OffsetValue function adds or subtracts <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> from the value of the migrated object, and then writes the result back into the registry value on the destination computer.</source>
          <target>The OffsetValue function adds or subtracts <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> from the value of the migrated object, and then writes the result back into the registry value on the destination computer.</target>
        </segment>
      </unit>
      <unit id="742">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>For example, if the migrated object is a DWORD with a value of 14, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is "-2", the registry value will be 12 on the destination computer.</source>
          <target>For example, if the migrated object is a DWORD with a value of 14, and the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc> is "-2", the registry value will be 12 on the destination computer.</target>
        </segment>
      </unit>
      <unit id="743">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: OffsetValue(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc>)</source>
          <target>Syntax: OffsetValue(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc>)</target>
        </segment>
      </unit>
      <unit id="744">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="745">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="746">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="747">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="748">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="749">
        <segment state="initial">
          <source>The string representation of a numeric value.</source>
          <target>The string representation of a numeric value.</target>
        </segment>
      </unit>
      <unit id="750">
        <segment state="initial">
          <source>It can be positive or negative.</source>
          <target>It can be positive or negative.</target>
        </segment>
      </unit>
      <unit id="751">
        <originalData>
          <data id="id1">&lt;code&gt;OffsetValue(2)&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="752">
        <segment state="initial">
          <source>SetValueByTable</source>
          <target>SetValueByTable</target>
        </segment>
      </unit>
      <unit id="753">
        <segment state="initial">
          <source>The SetValueByTable function matches the value from the source computer to the source table.</source>
          <target>The SetValueByTable function matches the value from the source computer to the source table.</target>
        </segment>
      </unit>
      <unit id="754">
        <segment state="initial">
          <source>If the value is there, the equivalent value in the destination table will be applied.</source>
          <target>If the value is there, the equivalent value in the destination table will be applied.</target>
        </segment>
      </unit>
      <unit id="755">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>If the value is not there, or if the destination table has no equivalent value, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc> will be applied.</source>
          <target>If the value is not there, or if the destination table has no equivalent value, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DefaultValueOnError</pc> will be applied.</target>
        </segment>
      </unit>
      <unit id="756">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: SetValueByTable(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SourceTable</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DestinationTable</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">DefaultValueOnError</pc>)</source>
          <target>Syntax: SetValueByTable(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SourceTable</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DestinationTable</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">DefaultValueOnError</pc>)</target>
        </segment>
      </unit>
      <unit id="757">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="758">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="759">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="760">
        <segment state="initial">
          <source>SourceTable</source>
          <target>SourceTable</target>
        </segment>
      </unit>
      <unit id="761">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="762">
        <segment state="initial">
          <source>A list of values separated by commas that are possible for the source registry values.</source>
          <target>A list of values separated by commas that are possible for the source registry values.</target>
        </segment>
      </unit>
      <unit id="763">
        <segment state="initial">
          <source>DestinationTable</source>
          <target>DestinationTable</target>
        </segment>
      </unit>
      <unit id="764">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="765">
        <segment state="initial">
          <source>A list of translated values separated by commas.</source>
          <target>A list of translated values separated by commas.</target>
        </segment>
      </unit>
      <unit id="766">
        <segment state="initial">
          <source>DefaultValueOnError</source>
          <target>DefaultValueOnError</target>
        </segment>
      </unit>
      <unit id="767">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="768">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
          <data id="id3">&lt;em&gt;</data>
          <data id="id4">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The value that will be applied to the destination computer if either 1) the value for the source computer does not match <ph dataRef="id1" id="ph1" />SourceTable<ph dataRef="id2" id="ph2" />, or 2) <ph dataRef="id3" id="ph3" />DestinationTable<ph dataRef="id4" id="ph4" /> has no equivalent value.</source>
          <target>The value that will be applied to the destination computer if either 1) the value for the source computer does not match <ph dataRef="id1" id="ph1" />SourceTable<ph dataRef="id2" id="ph2" />, or 2) <ph dataRef="id3" id="ph3" />DestinationTable<ph dataRef="id4" id="ph4" /> has no equivalent value.</target>
        </segment>
      </unit>
      <unit id="769">
        <segment state="initial">
          <source>If DefaultValueOnError is NULL, the value will not be changed on the destination computer.</source>
          <target>If DefaultValueOnError is NULL, the value will not be changed on the destination computer.</target>
        </segment>
      </unit>
      <unit id="770">
        <segment state="initial">
          <source>KeepExisting</source>
          <target>KeepExisting</target>
        </segment>
      </unit>
      <unit id="771">
        <segment state="initial">
          <source>You can use the KeepExisting function when there are conflicts on the destination computer.</source>
          <target>You can use the KeepExisting function when there are conflicts on the destination computer.</target>
        </segment>
      </unit>
      <unit id="772">
        <segment state="initial">
          <source>This function will keep (not overwrite) the specified attributes for the object that is on the destination computer.</source>
          <target>This function will keep (not overwrite) the specified attributes for the object that is on the destination computer.</target>
        </segment>
      </unit>
      <unit id="773">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: KeepExisting("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OptionString</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OptionString</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">OptionString</pc>",…)</source>
          <target>Syntax: KeepExisting("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">OptionString</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">OptionString</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">OptionString</pc>",…)</target>
        </segment>
      </unit>
      <unit id="774">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="775">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="776">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="777">
        <segment state="initial">
          <source>OptionString</source>
          <target>OptionString</target>
        </segment>
      </unit>
      <unit id="778">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="779">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
          <data id="id2">&lt;strong&gt;</data>
          <data id="id3">&lt;/strong&gt;</data>
          <data id="id4">&lt;strong&gt;</data>
          <data id="id5">&lt;/strong&gt;</data>
          <data id="id6">&lt;strong&gt;</data>
          <data id="id7">&lt;/strong&gt;</data>
          <data id="id8">&lt;em&gt;</data>
          <data id="id9">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>OptionString<ph dataRef="id1" id="ph1" /> can be <ph dataRef="id2" id="ph2" />Security<ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />TimeFields<ph dataRef="id5" id="ph5" />, or <ph dataRef="id6" id="ph6" />FileAttrib<ph dataRef="id7" id="ph7" />:<ph dataRef="id8" id="ph8" />Letter<ph dataRef="id9" id="ph9" />.</source>
          <target>OptionString<ph dataRef="id1" id="ph1" /> can be <ph dataRef="id2" id="ph2" />Security<ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />TimeFields<ph dataRef="id5" id="ph5" />, or <ph dataRef="id6" id="ph6" />FileAttrib<ph dataRef="id7" id="ph7" />:<ph dataRef="id8" id="ph8" />Letter<ph dataRef="id9" id="ph9" />.</target>
        </segment>
      </unit>
      <unit id="780">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can specify one of each type of <ph dataRef="id1" id="ph1" />OptionStrings<ph dataRef="id2" id="ph2" />.</source>
          <target>You can specify one of each type of <ph dataRef="id1" id="ph1" />OptionStrings<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="781">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Do not specify multiple <ph dataRef="id1" id="ph1" />OptionStrings<ph dataRef="id2" id="ph2" /> with the same value.</source>
          <target>Do not specify multiple <ph dataRef="id1" id="ph1" />OptionStrings<ph dataRef="id2" id="ph2" /> with the same value.</target>
        </segment>
      </unit>
      <unit id="782">
        <segment state="initial">
          <source>If you do, the right-most option of that type will be kept.</source>
          <target>If you do, the right-most option of that type will be kept.</target>
        </segment>
      </unit>
      <unit id="783">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
          <data id="id5">&amp;quot;</data>
          <data id="id6">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, do not specify <ph dataRef="id1" id="ph1" />(<ph dataRef="id2" id="ph2" />FileAttrib:H<ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />FileAttrib:R<ph dataRef="id5" id="ph5" />)<ph dataRef="id6" id="ph6" /> because only Read-only will be evaluated.</source>
          <target>For example, do not specify <ph dataRef="id1" id="ph1" />(<ph dataRef="id2" id="ph2" />FileAttrib:H<ph dataRef="id3" id="ph3" />, <ph dataRef="id4" id="ph4" />FileAttrib:R<ph dataRef="id5" id="ph5" />)<ph dataRef="id6" id="ph6" /> because only Read-only will be evaluated.</target>
        </segment>
      </unit>
      <unit id="784">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead specify <ph dataRef="id1" id="ph1" />(<ph dataRef="id2" id="ph2" />FileAttrib:HR<ph dataRef="id3" id="ph3" />)<ph dataRef="id4" id="ph4" /> and both Hidden and Read-only attributes will be kept on the destination computer.</source>
          <target>Instead specify <ph dataRef="id1" id="ph1" />(<ph dataRef="id2" id="ph2" />FileAttrib:HR<ph dataRef="id3" id="ph3" />)<ph dataRef="id4" id="ph4" /> and both Hidden and Read-only attributes will be kept on the destination computer.</target>
        </segment>
      </unit>
      <unit id="785">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Security<ph dataRef="id1" id="ph1" />.</source>
          <target>Security<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="786">
        <segment state="initial">
          <source>Keeps the destination object's security descriptor if it exists.</source>
          <target>Keeps the destination object's security descriptor if it exists.</target>
        </segment>
      </unit>
      <unit id="787">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>TimeFields<ph dataRef="id1" id="ph1" />.</source>
          <target>TimeFields<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="788">
        <segment state="initial">
          <source>Keeps the destination object's time stamps.</source>
          <target>Keeps the destination object's time stamps.</target>
        </segment>
      </unit>
      <unit id="789">
        <segment state="initial">
          <source>This parameter is for files only.</source>
          <target>This parameter is for files only.</target>
        </segment>
      </unit>
      <unit id="790">
        <originalData>
          <data id="id1">&lt;/strong&gt;&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>FileAttrib:<ph dataRef="id1" id="ph1" />Letter<ph dataRef="id2" id="ph2" />.</source>
          <target>FileAttrib:<ph dataRef="id1" id="ph1" />Letter<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="791">
        <segment state="initial">
          <source>Keeps the destination object's attribute value, either On or OFF, for the specified set of file attributes.</source>
          <target>Keeps the destination object's attribute value, either On or OFF, for the specified set of file attributes.</target>
        </segment>
      </unit>
      <unit id="792">
        <segment state="initial">
          <source>This parameter is for files only.</source>
          <target>This parameter is for files only.</target>
        </segment>
      </unit>
      <unit id="793">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>The following are case-insensitive, but USMT will ignore any values that are invalid, repeated, or if there is a space after <ph dataRef="id1" id="ph1" />FileAttrib:<ph dataRef="id2" id="ph2" />.</source>
          <target>The following are case-insensitive, but USMT will ignore any values that are invalid, repeated, or if there is a space after <ph dataRef="id1" id="ph1" />FileAttrib:<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="794">
        <segment state="initial">
          <source>You can specify any combination of the following attributes:</source>
          <target>You can specify any combination of the following attributes:</target>
        </segment>
      </unit>
      <unit id="795">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>A<ph dataRef="id1" id="ph1" /> = Archive</source>
          <target>A<ph dataRef="id1" id="ph1" /> = Archive</target>
        </segment>
      </unit>
      <unit id="796">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>C<ph dataRef="id1" id="ph1" /> = Compressed</source>
          <target>C<ph dataRef="id1" id="ph1" /> = Compressed</target>
        </segment>
      </unit>
      <unit id="797">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>E<ph dataRef="id1" id="ph1" /> = Encrypted</source>
          <target>E<ph dataRef="id1" id="ph1" /> = Encrypted</target>
        </segment>
      </unit>
      <unit id="798">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>H<ph dataRef="id1" id="ph1" /> = Hidden</source>
          <target>H<ph dataRef="id1" id="ph1" /> = Hidden</target>
        </segment>
      </unit>
      <unit id="799">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>I<ph dataRef="id1" id="ph1" /> = Not Content Indexed</source>
          <target>I<ph dataRef="id1" id="ph1" /> = Not Content Indexed</target>
        </segment>
      </unit>
      <unit id="800">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>O<ph dataRef="id1" id="ph1" /> = Offline</source>
          <target>O<ph dataRef="id1" id="ph1" /> = Offline</target>
        </segment>
      </unit>
      <unit id="801">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>R<ph dataRef="id1" id="ph1" /> = Read-Only</source>
          <target>R<ph dataRef="id1" id="ph1" /> = Read-Only</target>
        </segment>
      </unit>
      <unit id="802">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>S<ph dataRef="id1" id="ph1" /> = System</source>
          <target>S<ph dataRef="id1" id="ph1" /> = System</target>
        </segment>
      </unit>
      <unit id="803">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>T<ph dataRef="id1" id="ph1" /> = Temporary</source>
          <target>T<ph dataRef="id1" id="ph1" /> = Temporary</target>
        </segment>
      </unit>
      <unit id="804">
        <segment state="initial">
          <source>MergeMultiSzContent</source>
          <target>MergeMultiSzContent</target>
        </segment>
      </unit>
      <unit id="805">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The MergeMultiSzContent function merges the MULTI-SZ content of the registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element with the content of the equivalent registry values that already exist on the destination computer.</source>
          <target>The MergeMultiSzContent function merges the MULTI-SZ content of the registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element with the content of the equivalent registry values that already exist on the destination computer.</target>
        </segment>
      </unit>
      <unit id="806">
        <originalData>
          <data id="id1">` String`</data>
        </originalData>
        <segment state="initial">
          <source>and<ph dataRef="id1" id="ph1" /> either remove or add content to the resulting MULTI-SZ.</source>
          <target>and<ph dataRef="id1" id="ph1" /> either remove or add content to the resulting MULTI-SZ.</target>
        </segment>
      </unit>
      <unit id="807">
        <segment state="initial">
          <source>Duplicate elements will be removed.</source>
          <target>Duplicate elements will be removed.</target>
        </segment>
      </unit>
      <unit id="808">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: MergeMultiSzContent (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Instruction</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">Instruction</pc>,<pc dataRefEnd="id8" dataRefStart="id7" id="p4">String</pc>,…)</source>
          <target>Syntax: MergeMultiSzContent (<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Instruction</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">String</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">Instruction</pc>,<pc dataRefEnd="id8" dataRefStart="id7" id="p4">String</pc>,…)</target>
        </segment>
      </unit>
      <unit id="809">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="810">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="811">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="812">
        <segment state="initial">
          <source>Instruction</source>
          <target>Instruction</target>
        </segment>
      </unit>
      <unit id="813">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="814">
        <segment state="initial">
          <source>Can be one of the following:</source>
          <target>Can be one of the following:</target>
        </segment>
      </unit>
      <unit id="815">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Add<ph dataRef="id1" id="ph1" />.</source>
          <target>Add<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="816">
        <segment state="initial">
          <source>Adds the corresponding String to the resulting MULTI-SZ if it is not already there.</source>
          <target>Adds the corresponding String to the resulting MULTI-SZ if it is not already there.</target>
        </segment>
      </unit>
      <unit id="817">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Remove<ph dataRef="id1" id="ph1" />.</source>
          <target>Remove<ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="818">
        <segment state="initial">
          <source>Removes the corresponding String from the resulting MULTI-SZ.</source>
          <target>Removes the corresponding String from the resulting MULTI-SZ.</target>
        </segment>
      </unit>
      <unit id="819">
        <segment state="initial">
          <source>String</source>
          <target>String</target>
        </segment>
      </unit>
      <unit id="820">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="821">
        <segment state="initial">
          <source>The string to be added or removed.</source>
          <target>The string to be added or removed.</target>
        </segment>
      </unit>
      <unit id="822">
        <segment state="initial">
          <source>MergeDelimitedContent</source>
          <target>MergeDelimitedContent</target>
        </segment>
      </unit>
      <unit id="823">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The MergeDelimitedContent function merges the content of the registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element with the content of the equivalent registry values that already exist on the destination computer.</source>
          <target>The MergeDelimitedContent function merges the content of the registry values that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element with the content of the equivalent registry values that already exist on the destination computer.</target>
        </segment>
      </unit>
      <unit id="824">
        <segment state="initial">
          <source>The content is considered a list of elements separated by one of the characters in the Delimiters parameter.</source>
          <target>The content is considered a list of elements separated by one of the characters in the Delimiters parameter.</target>
        </segment>
      </unit>
      <unit id="825">
        <segment state="initial">
          <source>Duplicate elements will be removed.</source>
          <target>Duplicate elements will be removed.</target>
        </segment>
      </unit>
      <unit id="826">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: MergeDelimitedContent(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Delimiters</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Instruction</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">String</pc>,…)</source>
          <target>Syntax: MergeDelimitedContent(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">Delimiters</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">Instruction</pc>,<pc dataRefEnd="id6" dataRefStart="id5" id="p3">String</pc>,…)</target>
        </segment>
      </unit>
      <unit id="827">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="828">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="829">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="830">
        <segment state="initial">
          <source>Delimiters</source>
          <target>Delimiters</target>
        </segment>
      </unit>
      <unit id="831">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="832">
        <segment state="initial">
          <source>A single character that will be used to separate the content of the object that is being processed.</source>
          <target>A single character that will be used to separate the content of the object that is being processed.</target>
        </segment>
      </unit>
      <unit id="833">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The content will be considered as a list of elements that is separated by the <ph dataRef="id1" id="ph1" />Delimiters<ph dataRef="id2" id="ph2" />.</source>
          <target>The content will be considered as a list of elements that is separated by the <ph dataRef="id1" id="ph1" />Delimiters<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="834">
        <originalData>
          <data id="id1">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="835">
        <segment state="initial">
          <source>will separate the string based on a period.</source>
          <target>will separate the string based on a period.</target>
        </segment>
      </unit>
      <unit id="836">
        <segment state="initial">
          <source>Instruction</source>
          <target>Instruction</target>
        </segment>
      </unit>
      <unit id="837">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="838">
        <segment state="initial">
          <source>Can one of the following:</source>
          <target>Can one of the following:</target>
        </segment>
      </unit>
      <unit id="839">
        <segment state="initial">
          <source>Add.</source>
          <target>Add.</target>
        </segment>
      </unit>
      <unit id="840">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Adds <ph dataRef="id1" id="ph1" />String<ph dataRef="id2" id="ph2" /> to the resulting MULTI-SZ if it is not already there.</source>
          <target>Adds <ph dataRef="id1" id="ph1" />String<ph dataRef="id2" id="ph2" /> to the resulting MULTI-SZ if it is not already there.</target>
        </segment>
      </unit>
      <unit id="841">
        <segment state="initial">
          <source>Remove.</source>
          <target>Remove.</target>
        </segment>
      </unit>
      <unit id="842">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Removes <ph dataRef="id1" id="ph1" />String<ph dataRef="id2" id="ph2" /> from the resulting MULTI-SZ.</source>
          <target>Removes <ph dataRef="id1" id="ph1" />String<ph dataRef="id2" id="ph2" /> from the resulting MULTI-SZ.</target>
        </segment>
      </unit>
      <unit id="843">
        <segment state="initial">
          <source>String</source>
          <target>String</target>
        </segment>
      </unit>
      <unit id="844">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="845">
        <segment state="initial">
          <source>The string to be added or removed.</source>
          <target>The string to be added or removed.</target>
        </segment>
      </unit>
      <unit id="846">
        <segment state="initial">
          <source>description</source>
          <target>description</target>
        </segment>
      </unit>
      <unit id="847">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />description<ph dataRef="id2" id="ph2" /> element defines a description for the component but does not affect the migration.</source>
          <target>The <ph dataRef="id1" id="ph1" />description<ph dataRef="id2" id="ph2" /> element defines a description for the component but does not affect the migration.</target>
        </segment>
      </unit>
      <unit id="848">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</target>
        </segment>
      </unit>
      <unit id="849">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="850">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="851">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="852">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>description<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ComponentDescription</pc><ph dataRef="id4" id="ph2" />/description</source>
          <target>description<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ComponentDescription</pc><ph dataRef="id4" id="ph2" />/description</target>
        </segment>
      </unit>
      <unit id="853">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="854">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="855">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="856">
        <segment state="initial">
          <source>ComponentDescription</source>
          <target>ComponentDescription</target>
        </segment>
      </unit>
      <unit id="857">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="858">
        <segment state="initial">
          <source>The description of the component.</source>
          <target>The description of the component.</target>
        </segment>
      </unit>
      <unit id="859">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The following code sample shows how the <ph dataRef="id1" id="ph1" />description<ph dataRef="id2" id="ph2" /> element defines the "My custom component" description.:</source>
          <target>The following code sample shows how the <ph dataRef="id1" id="ph1" />description<ph dataRef="id2" id="ph2" /> element defines the "My custom component" description.:</target>
        </segment>
      </unit>
      <unit id="860">
        <segment state="initial">
          <source>destinationCleanup</source>
          <target>destinationCleanup</target>
        </segment>
      </unit>
      <unit id="861">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> element deletes objects, such as files and registry keys, from the destination computer before applying the objects from the source computer.</source>
          <target>The <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> element deletes objects, such as files and registry keys, from the destination computer before applying the objects from the source computer.</target>
        </segment>
      </unit>
      <unit id="862">
        <segment state="initial">
          <source>This element is evaluated only when the LoadState tool is run on the destination computer.</source>
          <target>This element is evaluated only when the LoadState tool is run on the destination computer.</target>
        </segment>
      </unit>
      <unit id="863">
        <segment state="initial">
          <source>That is, this element is ignored by the ScanState tool.</source>
          <target>That is, this element is ignored by the ScanState tool.</target>
        </segment>
      </unit>
      <unit id="864">
        <segment state="initial">
          <source>Important</source>
          <target>Important</target>
        </segment>
      </unit>
      <unit id="865">
        <segment state="initial">
          <source>Use this option with extreme caution because it will delete objects from the destination computer.</source>
          <target>Use this option with extreme caution because it will delete objects from the destination computer.</target>
        </segment>
      </unit>
      <unit id="866">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>For each <ph dataRef="id1" id="ph1" />destinationCleanup<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="867">
        <segment state="initial">
          <source>A common use for this element is if there is a missing registry key on the source computer and you want to ensure that a component is migrated.</source>
          <target>A common use for this element is if there is a missing registry key on the source computer and you want to ensure that a component is migrated.</target>
        </segment>
      </unit>
      <unit id="868">
        <segment state="initial">
          <source>In this case, you can delete all of the component's registry keys before migrating the source registry keys.</source>
          <target>In this case, you can delete all of the component's registry keys before migrating the source registry keys.</target>
        </segment>
      </unit>
      <unit id="869">
        <segment state="initial">
          <source>This will ensure that if there is a missing key on the source computer, it will also be missing on the destination computer.</source>
          <target>This will ensure that if there is a missing key on the source computer, it will also be missing on the destination computer.</target>
        </segment>
      </unit>
      <unit id="870">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="871">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="872">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc> (Note that the destination computer will delete all child elements.)</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc> (Note that the destination computer will delete all child elements.)</target>
        </segment>
      </unit>
      <unit id="873">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="874">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>destinationCleanup filter=<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc></source>
          <target>destinationCleanup filter=<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc></target>
        </segment>
      </unit>
      <unit id="875">
        <segment state="initial">
          <source>/destinationCleanup</source>
          <target>/destinationCleanup</target>
        </segment>
      </unit>
      <unit id="876">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="877">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="878">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="879">
        <segment state="initial">
          <source>filter</source>
          <target>filter</target>
        </segment>
      </unit>
      <unit id="880">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="881">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="882">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="883">
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the include rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the include rule.</target>
        </segment>
      </unit>
      <unit id="884">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="885">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="886">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="887">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="888">
        <segment state="initial">
          <source>detect</source>
          <target>detect</target>
        </segment>
      </unit>
      <unit id="889">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Although the <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element is still supported, we do not recommend using it because it may be deprecated in future versions of USMT.</source>
          <target>Although the <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element is still supported, we do not recommend using it because it may be deprecated in future versions of USMT.</target>
        </segment>
      </unit>
      <unit id="890">
        <segment state="initial">
          <source>In that case, you would have to rewrite your scripts.</source>
          <target>In that case, you would have to rewrite your scripts.</target>
        </segment>
      </unit>
      <unit id="891">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#detection)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Instead, we recommend that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p2">element.</pc></source>
          <target>Instead, we recommend that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc><pc dataRefEnd="id6" dataRefStart="id5" id="p2">element.</pc></target>
        </segment>
      </unit>
      <unit id="892">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You use the <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element to determine if the component is present on a system.</source>
          <target>You use the <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element to determine if the component is present on a system.</target>
        </segment>
      </unit>
      <unit id="893">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If all child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then the <ph dataRef="id5" id="ph5" />detect<ph dataRef="id6" id="ph6" /> element resolves to TRUE.</source>
          <target>If all child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then the <ph dataRef="id5" id="ph5" />detect<ph dataRef="id6" id="ph6" /> element resolves to TRUE.</target>
        </segment>
      </unit>
      <unit id="894">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If any child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then their parent <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> element resolves to FALSE.</source>
          <target>If any child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then their parent <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> element resolves to FALSE.</target>
        </segment>
      </unit>
      <unit id="895">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is no <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element section, then USMT will assume that the component is present.</source>
          <target>If there is no <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element section, then USMT will assume that the component is present.</target>
        </segment>
      </unit>
      <unit id="896">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />condition<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" /> elements, which will be logically joined by an OR operator.</source>
          <target>For each <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />condition<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" /> elements, which will be logically joined by an OR operator.</target>
        </segment>
      </unit>
      <unit id="897">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If at least one <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element evaluates to TRUE, then the <ph dataRef="id5" id="ph5" />detect<ph dataRef="id6" id="ph6" /> element evaluates to TRUE.</source>
          <target>If at least one <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element evaluates to TRUE, then the <ph dataRef="id5" id="ph5" />detect<ph dataRef="id6" id="ph6" /> element evaluates to TRUE.</target>
        </segment>
      </unit>
      <unit id="898">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="899">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">[</data>
          <data id="id6">](#namedelements)</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <ph dataRef="id3" id="ph1" />detects<ph dataRef="id4" id="ph2" />, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />namedElements<ph dataRef="id8" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <ph dataRef="id3" id="ph1" />detects<ph dataRef="id4" id="ph2" />, <pc dataRefEnd="id6" dataRefStart="id5" id="p2"><ph dataRef="id7" id="ph3" />namedElements<ph dataRef="id8" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="900">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#condition)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />condition<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />condition<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="901">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="902">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="903">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>detect name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</source>
          <target>detect name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</target>
        </segment>
      </unit>
      <unit id="904">
        <segment state="initial">
          <source>/detect</source>
          <target>/detect</target>
        </segment>
      </unit>
      <unit id="905">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="906">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="907">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="908">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="909">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Yes, when <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</source>
          <target>Yes, when <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</target>
        </segment>
      </unit>
      <unit id="910">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>No, when <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />detects</source>
          <target>No, when <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />detects</target>
        </segment>
      </unit>
      <unit id="911">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, any child elements are not processed.</source>
          <target>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, any child elements are not processed.</target>
        </segment>
      </unit>
      <unit id="912">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead, any other <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element are processed.</source>
          <target>Instead, any other <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element are processed.</target>
        </segment>
      </unit>
      <unit id="913">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="914">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="915">
        <segment state="initial">
          <source>(default = UserAndSystem)</source>
          <target>(default = UserAndSystem)</target>
        </segment>
      </unit>
      <unit id="916">
        <segment state="initial">
          <source>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="917">
        <segment state="initial">
          <source>The largest possible scope is set by the component element.</source>
          <target>The largest possible scope is set by the component element.</target>
        </segment>
      </unit>
      <unit id="918">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User, and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</source>
          <target>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User, and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</target>
        </segment>
      </unit>
      <unit id="919">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element were not there.</source>
          <target>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element were not there.</target>
        </segment>
      </unit>
      <unit id="920">
        <segment state="initial">
          <source>User.</source>
          <target>User.</target>
        </segment>
      </unit>
      <unit id="921">
        <segment state="initial">
          <source>Evaluates the variables for each user.</source>
          <target>Evaluates the variables for each user.</target>
        </segment>
      </unit>
      <unit id="922">
        <segment state="initial">
          <source>System.</source>
          <target>System.</target>
        </segment>
      </unit>
      <unit id="923">
        <segment state="initial">
          <source>Evaluates the variables only once for the system.</source>
          <target>Evaluates the variables only once for the system.</target>
        </segment>
      </unit>
      <unit id="924">
        <segment state="initial">
          <source>UserAndSystem.</source>
          <target>UserAndSystem.</target>
        </segment>
      </unit>
      <unit id="925">
        <segment state="initial">
          <source>Evaluates the variables for the entire operating system and each user.</source>
          <target>Evaluates the variables for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="926">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#detection)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For examples, see the examples for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc>.</source>
          <target>For examples, see the examples for <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc>.</target>
        </segment>
      </unit>
      <unit id="927">
        <segment state="initial">
          <source>detects</source>
          <target>detects</target>
        </segment>
      </unit>
      <unit id="928">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Although the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element is still supported, we recommend that you do not use it because it may be deprecated in future versions of USMT, which would require you to rewrite your scripts.</source>
          <target>Although the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element is still supported, we recommend that you do not use it because it may be deprecated in future versions of USMT, which would require you to rewrite your scripts.</target>
        </segment>
      </unit>
      <unit id="929">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#detection)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead, we recommend that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc> element if the parent element is <ph dataRef="id5" id="ph3" />role<ph dataRef="id6" id="ph4" /> or <ph dataRef="id7" id="ph5" />namedElements<ph dataRef="id8" id="ph6" />, and we recommend that you use the <ph dataRef="id9" id="ph7" />conditions<ph dataRef="id10" id="ph8" /> element if the parent element is <ph dataRef="id11" id="ph9" />rules<ph dataRef="id12" id="ph10" />.</source>
          <target>Instead, we recommend that you use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />detection<ph dataRef="id4" id="ph2" /></pc> element if the parent element is <ph dataRef="id5" id="ph3" />role<ph dataRef="id6" id="ph4" /> or <ph dataRef="id7" id="ph5" />namedElements<ph dataRef="id8" id="ph6" />, and we recommend that you use the <ph dataRef="id9" id="ph7" />conditions<ph dataRef="id10" id="ph8" /> element if the parent element is <ph dataRef="id11" id="ph9" />rules<ph dataRef="id12" id="ph10" />.</target>
        </segment>
      </unit>
      <unit id="930">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Using <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> allows you to more clearly formulate complex Boolean statements.</source>
          <target>Using <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> allows you to more clearly formulate complex Boolean statements.</target>
        </segment>
      </unit>
      <unit id="931">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element is a container for one or more <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>The <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element is a container for one or more <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="932">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If all of the child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then <ph dataRef="id5" id="ph5" />detects<ph dataRef="id6" id="ph6" /> resolves to TRUE.</source>
          <target>If all of the child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then <ph dataRef="id5" id="ph5" />detects<ph dataRef="id6" id="ph6" /> resolves to TRUE.</target>
        </segment>
      </unit>
      <unit id="933">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If any of the child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> resolves to FALSE.</source>
          <target>If any of the child <ph dataRef="id1" id="ph1" />detect<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> resolves to FALSE.</target>
        </segment>
      </unit>
      <unit id="934">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If you do not want to write the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements within a component, then you can create the <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> element under the <ph dataRef="id5" id="ph5" />namedElements<ph dataRef="id6" id="ph6" /> element, and then refer to it.</source>
          <target>If you do not want to write the <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements within a component, then you can create the <ph dataRef="id3" id="ph3" />detects<ph dataRef="id4" id="ph4" /> element under the <ph dataRef="id5" id="ph5" />namedElements<ph dataRef="id6" id="ph6" /> element, and then refer to it.</target>
        </segment>
      </unit>
      <unit id="935">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is no <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element section, then USMT will assume that the component is present.</source>
          <target>If there is no <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element section, then USMT will assume that the component is present.</target>
        </segment>
      </unit>
      <unit id="936">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The results from each <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element are joined together by the OR operator to form the rule used to detect the parent element.</source>
          <target>The results from each <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> element are joined together by the OR operator to form the rule used to detect the parent element.</target>
        </segment>
      </unit>
      <unit id="937">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="938">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>detects name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</source>
          <target>detects name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</target>
        </segment>
      </unit>
      <unit id="939">
        <segment state="initial">
          <source>/detects</source>
          <target>/detects</target>
        </segment>
      </unit>
      <unit id="940">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</target>
        </segment>
      </unit>
      <unit id="941">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#role)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#rules)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#namedelements)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="942">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <ph dataRef="id3" id="ph1" />detect</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <ph dataRef="id3" id="ph1" />detect</target>
        </segment>
      </unit>
      <unit id="943">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="944">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="945">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="946">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="947">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Yes, when <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</source>
          <target>Yes, when <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</target>
        </segment>
      </unit>
      <unit id="948">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>No, when <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />rules</source>
          <target>No, when <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />rules</target>
        </segment>
      </unit>
      <unit id="949">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, no child <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> elements are processed.</source>
          <target>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, no child <ph dataRef="id3" id="ph3" />detect<ph dataRef="id4" id="ph4" /> elements are processed.</target>
        </segment>
      </unit>
      <unit id="950">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead, any other <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element are processed.</source>
          <target>Instead, any other <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element are processed.</target>
        </segment>
      </unit>
      <unit id="951">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="952">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="953">
        <segment state="initial">
          <source>(default = UserAndSystem)</source>
          <target>(default = UserAndSystem)</target>
        </segment>
      </unit>
      <unit id="954">
        <segment state="initial">
          <source>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="955">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component element<ph dataRef="id2" id="ph2" />.</source>
          <target>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component element<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="956">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</source>
          <target>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</target>
        </segment>
      </unit>
      <unit id="957">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element were not there.</source>
          <target>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though the <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element were not there.</target>
        </segment>
      </unit>
      <unit id="958">
        <segment state="initial">
          <source>User.</source>
          <target>User.</target>
        </segment>
      </unit>
      <unit id="959">
        <segment state="initial">
          <source>Evaluates the variables for each user.</source>
          <target>Evaluates the variables for each user.</target>
        </segment>
      </unit>
      <unit id="960">
        <segment state="initial">
          <source>System.</source>
          <target>System.</target>
        </segment>
      </unit>
      <unit id="961">
        <segment state="initial">
          <source>Evaluates the variables only once for the system.</source>
          <target>Evaluates the variables only once for the system.</target>
        </segment>
      </unit>
      <unit id="962">
        <segment state="initial">
          <source>UserAndSystem.</source>
          <target>UserAndSystem.</target>
        </segment>
      </unit>
      <unit id="963">
        <segment state="initial">
          <source>Evaluates the variables for the entire operating system and each user.</source>
          <target>Evaluates the variables for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="964">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The context parameter is ignored for <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements that are inside <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>The context parameter is ignored for <ph dataRef="id1" id="ph1" />detects<ph dataRef="id2" id="ph2" /> elements that are inside <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="965">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file.</source>
          <target>The following example is from the MigApp.xml file.</target>
        </segment>
      </unit>
      <unit id="966">
        <segment state="initial">
          <source>detection</source>
          <target>detection</target>
        </segment>
      </unit>
      <unit id="967">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element is a container for one <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element.</source>
          <target>The <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element is a container for one <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="968">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The result of the child <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, located underneath the <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element, determines the result of this element.</source>
          <target>The result of the child <ph dataRef="id1" id="ph1" />condition<ph dataRef="id2" id="ph2" /> elements, located underneath the <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element, determines the result of this element.</target>
        </segment>
      </unit>
      <unit id="969">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if all of the child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements within the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then the <ph dataRef="id5" id="ph5" />detection<ph dataRef="id6" id="ph6" /> element resolves to TRUE.</source>
          <target>For example, if all of the child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements within the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element resolve to TRUE, then the <ph dataRef="id5" id="ph5" />detection<ph dataRef="id6" id="ph6" /> element resolves to TRUE.</target>
        </segment>
      </unit>
      <unit id="970">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If any of the child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element resolves to FALSE.</source>
          <target>If any of the child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements resolve to FALSE, then the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element resolves to FALSE.</target>
        </segment>
      </unit>
      <unit id="971">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>In addition, the results from each <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section within the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element are joined together by the OR operator to form the detection rule of the parent element.</source>
          <target>In addition, the results from each <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section within the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element are joined together by the OR operator to form the detection rule of the parent element.</target>
        </segment>
      </unit>
      <unit id="972">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>That is, if one of the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> sections resolves to TRUE, then the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element will be processed.</source>
          <target>That is, if one of the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> sections resolves to TRUE, then the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element will be processed.</target>
        </segment>
      </unit>
      <unit id="973">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Otherwise, the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element will not be processed.</source>
          <target>Otherwise, the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element will not be processed.</target>
        </segment>
      </unit>
      <unit id="974">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Use the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element under the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element if you do not want to write it within a component.</source>
          <target>Use the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element under the <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> element if you do not want to write it within a component.</target>
        </segment>
      </unit>
      <unit id="975">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Then include a matching <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section under the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element to control whether the component is migrated.</source>
          <target>Then include a matching <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section under the <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> element to control whether the component is migrated.</target>
        </segment>
      </unit>
      <unit id="976">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is not a <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section for a component, then USMT will assume that the component is present.</source>
          <target>If there is not a <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> section for a component, then USMT will assume that the component is present.</target>
        </segment>
      </unit>
      <unit id="977">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</target>
        </segment>
      </unit>
      <unit id="978">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#role)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#namedelements)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />namedElements<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />namedElements<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="979">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />conditions<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="980">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="981">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>detection name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</source>
          <target>detection name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</target>
        </segment>
      </unit>
      <unit id="982">
        <segment state="initial">
          <source>/detection</source>
          <target>/detection</target>
        </segment>
      </unit>
      <unit id="983">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="984">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="985">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="986">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="987">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Yes, when <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> is declared under <ph dataRef="id3" id="ph3" />namedElements</source>
          <target>Yes, when <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> is declared under <ph dataRef="id3" id="ph3" />namedElements</target>
        </segment>
      </unit>
      <unit id="988">
        <originalData>
          <data id="id1">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Optional, when declared under <ph dataRef="id1" id="ph1" />role</source>
          <target>Optional, when declared under <ph dataRef="id1" id="ph1" />role</target>
        </segment>
      </unit>
      <unit id="989">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If declared, the content of the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element is ignored and the content of the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element with the same name that is declared in the <ph dataRef="id5" id="ph5" />namedElements<ph dataRef="id6" id="ph6" /> element will be evaluated.</source>
          <target>If declared, the content of the <ph dataRef="id1" id="ph1" />detection<ph dataRef="id2" id="ph2" /> element is ignored and the content of the <ph dataRef="id3" id="ph3" />detection<ph dataRef="id4" id="ph4" /> element with the same name that is declared in the <ph dataRef="id5" id="ph5" />namedElements<ph dataRef="id6" id="ph6" /> element will be evaluated.</target>
        </segment>
      </unit>
      <unit id="990">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="991">
        <segment state="initial">
          <source>No, default = UserAndSystem</source>
          <target>No, default = UserAndSystem</target>
        </segment>
      </unit>
      <unit id="992">
        <segment state="initial">
          <source>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="993">
        <segment state="initial">
          <source>User.</source>
          <target>User.</target>
        </segment>
      </unit>
      <unit id="994">
        <segment state="initial">
          <source>Evaluates the component for each user.</source>
          <target>Evaluates the component for each user.</target>
        </segment>
      </unit>
      <unit id="995">
        <segment state="initial">
          <source>System.</source>
          <target>System.</target>
        </segment>
      </unit>
      <unit id="996">
        <segment state="initial">
          <source>Evaluates the component only once for the system.</source>
          <target>Evaluates the component only once for the system.</target>
        </segment>
      </unit>
      <unit id="997">
        <segment state="initial">
          <source>UserAndSystem.</source>
          <target>UserAndSystem.</target>
        </segment>
      </unit>
      <unit id="998">
        <segment state="initial">
          <source>Evaluates the component for the entire operating system and each user.</source>
          <target>Evaluates the component for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="999">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1000">
        <segment state="initial">
          <source>and</source>
          <target>and</target>
        </segment>
      </unit>
      <unit id="1001">
        <segment state="initial">
          <source>displayName</source>
          <target>displayName</target>
        </segment>
      </unit>
      <unit id="1002">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />displayName<ph dataRef="id2" id="ph2" /> element is a required field within each <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</source>
          <target>The <ph dataRef="id1" id="ph1" />displayName<ph dataRef="id2" id="ph2" /> element is a required field within each <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1003">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each component</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each component</target>
        </segment>
      </unit>
      <unit id="1004">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1005">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1006">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1007">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>displayName <ph dataRef="id1" id="ph1" />locID="<pc dataRefEnd="id3" dataRefStart="id2" id="p1">ID</pc>"<ph dataRef="id4" id="ph2" /><pc dataRefEnd="id6" dataRefStart="id5" id="p2">ComponentName</pc><ph dataRef="id7" id="ph3" />/displayName</source>
          <target>displayName <ph dataRef="id1" id="ph1" />locID="<pc dataRefEnd="id3" dataRefStart="id2" id="p1">ID</pc>"<ph dataRef="id4" id="ph2" /><pc dataRefEnd="id6" dataRefStart="id5" id="p2">ComponentName</pc><ph dataRef="id7" id="ph3" />/displayName</target>
        </segment>
      </unit>
      <unit id="1008">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1009">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1010">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1011">
        <segment state="initial">
          <source>locID</source>
          <target>locID</target>
        </segment>
      </unit>
      <unit id="1012">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="1013">
        <segment state="initial">
          <source>This parameter is for internal USMT use.</source>
          <target>This parameter is for internal USMT use.</target>
        </segment>
      </unit>
      <unit id="1014">
        <segment state="initial">
          <source>Do not use this parameter.</source>
          <target>Do not use this parameter.</target>
        </segment>
      </unit>
      <unit id="1015">
        <segment state="initial">
          <source>ComponentName</source>
          <target>ComponentName</target>
        </segment>
      </unit>
      <unit id="1016">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1017">
        <segment state="initial">
          <source>The name for the component.</source>
          <target>The name for the component.</target>
        </segment>
      </unit>
      <unit id="1018">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1019">
        <segment state="initial">
          <source>environment</source>
          <target>environment</target>
        </segment>
      </unit>
      <unit id="1020">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> element is a container for <ph dataRef="id3" id="ph3" />variable<ph dataRef="id4" id="ph4" /> elements in which you can define variables to use in your .xml file.</source>
          <target>The <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> element is a container for <ph dataRef="id3" id="ph3" />variable<ph dataRef="id4" id="ph4" /> elements in which you can define variables to use in your .xml file.</target>
        </segment>
      </unit>
      <unit id="1021">
        <segment state="initial">
          <source>All environment variables defined this way will be private.</source>
          <target>All environment variables defined this way will be private.</target>
        </segment>
      </unit>
      <unit id="1022">
        <segment state="initial">
          <source>That is, they will be available only for their child components and the component in which they were defined.</source>
          <target>That is, they will be available only for their child components and the component in which they were defined.</target>
        </segment>
      </unit>
      <unit id="1023">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#envex)</data>
        </originalData>
        <segment state="initial">
          <source>For two example scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Examples</pc>.</source>
          <target>For two example scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Examples</pc>.</target>
        </segment>
      </unit>
      <unit id="1024">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="1025">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#role)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#component)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#namedelements)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />component<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />component<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="1026">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#variable)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1027">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#conditions)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">conditions</pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">conditions</pc>
          </target>
        </segment>
      </unit>
      <unit id="1028">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1029">
        <segment state="initial">
          <source>environment name="ID" context="User|System|UserAndSystem"</source>
          <target>environment name="ID" context="User|System|UserAndSystem"</target>
        </segment>
      </unit>
      <unit id="1030">
        <segment state="initial">
          <source>/environment</source>
          <target>/environment</target>
        </segment>
      </unit>
      <unit id="1031">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1032">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1033">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1034">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="1035">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Yes, when <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> is a child of <ph dataRef="id3" id="ph3" />namedElements</source>
          <target>Yes, when <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> is a child of <ph dataRef="id3" id="ph3" />namedElements</target>
        </segment>
      </unit>
      <unit id="1036">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>No, when <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> is a child of <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />component</source>
          <target>No, when <ph dataRef="id1" id="ph1" />environment<ph dataRef="id2" id="ph2" /> is a child of <ph dataRef="id3" id="ph3" />role<ph dataRef="id4" id="ph4" /> or <ph dataRef="id5" id="ph5" />component</target>
        </segment>
      </unit>
      <unit id="1037">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&lt;em&gt;</data>
          <data id="id6">&lt;/em&gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">&amp;lt;</data>
          <data id="id12">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When declared as a child of the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> elements, if <ph dataRef="id5" id="ph5" />ID<ph dataRef="id6" id="ph6" /> is declared, USMT ignores the content of the <ph dataRef="id7" id="ph7" />environment<ph dataRef="id8" id="ph8" /> element and the content of the <ph dataRef="id9" id="ph9" />environment<ph dataRef="id10" id="ph10" /> element with the same name declared in the <ph dataRef="id11" id="ph11" />namedElements<ph dataRef="id12" id="ph12" /> element is processed.</source>
          <target>When declared as a child of the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> elements, if <ph dataRef="id5" id="ph5" />ID<ph dataRef="id6" id="ph6" /> is declared, USMT ignores the content of the <ph dataRef="id7" id="ph7" />environment<ph dataRef="id8" id="ph8" /> element and the content of the <ph dataRef="id9" id="ph9" />environment<ph dataRef="id10" id="ph10" /> element with the same name declared in the <ph dataRef="id11" id="ph11" />namedElements<ph dataRef="id12" id="ph12" /> element is processed.</target>
        </segment>
      </unit>
      <unit id="1038">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="1039">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="1040">
        <segment state="initial">
          <source>(default = UserAndSystem)</source>
          <target>(default = UserAndSystem)</target>
        </segment>
      </unit>
      <unit id="1041">
        <segment state="initial">
          <source>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter: whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="1042">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element.</source>
          <target>The largest possible scope is set by the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="1043">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</source>
          <target>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it had a context of User.</target>
        </segment>
      </unit>
      <unit id="1044">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> were not there.</source>
          <target>If the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element had a context of System, it would act as though <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> were not there.</target>
        </segment>
      </unit>
      <unit id="1045">
        <segment state="initial">
          <source>User.</source>
          <target>User.</target>
        </segment>
      </unit>
      <unit id="1046">
        <segment state="initial">
          <source>Evaluates the variables for each user.</source>
          <target>Evaluates the variables for each user.</target>
        </segment>
      </unit>
      <unit id="1047">
        <segment state="initial">
          <source>System.</source>
          <target>System.</target>
        </segment>
      </unit>
      <unit id="1048">
        <segment state="initial">
          <source>Evaluates the variables only once for the system.</source>
          <target>Evaluates the variables only once for the system.</target>
        </segment>
      </unit>
      <unit id="1049">
        <segment state="initial">
          <source>UserAndSystem.</source>
          <target>UserAndSystem.</target>
        </segment>
      </unit>
      <unit id="1050">
        <segment state="initial">
          <source>Evaluates the variables for the entire operating system and each user.</source>
          <target>Evaluates the variables for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="1051">
        <segment state="initial">
          <source>Example scenario 1</source>
          <target>Example scenario 1</target>
        </segment>
      </unit>
      <unit id="1052">
        <segment state="initial">
          <source>In this scenario, you want to generate the location of objects at run time depending on the configuration of the destination computer.</source>
          <target>In this scenario, you want to generate the location of objects at run time depending on the configuration of the destination computer.</target>
        </segment>
      </unit>
      <unit id="1053">
        <segment state="initial">
          <source>For example, you must do this if an application writes data in the directory where it is installed, and users can install the application anywhere on the computer.</source>
          <target>For example, you must do this if an application writes data in the directory where it is installed, and users can install the application anywhere on the computer.</target>
        </segment>
      </unit>
      <unit id="1054">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\[</data>
          <data id="id5">\]</data>
        </originalData>
        <segment state="initial">
          <source>If the application writes a registry value hklm<ph dataRef="id1" id="ph1" />software<ph dataRef="id2" id="ph2" />companyname<ph dataRef="id3" id="ph3" />install <ph dataRef="id4" id="ph4" />path<ph dataRef="id5" id="ph5" /> and then updates this value with the location where the application is installed, then the only way for you to migrate the required data correctly is to define an environment variable.</source>
          <target>If the application writes a registry value hklm<ph dataRef="id1" id="ph1" />software<ph dataRef="id2" id="ph2" />companyname<ph dataRef="id3" id="ph3" />install <ph dataRef="id4" id="ph4" />path<ph dataRef="id5" id="ph5" /> and then updates this value with the location where the application is installed, then the only way for you to migrate the required data correctly is to define an environment variable.</target>
        </segment>
      </unit>
      <unit id="1055">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1056">
        <segment state="initial">
          <source>Then you can use an include rule as follows.</source>
          <target>Then you can use an include rule as follows.</target>
        </segment>
      </unit>
      <unit id="1057">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#scriptfunctions)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use any of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> functions</pc> to perform similar tasks.</source>
          <target>You can use any of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> functions</pc> to perform similar tasks.</target>
        </segment>
      </unit>
      <unit id="1058">
        <segment state="initial">
          <source>Second, you can also filter registry values that contain data that you need.</source>
          <target>Second, you can also filter registry values that contain data that you need.</target>
        </segment>
      </unit>
      <unit id="1059">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\[</data>
          <data id="id6">\]</data>
        </originalData>
        <segment state="initial">
          <source>The following example extracts the first string (before the separator ",") in the value of the registry Hklm<ph dataRef="id1" id="ph1" />software<ph dataRef="id2" id="ph2" />companyname<ph dataRef="id3" id="ph3" />application<ph dataRef="id4" id="ph4" /><ph dataRef="id5" id="ph5" />Path<ph dataRef="id6" id="ph6" />.</source>
          <target>The following example extracts the first string (before the separator ",") in the value of the registry Hklm<ph dataRef="id1" id="ph1" />software<ph dataRef="id2" id="ph2" />companyname<ph dataRef="id3" id="ph3" />application<ph dataRef="id4" id="ph4" /><ph dataRef="id5" id="ph5" />Path<ph dataRef="id6" id="ph6" />.</target>
        </segment>
      </unit>
      <unit id="1060">
        <segment state="initial">
          <source>Example scenario 2:</source>
          <target>Example scenario 2:</target>
        </segment>
      </unit>
      <unit id="1061">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>In this scenario, you want to migrate five files named File1.txt, File2.txt, and so on, from %SYSTEMDRIVE%<ph dataRef="id1" id="ph1" />data<ph dataRef="id2" id="ph2" />userdata<ph dataRef="id3" id="ph3" />dir1<ph dataRef="id4" id="ph4" />dir2<ph dataRef="id5" id="ph5" />.</source>
          <target>In this scenario, you want to migrate five files named File1.txt, File2.txt, and so on, from %SYSTEMDRIVE%<ph dataRef="id1" id="ph1" />data<ph dataRef="id2" id="ph2" />userdata<ph dataRef="id3" id="ph3" />dir1<ph dataRef="id4" id="ph4" />dir2<ph dataRef="id5" id="ph5" />.</target>
        </segment>
      </unit>
      <unit id="1062">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>To do this you must have the following <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in an .xml file:</source>
          <target>To do this you must have the following <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule in an .xml file:</target>
        </segment>
      </unit>
      <unit id="1063">
        <segment state="initial">
          <source>Instead of typing the path five times, you can create a variable for the location as follows:</source>
          <target>Instead of typing the path five times, you can create a variable for the location as follows:</target>
        </segment>
      </unit>
      <unit id="1064">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Then, you can specify the variable in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule as follows:</source>
          <target>Then, you can specify the variable in an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule as follows:</target>
        </segment>
      </unit>
      <unit id="1065">
        <segment state="initial">
          <source>exclude</source>
          <target>exclude</target>
        </segment>
      </unit>
      <unit id="1066">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element determines what objects will not be migrated, unless there is a more specific <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> element that migrates an object.</source>
          <target>The <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element determines what objects will not be migrated, unless there is a more specific <ph dataRef="id3" id="ph3" />include<ph dataRef="id4" id="ph4" /> element that migrates an object.</target>
        </segment>
      </unit>
      <unit id="1067">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there is an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> element for the same object, the object will be included.</source>
          <target>If there is an <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />exclude<ph dataRef="id4" id="ph4" /> element for the same object, the object will be included.</target>
        </segment>
      </unit>
      <unit id="1068">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>For each <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1069">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1070">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1071">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1072">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#persistfilterfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />exclude<ph dataRef="id6" id="ph2" /> filter functions</pc> with this element: CompareStringContent, IgnoreIrrelevantLinks, AnswerNo, NeverRestore, and SameRegContent.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />exclude<ph dataRef="id6" id="ph2" /> filter functions</pc> with this element: CompareStringContent, IgnoreIrrelevantLinks, AnswerNo, NeverRestore, and SameRegContent.</target>
        </segment>
      </unit>
      <unit id="1073">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1074">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>exclude filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>exclude filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="1075">
        <segment state="initial">
          <source>/exclude</source>
          <target>/exclude</target>
        </segment>
      </unit>
      <unit id="1076">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1077">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1078">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1079">
        <segment state="initial">
          <source>filter</source>
          <target>filter</target>
        </segment>
      </unit>
      <unit id="1080">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="1081">
        <segment state="initial">
          <source>(default = No)</source>
          <target>(default = No)</target>
        </segment>
      </unit>
      <unit id="1082">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="1083">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="1084">
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the include rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the include rule.</target>
        </segment>
      </unit>
      <unit id="1085">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1086">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="1087">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1088">
        <segment state="initial">
          <source>For example, from the MigUser.xml file:</source>
          <target>For example, from the MigUser.xml file:</target>
        </segment>
      </unit>
      <unit id="1089">
        <segment state="initial">
          <source>excludeAttributes</source>
          <target>excludeAttributes</target>
        </segment>
      </unit>
      <unit id="1090">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />excludeAttributes<ph dataRef="id2" id="ph2" /> element to determine which parameters associated with an object will not be migrated.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />excludeAttributes<ph dataRef="id2" id="ph2" /> element to determine which parameters associated with an object will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1091">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there are conflicts between the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> elements, the most specific pattern determines the patterns that will not be migrated.</source>
          <target>If there are conflicts between the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> elements, the most specific pattern determines the patterns that will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1092">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If an object does not have an <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> element, then all of its parameters will be migrated.</source>
          <target>If an object does not have an <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> element, then all of its parameters will be migrated.</target>
        </segment>
      </unit>
      <unit id="1093">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1094">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1095">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1096">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1097">
        <segment state="initial">
          <source>excludeAttributes attributes="Security|TimeFields|Security,TimeFields"</source>
          <target>excludeAttributes attributes="Security|TimeFields|Security,TimeFields"</target>
        </segment>
      </unit>
      <unit id="1098">
        <segment state="initial">
          <source>/excludeAttributes</source>
          <target>/excludeAttributes</target>
        </segment>
      </unit>
      <unit id="1099">
        <segment state="initial">
          <source>Parameter</source>
          <target>Parameter</target>
        </segment>
      </unit>
      <unit id="1100">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1101">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1102">
        <segment state="initial">
          <source>attributes</source>
          <target>attributes</target>
        </segment>
      </unit>
      <unit id="1103">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1104">
        <segment state="initial">
          <source>Specifies the attributes to be excluded.</source>
          <target>Specifies the attributes to be excluded.</target>
        </segment>
      </unit>
      <unit id="1105">
        <originalData>
          <data id="id1">&lt;code&gt;&amp;quot;Security&amp;quot;,&amp;quot;TimeFields&amp;quot;&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can specify one of the following, or both separated by quotes; for example, <ph dataRef="id1" id="ph1" />:</source>
          <target>You can specify one of the following, or both separated by quotes; for example, <ph dataRef="id1" id="ph1" />:</target>
        </segment>
      </unit>
      <unit id="1106">
        <segment state="initial">
          <source>Security can be one of Owner, Group, DACL, or SACL.</source>
          <target>Security can be one of Owner, Group, DACL, or SACL.</target>
        </segment>
      </unit>
      <unit id="1107">
        <segment state="initial">
          <source>TimeFields can be one of CreationTime, LastAccessTime and LastWrittenTime</source>
          <target>TimeFields can be one of CreationTime, LastAccessTime and LastWrittenTime</target>
        </segment>
      </unit>
      <unit id="1108">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1109">
        <segment state="initial">
          <source>extensions</source>
          <target>extensions</target>
        </segment>
      </unit>
      <unit id="1110">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />extensions<ph dataRef="id2" id="ph2" /> element is a container for one or more <ph dataRef="id3" id="ph3" />extension<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>The <ph dataRef="id1" id="ph1" />extensions<ph dataRef="id2" id="ph2" /> element is a container for one or more <ph dataRef="id3" id="ph3" />extension<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</target>
        </segment>
      </unit>
      <unit id="1112">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1113">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#extension)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />extension<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />extension<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1114">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1115">
        <segment state="initial">
          <source>extensions</source>
          <target>extensions</target>
        </segment>
      </unit>
      <unit id="1116">
        <segment state="initial">
          <source>/extensions</source>
          <target>/extensions</target>
        </segment>
      </unit>
      <unit id="1117">
        <segment state="initial">
          <source>extension</source>
          <target>extension</target>
        </segment>
      </unit>
      <unit id="1118">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />extension<ph dataRef="id2" id="ph2" /> element to specify documents of a specific extension.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />extension<ph dataRef="id2" id="ph2" /> element to specify documents of a specific extension.</target>
        </segment>
      </unit>
      <unit id="1119">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="1120">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#extensions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />extensions<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />extensions<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1121">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1122">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1123">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>extension<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">FilenameExtension</pc><ph dataRef="id4" id="ph2" />/extension</source>
          <target>extension<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">FilenameExtension</pc><ph dataRef="id4" id="ph2" />/extension</target>
        </segment>
      </unit>
      <unit id="1124">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1125">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1126">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1127">
        <segment state="initial">
          <source>FilenameExtension</source>
          <target>FilenameExtension</target>
        </segment>
      </unit>
      <unit id="1128">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1129">
        <segment state="initial">
          <source>A file name extension.</source>
          <target>A file name extension.</target>
        </segment>
      </unit>
      <unit id="1130">
        <originalData>
          <data id="id1">\*</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you want to migrate all <ph dataRef="id1" id="ph1" />.doc files from the source computer, specifying the following code under the <ph dataRef="id2" id="ph2" />component<ph dataRef="id3" id="ph3" /> element:</source>
          <target>For example, if you want to migrate all <ph dataRef="id1" id="ph1" />.doc files from the source computer, specifying the following code under the <ph dataRef="id2" id="ph2" />component<ph dataRef="id3" id="ph3" /> element:</target>
        </segment>
      </unit>
      <unit id="1131">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>is the same as specifying the following code below the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element:</source>
          <target>is the same as specifying the following code below the <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element:</target>
        </segment>
      </unit>
      <unit id="1132">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">[</data>
          <data id="id4">](#excludeattributes)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For another example of how to use the <ph dataRef="id1" id="ph1" />extension<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</source>
          <target>For another example of how to use the <ph dataRef="id1" id="ph1" />extension<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</target>
        </segment>
      </unit>
      <unit id="1133">
        <segment state="initial">
          <source>externalProcess</source>
          <target>externalProcess</target>
        </segment>
      </unit>
      <unit id="1134">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />externalProcess<ph dataRef="id2" id="ph2" /> element to run a command line during the migration process.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />externalProcess<ph dataRef="id2" id="ph2" /> element to run a command line during the migration process.</target>
        </segment>
      </unit>
      <unit id="1135">
        <segment state="initial">
          <source>For example, you may want to run a command after the LoadState process completes.</source>
          <target>For example, you may want to run a command after the LoadState process completes.</target>
        </segment>
      </unit>
      <unit id="1136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1137">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1138">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#commandline)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />commandLine<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />commandLine<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1139">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1140">
        <segment state="initial">
          <source>externalProcess when="pre-scan|scan-success|post-scan|pre-apply|apply-success|post-apply"</source>
          <target>externalProcess when="pre-scan|scan-success|post-scan|pre-apply|apply-success|post-apply"</target>
        </segment>
      </unit>
      <unit id="1141">
        <segment state="initial">
          <source>/externalProcess</source>
          <target>/externalProcess</target>
        </segment>
      </unit>
      <unit id="1142">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1143">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1144">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1145">
        <segment state="initial">
          <source>when</source>
          <target>when</target>
        </segment>
      </unit>
      <unit id="1146">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1147">
        <segment state="initial">
          <source>Indicates when the command line should be run.</source>
          <target>Indicates when the command line should be run.</target>
        </segment>
      </unit>
      <unit id="1148">
        <segment state="initial">
          <source>This value can be one of the following:</source>
          <target>This value can be one of the following:</target>
        </segment>
      </unit>
      <unit id="1149">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pre-scan<ph dataRef="id1" id="ph1" /> before the scanning process begins.</source>
          <target>pre-scan<ph dataRef="id1" id="ph1" /> before the scanning process begins.</target>
        </segment>
      </unit>
      <unit id="1150">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>scan-success<ph dataRef="id1" id="ph1" /> after the scanning process has finished successfully.</source>
          <target>scan-success<ph dataRef="id1" id="ph1" /> after the scanning process has finished successfully.</target>
        </segment>
      </unit>
      <unit id="1151">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>post-scan<ph dataRef="id1" id="ph1" /> after the scanning process has finished, whether it was successful or not.</source>
          <target>post-scan<ph dataRef="id1" id="ph1" /> after the scanning process has finished, whether it was successful or not.</target>
        </segment>
      </unit>
      <unit id="1152">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pre-apply<ph dataRef="id1" id="ph1" /> before the apply process begins.</source>
          <target>pre-apply<ph dataRef="id1" id="ph1" /> before the apply process begins.</target>
        </segment>
      </unit>
      <unit id="1153">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>apply-success<ph dataRef="id1" id="ph1" /> after the apply process has finished successfully.</source>
          <target>apply-success<ph dataRef="id1" id="ph1" /> after the apply process has finished successfully.</target>
        </segment>
      </unit>
      <unit id="1154">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>post-apply<ph dataRef="id1" id="ph1" /> after the apply process has finished, whether it was successful or not.</source>
          <target>post-apply<ph dataRef="id1" id="ph1" /> after the apply process has finished, whether it was successful or not.</target>
        </segment>
      </unit>
      <unit id="1155">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">[</data>
          <data id="id4">](#excludeattributes)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For an example of how to use the <ph dataRef="id1" id="ph1" />externalProcess<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</source>
          <target>For an example of how to use the <ph dataRef="id1" id="ph1" />externalProcess<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</target>
        </segment>
      </unit>
      <unit id="1156">
        <segment state="initial">
          <source>icon</source>
          <target>icon</target>
        </segment>
      </unit>
      <unit id="1157">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1158">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1159">
        <segment state="initial">
          <source>include</source>
          <target>include</target>
        </segment>
      </unit>
      <unit id="1160">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">[</data>
          <data id="id4">](#exclude)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element determines what to migrate, unless there is a more specific <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />exclude<ph dataRef="id6" id="ph4" /></pc> rule.</source>
          <target>The <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element determines what to migrate, unless there is a more specific <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />exclude<ph dataRef="id6" id="ph4" /></pc> rule.</target>
        </segment>
      </unit>
      <unit id="1161">
        <segment state="initial">
          <source>You can specify a script to be more specific to extend the definition of what you want to collect.</source>
          <target>You can specify a script to be more specific to extend the definition of what you want to collect.</target>
        </segment>
      </unit>
      <unit id="1162">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>For each <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element there can be multiple <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1163">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1165">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1166">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#persistfilterfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />include<ph dataRef="id6" id="ph2" /> filter functions</pc> with this element: CompareStringContent, IgnoreIrrelevantLinks, AnswerNo, and NeverRestore.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />include<ph dataRef="id6" id="ph2" /> filter functions</pc> with this element: CompareStringContent, IgnoreIrrelevantLinks, AnswerNo, and NeverRestore.</target>
        </segment>
      </unit>
      <unit id="1167">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1168">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>include filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>include filter="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="1169">
        <segment state="initial">
          <source>/include</source>
          <target>/include</target>
        </segment>
      </unit>
      <unit id="1170">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1171">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1172">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1173">
        <segment state="initial">
          <source>filter</source>
          <target>filter</target>
        </segment>
      </unit>
      <unit id="1174">
        <segment state="initial">
          <source>No.</source>
          <target>No.</target>
        </segment>
      </unit>
      <unit id="1175">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If this parameter is not specified, then all patterns that are inside the child <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element will be processed.</source>
          <target>If this parameter is not specified, then all patterns that are inside the child <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element will be processed.</target>
        </segment>
      </unit>
      <unit id="1176">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="1177">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="1178">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="1179">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1180">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="1181">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1182">
        <segment state="initial">
          <source>The following example is from the MigUser.xml file:</source>
          <target>The following example is from the MigUser.xml file:</target>
        </segment>
      </unit>
      <unit id="1183">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">&amp;lt;</data>
          <data id="id3">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> filter functions</source>
          <target>include<ph dataRef="id1" id="ph1" /> and <ph dataRef="id2" id="ph2" />exclude<ph dataRef="id3" id="ph3" /> filter functions</target>
        </segment>
      </unit>
      <unit id="1184">
        <segment state="initial">
          <source>The following functions return a Boolean value.</source>
          <target>The following functions return a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1185">
        <segment state="initial">
          <source>You can use them to migrate certain objects based on when certain conditions are met.</source>
          <target>You can use them to migrate certain objects based on when certain conditions are met.</target>
        </segment>
      </unit>
      <unit id="1186">
        <segment state="initial">
          <source>AnswerNo</source>
          <target>AnswerNo</target>
        </segment>
      </unit>
      <unit id="1187">
        <segment state="initial">
          <source>This filter always returns FALSE.</source>
          <target>This filter always returns FALSE.</target>
        </segment>
      </unit>
      <unit id="1188">
        <segment state="initial">
          <source>Syntax: AnswerNo ()</source>
          <target>Syntax: AnswerNo ()</target>
        </segment>
      </unit>
      <unit id="1189">
        <segment state="initial">
          <source>CompareStringContent</source>
          <target>CompareStringContent</target>
        </segment>
      </unit>
      <unit id="1190">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: CompareStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringContent</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CompareType</pc>")</source>
          <target>Syntax: CompareStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">StringContent</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">CompareType</pc>")</target>
        </segment>
      </unit>
      <unit id="1191">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1192">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1193">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1194">
        <segment state="initial">
          <source>StringContent</source>
          <target>StringContent</target>
        </segment>
      </unit>
      <unit id="1195">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1196">
        <segment state="initial">
          <source>The string to check against.</source>
          <target>The string to check against.</target>
        </segment>
      </unit>
      <unit id="1197">
        <segment state="initial">
          <source>CompareType</source>
          <target>CompareType</target>
        </segment>
      </unit>
      <unit id="1198">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1199">
        <segment state="initial">
          <source>A string.</source>
          <target>A string.</target>
        </segment>
      </unit>
      <unit id="1200">
        <segment state="initial">
          <source>Use one of the following values:</source>
          <target>Use one of the following values:</target>
        </segment>
      </unit>
      <unit id="1201">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Equal<ph dataRef="id1" id="ph1" /> (case insensitive).</source>
          <target>Equal<ph dataRef="id1" id="ph1" /> (case insensitive).</target>
        </segment>
      </unit>
      <unit id="1202">
        <originalData>
          <data id="id1">&lt;code&gt;StringContent&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The function returns TRUE if the string representation of the current object that is processed by the migration engine is identical to <ph dataRef="id1" id="ph1" />.</source>
          <target>The function returns TRUE if the string representation of the current object that is processed by the migration engine is identical to <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="1203">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
          <data id="id2">&lt;strong&gt;</data>
          <data id="id3">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>NULL<ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" />or any other value<ph dataRef="id3" id="ph3" />.</source>
          <target>NULL<ph dataRef="id1" id="ph1" /><ph dataRef="id2" id="ph2" />or any other value<ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="1204">
        <originalData>
          <data id="id1">&lt;code&gt;StringContent&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The function returns TRUE if the string representation of the current object that is processed by the migration engine does not match <ph dataRef="id1" id="ph1" />.</source>
          <target>The function returns TRUE if the string representation of the current object that is processed by the migration engine does not match <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="1205">
        <segment state="initial">
          <source>IgnoreIrrelevantLinks</source>
          <target>IgnoreIrrelevantLinks</target>
        </segment>
      </unit>
      <unit id="1206">
        <segment state="initial">
          <source>This filter screens out the .lnk files that point to an object that is not valid on the destination computer.</source>
          <target>This filter screens out the .lnk files that point to an object that is not valid on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1207">
        <segment state="initial">
          <source>Note that the screening takes place on the destination computer, so all .lnk files will be saved to the store during ScanState.</source>
          <target>Note that the screening takes place on the destination computer, so all .lnk files will be saved to the store during ScanState.</target>
        </segment>
      </unit>
      <unit id="1208">
        <segment state="initial">
          <source>Then they will be screened out when you run the LoadState tool.</source>
          <target>Then they will be screened out when you run the LoadState tool.</target>
        </segment>
      </unit>
      <unit id="1209">
        <segment state="initial">
          <source>Syntax: IgnoreIrrelevantLinks ()</source>
          <target>Syntax: IgnoreIrrelevantLinks ()</target>
        </segment>
      </unit>
      <unit id="1210">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1211">
        <segment state="initial">
          <source>NeverRestore</source>
          <target>NeverRestore</target>
        </segment>
      </unit>
      <unit id="1212">
        <segment state="initial">
          <source>You can use this function to collect the specified objects from the source computer but then not migrate the objects to the destination computer.</source>
          <target>You can use this function to collect the specified objects from the source computer but then not migrate the objects to the destination computer.</target>
        </segment>
      </unit>
      <unit id="1213">
        <segment state="initial">
          <source>When run with the ScanState tool, this function evaluates to TRUE.</source>
          <target>When run with the ScanState tool, this function evaluates to TRUE.</target>
        </segment>
      </unit>
      <unit id="1214">
        <segment state="initial">
          <source>When run with the LoadState tool, this function evaluates to FALSE.</source>
          <target>When run with the LoadState tool, this function evaluates to FALSE.</target>
        </segment>
      </unit>
      <unit id="1215">
        <segment state="initial">
          <source>You may want to use this function when you want to check an object's value on the destination computer but do not intend to migrate the object to the destination.</source>
          <target>You may want to use this function when you want to check an object's value on the destination computer but do not intend to migrate the object to the destination.</target>
        </segment>
      </unit>
      <unit id="1216">
        <segment state="initial">
          <source>Syntax: NeverRestore()</source>
          <target>Syntax: NeverRestore()</target>
        </segment>
      </unit>
      <unit id="1217">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\[</data>
          <data id="id4">\]</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, HKCU<ph dataRef="id1" id="ph1" />Control Panel<ph dataRef="id2" id="ph2" />International <ph dataRef="id3" id="ph3" />Locale<ph dataRef="id4" id="ph4" /> will be included in the store, but it will not be migrated to the destination computer:</source>
          <target>In the following example, HKCU<ph dataRef="id1" id="ph1" />Control Panel<ph dataRef="id2" id="ph2" />International <ph dataRef="id3" id="ph3" />Locale<ph dataRef="id4" id="ph4" /> will be included in the store, but it will not be migrated to the destination computer:</target>
        </segment>
      </unit>
      <unit id="1218">
        <segment state="initial">
          <source>includeAttributes</source>
          <target>includeAttributes</target>
        </segment>
      </unit>
      <unit id="1219">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> element to determine whether certain parameters associated with an object will be migrated along with the object itself.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> element to determine whether certain parameters associated with an object will be migrated along with the object itself.</target>
        </segment>
      </unit>
      <unit id="1220">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If there are conflicts between the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> elements, the most specific pattern will determine which parameters will be migrated.</source>
          <target>If there are conflicts between the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> and <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> elements, the most specific pattern will determine which parameters will be migrated.</target>
        </segment>
      </unit>
      <unit id="1221">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If an object does not have an <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> element, then all of its parameters will be migrated.</source>
          <target>If an object does not have an <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />excludeAttributes<ph dataRef="id4" id="ph4" /> element, then all of its parameters will be migrated.</target>
        </segment>
      </unit>
      <unit id="1222">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="1223">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1224">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1225">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1226">
        <segment state="initial">
          <source>includeAttributes attributes="Security|TimeFields|Security,TimeFields"</source>
          <target>includeAttributes attributes="Security|TimeFields|Security,TimeFields"</target>
        </segment>
      </unit>
      <unit id="1227">
        <segment state="initial">
          <source>/includeAttributes</source>
          <target>/includeAttributes</target>
        </segment>
      </unit>
      <unit id="1228">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1229">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1230">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1231">
        <segment state="initial">
          <source>attributes</source>
          <target>attributes</target>
        </segment>
      </unit>
      <unit id="1232">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1233">
        <segment state="initial">
          <source>Specifies the attributes to be included with a migrated object.</source>
          <target>Specifies the attributes to be included with a migrated object.</target>
        </segment>
      </unit>
      <unit id="1234">
        <originalData>
          <data id="id1">&lt;code&gt;&amp;quot;Security&amp;quot;,&amp;quot;TimeFields&amp;quot;&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can specify one of the following, or both separated by quotes; for example, <ph dataRef="id1" id="ph1" />:</source>
          <target>You can specify one of the following, or both separated by quotes; for example, <ph dataRef="id1" id="ph1" />:</target>
        </segment>
      </unit>
      <unit id="1235">
        <segment state="initial">
          <source>Security can be one of the following values:</source>
          <target>Security can be one of the following values:</target>
        </segment>
      </unit>
      <unit id="1236">
        <segment state="initial">
          <source>Owner.</source>
          <target>Owner.</target>
        </segment>
      </unit>
      <unit id="1237">
        <segment state="initial">
          <source>The owner of the object (SID).</source>
          <target>The owner of the object (SID).</target>
        </segment>
      </unit>
      <unit id="1238">
        <segment state="initial">
          <source>Group.</source>
          <target>Group.</target>
        </segment>
      </unit>
      <unit id="1239">
        <segment state="initial">
          <source>The primary group for the object (SID).</source>
          <target>The primary group for the object (SID).</target>
        </segment>
      </unit>
      <unit id="1240">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>DACL<ph dataRef="id1" id="ph1" /> (discretionary access control list).</source>
          <target>DACL<ph dataRef="id1" id="ph1" /> (discretionary access control list).</target>
        </segment>
      </unit>
      <unit id="1241">
        <segment state="initial">
          <source>An access control list that is controlled by the owner of an object and that specifies the access particular users or groups can have to the object.</source>
          <target>An access control list that is controlled by the owner of an object and that specifies the access particular users or groups can have to the object.</target>
        </segment>
      </unit>
      <unit id="1242">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>SACL<ph dataRef="id1" id="ph1" /> (system access control list).</source>
          <target>SACL<ph dataRef="id1" id="ph1" /> (system access control list).</target>
        </segment>
      </unit>
      <unit id="1243">
        <segment state="initial">
          <source>An ACL that controls the generation of audit messages for attempts to access a securable object.</source>
          <target>An ACL that controls the generation of audit messages for attempts to access a securable object.</target>
        </segment>
      </unit>
      <unit id="1244">
        <segment state="initial">
          <source>The ability to get or set an object's SACL is controlled by a privilege typically held only by system administrators.</source>
          <target>The ability to get or set an object's SACL is controlled by a privilege typically held only by system administrators.</target>
        </segment>
      </unit>
      <unit id="1245">
        <segment state="initial">
          <source>TimeFields can be one of the following:</source>
          <target>TimeFields can be one of the following:</target>
        </segment>
      </unit>
      <unit id="1246">
        <segment state="initial">
          <source>CreationTime.</source>
          <target>CreationTime.</target>
        </segment>
      </unit>
      <unit id="1247">
        <segment state="initial">
          <source>Specifies when the file or directory was created.</source>
          <target>Specifies when the file or directory was created.</target>
        </segment>
      </unit>
      <unit id="1248">
        <segment state="initial">
          <source>LastAccessTime.</source>
          <target>LastAccessTime.</target>
        </segment>
      </unit>
      <unit id="1249">
        <segment state="initial">
          <source>Specifies when the file is last read from, written to, or, in the case of executable files, run.</source>
          <target>Specifies when the file is last read from, written to, or, in the case of executable files, run.</target>
        </segment>
      </unit>
      <unit id="1250">
        <segment state="initial">
          <source>LastWrittenTime.</source>
          <target>LastWrittenTime.</target>
        </segment>
      </unit>
      <unit id="1251">
        <segment state="initial">
          <source>Specifies when the file is last written to, truncated, or overwritten.</source>
          <target>Specifies when the file is last written to, truncated, or overwritten.</target>
        </segment>
      </unit>
      <unit id="1252">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">[</data>
          <data id="id4">](#excludeattributes)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For an example of how to use the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</source>
          <target>For an example of how to use the <ph dataRef="id1" id="ph1" />includeAttributes<ph dataRef="id2" id="ph2" /> element, see the example for <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />excludeAttributes<ph dataRef="id6" id="ph4" /></pc>.</target>
        </segment>
      </unit>
      <unit id="1253">
        <segment state="initial">
          <source>library</source>
          <target>library</target>
        </segment>
      </unit>
      <unit id="1254">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1255">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1256">
        <segment state="initial">
          <source>location</source>
          <target>location</target>
        </segment>
      </unit>
      <unit id="1257">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />location<ph dataRef="id2" id="ph2" /> element defines the location of the <ph dataRef="id3" id="ph3" />object<ph dataRef="id4" id="ph4" /> element.</source>
          <target>The <ph dataRef="id1" id="ph1" />location<ph dataRef="id2" id="ph2" /> element defines the location of the <ph dataRef="id3" id="ph3" />object<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1258">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each <ph dataRef="id3" id="ph1" />object</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> once for each <ph dataRef="id3" id="ph1" />object</target>
        </segment>
      </unit>
      <unit id="1259">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#object)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />object<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1260">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#script)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1261">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1262">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>location type="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">typeID</pc>"<ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">ObjectLocation</pc><ph dataRef="id6" id="ph2" />/location</source>
          <target>location type="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">typeID</pc>"<ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">ObjectLocation</pc><ph dataRef="id6" id="ph2" />/location</target>
        </segment>
      </unit>
      <unit id="1263">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1264">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1265">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1266">
        <segment state="initial">
          <source>type</source>
          <target>type</target>
        </segment>
      </unit>
      <unit id="1267">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1268">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>typeID<ph dataRef="id1" id="ph1" /> can be Registry or File.</source>
          <target>typeID<ph dataRef="id1" id="ph1" /> can be Registry or File.</target>
        </segment>
      </unit>
      <unit id="1269">
        <segment state="initial">
          <source>ObjectLocation</source>
          <target>ObjectLocation</target>
        </segment>
      </unit>
      <unit id="1270">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1271">
        <segment state="initial">
          <source>The location of the object.</source>
          <target>The location of the object.</target>
        </segment>
      </unit>
      <unit id="1272">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1273">
        <segment state="initial">
          <source>locationModify</source>
          <target>locationModify</target>
        </segment>
      </unit>
      <unit id="1274">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element to change the location and name of an object before it is migrated to the destination computer.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element to change the location and name of an object before it is migrated to the destination computer.</target>
        </segment>
      </unit>
      <unit id="1275">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element is processed only when the LoadState tool is run on the destination computer.</source>
          <target>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element is processed only when the LoadState tool is run on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1276">
        <segment state="initial">
          <source>In other words, this element is ignored by the ScanState tool.</source>
          <target>In other words, this element is ignored by the ScanState tool.</target>
        </segment>
      </unit>
      <unit id="1277">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element will create the appropriate folder on the destination computer if it does not already exist.</source>
          <target>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element will create the appropriate folder on the destination computer if it does not already exist.</target>
        </segment>
      </unit>
      <unit id="1278">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1279">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1280">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1281">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#locationmodifyfunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />locationModify<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ExactMove, RelativeMove, and Move.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />locationModify<ph dataRef="id6" id="ph2" /> functions</pc> with this element: ExactMove, RelativeMove, and Move.</target>
        </segment>
      </unit>
      <unit id="1282">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1283">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>locationModify script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>locationModify script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="1284">
        <segment state="initial">
          <source>/locationModify</source>
          <target>/locationModify</target>
        </segment>
      </unit>
      <unit id="1285">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1286">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1287">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1288">
        <segment state="initial">
          <source>script</source>
          <target>script</target>
        </segment>
      </unit>
      <unit id="1289">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1290">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="1291">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="1292">
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the include rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the include rule.</target>
        </segment>
      </unit>
      <unit id="1293">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1294">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="1295">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1296">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1297">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>locationModify<ph dataRef="id1" id="ph1" /> functions</source>
          <target>locationModify<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="1298">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The following functions change the location of objects as they are migrated when using the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element.</source>
          <target>The following functions change the location of objects as they are migrated when using the <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="1299">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</source>
          <target>These functions are called for every object that the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element is enumerating.</target>
        </segment>
      </unit>
      <unit id="1300">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element will create the appropriate folder on the destination computer if it does not already exist.</source>
          <target>The <ph dataRef="id1" id="ph1" />locationModify<ph dataRef="id2" id="ph2" /> element will create the appropriate folder on the destination computer if it does not already exist.</target>
        </segment>
      </unit>
      <unit id="1301">
        <segment state="initial">
          <source>ExactMove</source>
          <target>ExactMove</target>
        </segment>
      </unit>
      <unit id="1302">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>The ExactMove function moves all of the objects that are matched by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element into the given <pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectEncodedLocation</pc>.</source>
          <target>The ExactMove function moves all of the objects that are matched by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element into the given <pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectEncodedLocation</pc>.</target>
        </segment>
      </unit>
      <unit id="1303">
        <segment state="initial">
          <source>You can use this function when you want to move a single file to a different location on the destination computer.</source>
          <target>You can use this function when you want to move a single file to a different location on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1304">
        <segment state="initial">
          <source>If the destination location is a node, all of the matching source objects will be written to the node without any subdirectories.</source>
          <target>If the destination location is a node, all of the matching source objects will be written to the node without any subdirectories.</target>
        </segment>
      </unit>
      <unit id="1305">
        <segment state="initial">
          <source>If the destination location is a leaf, the migration engine will migrate all of the matching source objects to the same location.</source>
          <target>If the destination location is a leaf, the migration engine will migrate all of the matching source objects to the same location.</target>
        </segment>
      </unit>
      <unit id="1306">
        <segment state="initial">
          <source>If a collision occurs, the normal collision algorithms will apply.</source>
          <target>If a collision occurs, the normal collision algorithms will apply.</target>
        </segment>
      </unit>
      <unit id="1307">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: ExactMove(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectEncodedLocation</pc>)</source>
          <target>Syntax: ExactMove(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectEncodedLocation</pc>)</target>
        </segment>
      </unit>
      <unit id="1308">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1309">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1310">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1311">
        <segment state="initial">
          <source>ObjectEncodedLocation</source>
          <target>ObjectEncodedLocation</target>
        </segment>
      </unit>
      <unit id="1312">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1313">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The destination <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location</pc> for all of the source objects.</source>
          <target>The destination <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location</pc> for all of the source objects.</target>
        </segment>
      </unit>
      <unit id="1314">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1315">
        <segment state="initial">
          <source>Move</source>
          <target>Move</target>
        </segment>
      </unit>
      <unit id="1316">
        <segment state="initial">
          <source>The Move function moves objects to a different location on the destination computer.</source>
          <target>The Move function moves objects to a different location on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1317">
        <segment state="initial">
          <source>In addition, this function creates subdirectories that were above the longest CSIDL in the source object name.</source>
          <target>In addition, this function creates subdirectories that were above the longest CSIDL in the source object name.</target>
        </segment>
      </unit>
      <unit id="1318">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: Move(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DestinationRoot</pc>)</source>
          <target>Syntax: Move(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">DestinationRoot</pc>)</target>
        </segment>
      </unit>
      <unit id="1319">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1320">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1321">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1322">
        <segment state="initial">
          <source>DestinationRoot</source>
          <target>DestinationRoot</target>
        </segment>
      </unit>
      <unit id="1323">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1324">
        <segment state="initial">
          <source>The location where the source objects will be moved.</source>
          <target>The location where the source objects will be moved.</target>
        </segment>
      </unit>
      <unit id="1325">
        <segment state="initial">
          <source>If needed, this function will create any subdirectories that were above the longest CSIDL in the source object name.</source>
          <target>If needed, this function will create any subdirectories that were above the longest CSIDL in the source object name.</target>
        </segment>
      </unit>
      <unit id="1326">
        <segment state="initial">
          <source>RelativeMove</source>
          <target>RelativeMove</target>
        </segment>
      </unit>
      <unit id="1327">
        <segment state="initial">
          <source>You can use the RelativeMove function to collect and move data.</source>
          <target>You can use the RelativeMove function to collect and move data.</target>
        </segment>
      </unit>
      <unit id="1328">
        <segment state="initial">
          <source>Note that you can use environment variables in source and destination roots, but they may be defined differently on the source and destination computers.</source>
          <target>Note that you can use environment variables in source and destination roots, but they may be defined differently on the source and destination computers.</target>
        </segment>
      </unit>
      <unit id="1329">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: RelativeMove(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SourceRoot</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DestinationRoot</pc>)</source>
          <target>Syntax: RelativeMove(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">SourceRoot</pc>,<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DestinationRoot</pc>)</target>
        </segment>
      </unit>
      <unit id="1330">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1331">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1332">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1333">
        <segment state="initial">
          <source>SourceRoot</source>
          <target>SourceRoot</target>
        </segment>
      </unit>
      <unit id="1334">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1335">
        <segment state="initial">
          <source>The location from where the objects will be moved.</source>
          <target>The location from where the objects will be moved.</target>
        </segment>
      </unit>
      <unit id="1336">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Any source objects that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element that are not in this location will not be moved.</source>
          <target>Any source objects that are enumerated by the parent <ph dataRef="id1" id="ph1" />ObjectSet<ph dataRef="id2" id="ph2" /> element that are not in this location will not be moved.</target>
        </segment>
      </unit>
      <unit id="1337">
        <segment state="initial">
          <source>DestinationRoot</source>
          <target>DestinationRoot</target>
        </segment>
      </unit>
      <unit id="1338">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1339">
        <segment state="initial">
          <source>The location where the source objects will be moved to on the destination computer.</source>
          <target>The location where the source objects will be moved to on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1340">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>If needed, this function will create any subdirectories that were above <ph dataRef="id1" id="ph1" />SourceRoot<ph dataRef="id2" id="ph2" />.</source>
          <target>If needed, this function will create any subdirectories that were above <ph dataRef="id1" id="ph1" />SourceRoot<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="1341">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1342">
        <segment state="initial">
          <source>locDefinition</source>
          <target>locDefinition</target>
        </segment>
      </unit>
      <unit id="1343">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1344">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1345">
        <segment state="initial">
          <source>manufacturer</source>
          <target>manufacturer</target>
        </segment>
      </unit>
      <unit id="1346">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />manufacturer<ph dataRef="id2" id="ph2" /> element defines the manufacturer for the component, but does not affect the migration.</source>
          <target>The <ph dataRef="id1" id="ph1" />manufacturer<ph dataRef="id2" id="ph2" /> element defines the manufacturer for the component, but does not affect the migration.</target>
        </segment>
      </unit>
      <unit id="1347">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</target>
        </segment>
      </unit>
      <unit id="1348">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1349">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1350">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1351">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>manufacturer<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Name</pc><ph dataRef="id4" id="ph2" />/manufacturer</source>
          <target>manufacturer<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">Name</pc><ph dataRef="id4" id="ph2" />/manufacturer</target>
        </segment>
      </unit>
      <unit id="1352">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1353">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1354">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1355">
        <segment state="initial">
          <source>Name</source>
          <target>Name</target>
        </segment>
      </unit>
      <unit id="1356">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1357">
        <segment state="initial">
          <source>The name of the manufacturer for the component.</source>
          <target>The name of the manufacturer for the component.</target>
        </segment>
      </unit>
      <unit id="1358">
        <segment state="initial">
          <source>merge</source>
          <target>merge</target>
        </segment>
      </unit>
      <unit id="1359">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> element determines what will happen when a collision occurs.</source>
          <target>The <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> element determines what will happen when a collision occurs.</target>
        </segment>
      </unit>
      <unit id="1360">
        <segment state="initial">
          <source>A collision is when an object that is migrated is already present on the destination computer.</source>
          <target>A collision is when an object that is migrated is already present on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1361">
        <segment state="initial">
          <source>If you do not specify this element, the default behavior for the registry is for the source object to overwrite the destination object.</source>
          <target>If you do not specify this element, the default behavior for the registry is for the source object to overwrite the destination object.</target>
        </segment>
      </unit>
      <unit id="1362">
        <segment state="initial">
          <source>The default behavior for files is for the source file to be renamed to "OriginalFileName(1).OriginalExtension".</source>
          <target>The default behavior for files is for the source file to be renamed to "OriginalFileName(1).OriginalExtension".</target>
        </segment>
      </unit>
      <unit id="1363">
        <segment state="initial">
          <source>This element specifies only what should be done when a collision occurs.</source>
          <target>This element specifies only what should be done when a collision occurs.</target>
        </segment>
      </unit>
      <unit id="1364">
        <segment state="initial">
          <source>It does not include objects.</source>
          <target>It does not include objects.</target>
        </segment>
      </unit>
      <unit id="1365">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Therefore, for your objects to migrate, you must specify <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules along with the <ph dataRef="id3" id="ph3" />merge<ph dataRef="id4" id="ph4" /> element.</source>
          <target>Therefore, for your objects to migrate, you must specify <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules along with the <ph dataRef="id3" id="ph3" />merge<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1366">
        <segment state="initial">
          <source>When an object is processed and a collision is detected, USMT will select the most specific merge rule and apply it to resolve the conflict.</source>
          <target>When an object is processed and a collision is detected, USMT will select the most specific merge rule and apply it to resolve the conflict.</target>
        </segment>
      </unit>
      <unit id="1367">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">\\\*</data>
          <data id="id4">\[\*\]</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
          <data id="id9">\\</data>
          <data id="id10">\\\*</data>
          <data id="id11">\[\*\]</data>
          <data id="id12">&amp;lt;</data>
          <data id="id13">&amp;gt;</data>
          <data id="id14">&amp;lt;</data>
          <data id="id15">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you have a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule C:<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> set to <ph dataRef="id5" id="ph5" />sourcePriority<ph dataRef="id6" id="ph6" /> and a <ph dataRef="id7" id="ph7" />merge<ph dataRef="id8" id="ph8" /> rule C:<ph dataRef="id9" id="ph9" />subfolder<ph dataRef="id10" id="ph10" /><ph dataRef="id11" id="ph11" /> set to <ph dataRef="id12" id="ph12" />destinationPriority<ph dataRef="id13" id="ph13" />, then USMT would use the <ph dataRef="id14" id="ph14" />destinationPriority<ph dataRef="id15" id="ph15" /> rule because it is the more specific.</source>
          <target>For example, if you have a <ph dataRef="id1" id="ph1" />merge<ph dataRef="id2" id="ph2" /> rule C:<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" /> set to <ph dataRef="id5" id="ph5" />sourcePriority<ph dataRef="id6" id="ph6" /> and a <ph dataRef="id7" id="ph7" />merge<ph dataRef="id8" id="ph8" /> rule C:<ph dataRef="id9" id="ph9" />subfolder<ph dataRef="id10" id="ph10" /><ph dataRef="id11" id="ph11" /> set to <ph dataRef="id12" id="ph12" />destinationPriority<ph dataRef="id13" id="ph13" />, then USMT would use the <ph dataRef="id14" id="ph14" />destinationPriority<ph dataRef="id15" id="ph15" /> rule because it is the more specific.</target>
        </segment>
      </unit>
      <unit id="1368">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-conflicts-and-precedence.md)</data>
        </originalData>
        <segment state="initial">
          <source>For an example of this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</source>
          <target>For an example of this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Conflicts and Precedence</pc>.</target>
        </segment>
      </unit>
      <unit id="1369">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1370">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1371">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1372">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#mergefunctions)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />merge<ph dataRef="id6" id="ph2" /> functions</pc> with this element: SourcePriority, DestinationPriority, FindFilePlaceByPattern, LeafPattern, NewestVersion, HigherValue(), and LowerValue().</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Helper functions:</pc> You can use the following <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />merge<ph dataRef="id6" id="ph2" /> functions</pc> with this element: SourcePriority, DestinationPriority, FindFilePlaceByPattern, LeafPattern, NewestVersion, HigherValue(), and LowerValue().</target>
        </segment>
      </unit>
      <unit id="1373">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1374">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>merge script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</source>
          <target>merge script="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ScriptInvocation</pc>"</target>
        </segment>
      </unit>
      <unit id="1375">
        <segment state="initial">
          <source>/merge</source>
          <target>/merge</target>
        </segment>
      </unit>
      <unit id="1376">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1377">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1378">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1379">
        <segment state="initial">
          <source>script</source>
          <target>script</target>
        </segment>
      </unit>
      <unit id="1380">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1381">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="1382">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="1383">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="1384">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1385">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="1386">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1387">
        <segment state="initial">
          <source>The following example is from the MigUser.xml file:</source>
          <target>The following example is from the MigUser.xml file:</target>
        </segment>
      </unit>
      <unit id="1388">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>merge<ph dataRef="id1" id="ph1" /> functions</source>
          <target>merge<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="1389">
        <segment state="initial">
          <source>These functions control how collisions are resolved.</source>
          <target>These functions control how collisions are resolved.</target>
        </segment>
      </unit>
      <unit id="1390">
        <segment state="initial">
          <source>DestinationPriority</source>
          <target>DestinationPriority</target>
        </segment>
      </unit>
      <unit id="1391">
        <segment state="initial">
          <source>Specifies to keep the object that is on the destination computer and not migrate the object from the source computer.</source>
          <target>Specifies to keep the object that is on the destination computer and not migrate the object from the source computer.</target>
        </segment>
      </unit>
      <unit id="1392">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1393">
        <segment state="initial">
          <source>FindFilePlaceByPattern</source>
          <target>FindFilePlaceByPattern</target>
        </segment>
      </unit>
      <unit id="1394">
        <segment state="initial">
          <source>The FindFilePlaceByPattern function saves files with an incrementing counter when a collision occurs.</source>
          <target>The FindFilePlaceByPattern function saves files with an incrementing counter when a collision occurs.</target>
        </segment>
      </unit>
      <unit id="1395">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>It is a string that contains one of each constructs: <ph dataRef="id1" id="ph1" />F<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />E<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />N<ph dataRef="id6" id="ph6" /> in any order.</source>
          <target>It is a string that contains one of each constructs: <ph dataRef="id1" id="ph1" />F<ph dataRef="id2" id="ph2" />, <ph dataRef="id3" id="ph3" />E<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />N<ph dataRef="id6" id="ph6" /> in any order.</target>
        </segment>
      </unit>
      <unit id="1396">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: FindFilePlaceByPattern(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FilePattern</pc>)</source>
          <target>Syntax: FindFilePlaceByPattern(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">FilePattern</pc>)</target>
        </segment>
      </unit>
      <unit id="1397">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1398">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1399">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1400">
        <segment state="initial">
          <source>FilePattern</source>
          <target>FilePattern</target>
        </segment>
      </unit>
      <unit id="1401">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1402">
        <originalData>
          <data id="id1">&amp;gt;&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>F<ph dataRef="id1" id="ph1" /> will be replaced by the original file name.</source>
          <target>F<ph dataRef="id1" id="ph1" /> will be replaced by the original file name.</target>
        </segment>
      </unit>
      <unit id="1403">
        <originalData>
          <data id="id1">&amp;gt;&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>N<ph dataRef="id1" id="ph1" /> will be replaced by an incrementing counter until there is no collision with the objects on the destination computer.</source>
          <target>N<ph dataRef="id1" id="ph1" /> will be replaced by an incrementing counter until there is no collision with the objects on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1404">
        <originalData>
          <data id="id1">&amp;gt;&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>E<ph dataRef="id1" id="ph1" /> will be replaced by the original file name extension.</source>
          <target>E<ph dataRef="id1" id="ph1" /> will be replaced by the original file name extension.</target>
        </segment>
      </unit>
      <unit id="1405">
        <originalData>
          <data id="id1">&lt;code&gt;&amp;lt;F&amp;gt; (&amp;lt;N&amp;gt;).&amp;lt;E&amp;gt;&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" /> will change the source file MyDocument.doc into MyDocument (1).doc on the destination computer.</source>
          <target>For example, <ph dataRef="id1" id="ph1" /> will change the source file MyDocument.doc into MyDocument (1).doc on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1406">
        <segment state="initial">
          <source>NewestVersion</source>
          <target>NewestVersion</target>
        </segment>
      </unit>
      <unit id="1407">
        <segment state="initial">
          <source>The NewestVersion function will resolve conflicts on the destination computer based on the version of the file.</source>
          <target>The NewestVersion function will resolve conflicts on the destination computer based on the version of the file.</target>
        </segment>
      </unit>
      <unit id="1408">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: NewestVersion(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">VersionTag</pc>)</source>
          <target>Syntax: NewestVersion(<pc dataRefEnd="id2" dataRefStart="id1" id="p1">VersionTag</pc>)</target>
        </segment>
      </unit>
      <unit id="1409">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1410">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1411">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1412">
        <segment state="initial">
          <source>VersionTag</source>
          <target>VersionTag</target>
        </segment>
      </unit>
      <unit id="1413">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1414">
        <segment state="initial">
          <source>The version field that will be checked.</source>
          <target>The version field that will be checked.</target>
        </segment>
      </unit>
      <unit id="1415">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>This can be <ph dataRef="id1" id="ph1" />FileVersion<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />ProductVersion<ph dataRef="id4" id="ph4" />.</source>
          <target>This can be <ph dataRef="id1" id="ph1" />FileVersion<ph dataRef="id2" id="ph2" /> or <ph dataRef="id3" id="ph3" />ProductVersion<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1416">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The file with the highest <ph dataRef="id1" id="ph1" />VersionTag<ph dataRef="id2" id="ph2" /> version determines which conflicts will be resolved based on the file's version.</source>
          <target>The file with the highest <ph dataRef="id1" id="ph1" />VersionTag<ph dataRef="id2" id="ph2" /> version determines which conflicts will be resolved based on the file's version.</target>
        </segment>
      </unit>
      <unit id="1417">
        <segment state="initial">
          <source>For example, if Myfile.txt contains FileVersion 1 and the same file on the destination computer contains FileVersion 2, the file on destination will remain.</source>
          <target>For example, if Myfile.txt contains FileVersion 1 and the same file on the destination computer contains FileVersion 2, the file on destination will remain.</target>
        </segment>
      </unit>
      <unit id="1418">
        <segment state="initial">
          <source>HigherValue()</source>
          <target>HigherValue()</target>
        </segment>
      </unit>
      <unit id="1419">
        <segment state="initial">
          <source>You can use this function for merging registry values.</source>
          <target>You can use this function for merging registry values.</target>
        </segment>
      </unit>
      <unit id="1420">
        <segment state="initial">
          <source>The registry values will be evaluated as numeric values, and the one with the higher value will determine which registry values will be merged.</source>
          <target>The registry values will be evaluated as numeric values, and the one with the higher value will determine which registry values will be merged.</target>
        </segment>
      </unit>
      <unit id="1421">
        <segment state="initial">
          <source>LowerValue()</source>
          <target>LowerValue()</target>
        </segment>
      </unit>
      <unit id="1422">
        <segment state="initial">
          <source>You can use this function for merging registry values.</source>
          <target>You can use this function for merging registry values.</target>
        </segment>
      </unit>
      <unit id="1423">
        <segment state="initial">
          <source>The registry values will be evaluated as numeric values and the one with the lower value will determine which registry values will be merged.</source>
          <target>The registry values will be evaluated as numeric values and the one with the lower value will determine which registry values will be merged.</target>
        </segment>
      </unit>
      <unit id="1424">
        <segment state="initial">
          <source>SourcePriority</source>
          <target>SourcePriority</target>
        </segment>
      </unit>
      <unit id="1425">
        <segment state="initial">
          <source>Specifies to migrate the object from the source computer, and to delete the object that is on the destination computer.</source>
          <target>Specifies to migrate the object from the source computer, and to delete the object that is on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1426">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1427">
        <segment state="initial">
          <source>migration</source>
          <target>migration</target>
        </segment>
      </unit>
      <unit id="1428">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />migration<ph dataRef="id2" id="ph2" /> element is the single root element of a migration .xml file and is required.</source>
          <target>The <ph dataRef="id1" id="ph1" />migration<ph dataRef="id2" id="ph2" /> element is the single root element of a migration .xml file and is required.</target>
        </segment>
      </unit>
      <unit id="1429">
        <segment state="initial">
          <source>Each .xml file must have a unique migration urlid.</source>
          <target>Each .xml file must have a unique migration urlid.</target>
        </segment>
      </unit>
      <unit id="1430">
        <segment state="initial">
          <source>The urlid of each file that you specify on the command line must be unique.</source>
          <target>The urlid of each file that you specify on the command line must be unique.</target>
        </segment>
      </unit>
      <unit id="1431">
        <segment state="initial">
          <source>This is because USMT uses the urlid to define the components within the file.</source>
          <target>This is because USMT uses the urlid to define the components within the file.</target>
        </segment>
      </unit>
      <unit id="1432">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, you must specify the following at the beginning of each file: <ph dataRef="id1" id="ph1" />CustomFileName<ph dataRef="id2" id="ph2" /> is the name of the file; for example, "CustomApp".</source>
          <target>For example, you must specify the following at the beginning of each file: <ph dataRef="id1" id="ph1" />CustomFileName<ph dataRef="id2" id="ph2" /> is the name of the file; for example, "CustomApp".</target>
        </segment>
      </unit>
      <unit id="1433">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> one</target>
        </segment>
      </unit>
      <unit id="1434">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1435">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1436">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#library)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#namedelements)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />library<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />namedElements<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />library<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />namedElements<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="1437">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1438">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>migration urlid="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">UrlID/</pc>Name"</source>
          <target>migration urlid="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">UrlID/</pc>Name"</target>
        </segment>
      </unit>
      <unit id="1439">
        <segment state="initial">
          <source>/migration</source>
          <target>/migration</target>
        </segment>
      </unit>
      <unit id="1440">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1441">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1442">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1443">
        <segment state="initial">
          <source>urlid</source>
          <target>urlid</target>
        </segment>
      </unit>
      <unit id="1444">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1445">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>UrlID<ph dataRef="id1" id="ph1" /> is a string identifier that uniquely identifies this .xml file.</source>
          <target>UrlID<ph dataRef="id1" id="ph1" /> is a string identifier that uniquely identifies this .xml file.</target>
        </segment>
      </unit>
      <unit id="1446">
        <segment state="initial">
          <source>This parameter must be a no-colon-name as defined by the XML Namespaces specification.</source>
          <target>This parameter must be a no-colon-name as defined by the XML Namespaces specification.</target>
        </segment>
      </unit>
      <unit id="1447">
        <segment state="initial">
          <source>Each migration .xml file must have a unique urlid.</source>
          <target>Each migration .xml file must have a unique urlid.</target>
        </segment>
      </unit>
      <unit id="1448">
        <segment state="initial">
          <source>If two migration .xml files have the same urlid, the second .xml file that is specified on the command line will not be processed.</source>
          <target>If two migration .xml files have the same urlid, the second .xml file that is specified on the command line will not be processed.</target>
        </segment>
      </unit>
      <unit id="1449">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=220938)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about XML Namespaces, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use XML Namespaces</pc>.</source>
          <target>For more information about XML Namespaces, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Use XML Namespaces</pc>.</target>
        </segment>
      </unit>
      <unit id="1450">
        <segment state="initial">
          <source>Name</source>
          <target>Name</target>
        </segment>
      </unit>
      <unit id="1451">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="1452">
        <segment state="initial">
          <source>Although not required, it is good practice to use the name of the .xml file.</source>
          <target>Although not required, it is good practice to use the name of the .xml file.</target>
        </segment>
      </unit>
      <unit id="1453">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1454">
        <segment state="initial">
          <source>MigXMLHelper.FileProperties</source>
          <target>MigXMLHelper.FileProperties</target>
        </segment>
      </unit>
      <unit id="1455">
        <segment state="initial">
          <source>This filter helper function can be used to filter the migration of files based on file size and date attributes.</source>
          <target>This filter helper function can be used to filter the migration of files based on file size and date attributes.</target>
        </segment>
      </unit>
      <unit id="1456">
        <segment state="initial">
          <source>Helper Function</source>
          <target>Helper Function</target>
        </segment>
      </unit>
      <unit id="1457">
        <segment state="initial">
          <source>MigXMLHelper.FileProperties (property, operator, valueToCompare)</source>
          <target>MigXMLHelper.FileProperties (property, operator, valueToCompare)</target>
        </segment>
      </unit>
      <unit id="1458">
        <segment state="initial">
          <source>Property</source>
          <target>Property</target>
        </segment>
      </unit>
      <unit id="1459">
        <segment state="initial">
          <source>filesize, dateCreated, dateModified, dateAccessed</source>
          <target>filesize, dateCreated, dateModified, dateAccessed</target>
        </segment>
      </unit>
      <unit id="1460">
        <segment state="initial">
          <source>Operator</source>
          <target>Operator</target>
        </segment>
      </unit>
      <unit id="1461">
        <segment state="initial">
          <source>range, neq, lte, lt, eq, gte, gt</source>
          <target>range, neq, lte, lt, eq, gte, gt</target>
        </segment>
      </unit>
      <unit id="1462">
        <segment state="initial">
          <source>valueToCompare</source>
          <target>valueToCompare</target>
        </segment>
      </unit>
      <unit id="1463">
        <segment state="initial">
          <source>The value we are comparing.</source>
          <target>The value we are comparing.</target>
        </segment>
      </unit>
      <unit id="1464">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1465">
        <segment state="initial">
          <source>Date: “2008/05/15-2005/05/17”, “2008/05/15”</source>
          <target>Date: “2008/05/15-2005/05/17”, “2008/05/15”</target>
        </segment>
      </unit>
      <unit id="1466">
        <segment state="initial">
          <source>Size: A numeral with B, KB, MB, or GB at the end.</source>
          <target>Size: A numeral with B, KB, MB, or GB at the end.</target>
        </segment>
      </unit>
      <unit id="1467">
        <segment state="initial">
          <source>“5GB”, “1KB-1MB”</source>
          <target>“5GB”, “1KB-1MB”</target>
        </segment>
      </unit>
      <unit id="1468">
        <segment state="initial">
          <source>namedElements</source>
          <target>namedElements</target>
        </segment>
      </unit>
      <unit id="1469">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />namedElements<ph dataRef="id4" id="ph2" /></pc> element to define named elements.</source>
          <target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />namedElements<ph dataRef="id4" id="ph2" /></pc> element to define named elements.</target>
        </segment>
      </unit>
      <unit id="1470">
        <segment state="initial">
          <source>You can use these elements in any component throughout your .xml file.</source>
          <target>You can use these elements in any component throughout your .xml file.</target>
        </segment>
      </unit>
      <unit id="1471">
        <segment state="initial">
          <source>For an example of how to use this element, see the MigApp.xml file.</source>
          <target>For an example of how to use this element, see the MigApp.xml file.</target>
        </segment>
      </unit>
      <unit id="1472">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1473">
        <segment state="initial">
          <source>namedElements</source>
          <target>namedElements</target>
        </segment>
      </unit>
      <unit id="1474">
        <segment state="initial">
          <source>/namedElements</source>
          <target>/namedElements</target>
        </segment>
      </unit>
      <unit id="1475">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1476">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#migration)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />migration<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />migration<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1477">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#bkmk-environment)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#rules)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#conditions)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#detection)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">&amp;lt;</data>
          <data id="id20">&amp;gt;</data>
          <data id="id21">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />conditions<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />detection<ph dataRef="id18" id="ph8" /></pc>, <ph dataRef="id19" id="ph9" />detects<ph dataRef="id20" id="ph10" />, <ph dataRef="id21" id="ph11" />detect</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />conditions<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />detection<ph dataRef="id18" id="ph8" /></pc>, <ph dataRef="id19" id="ph9" />detects<ph dataRef="id20" id="ph10" />, <ph dataRef="id21" id="ph11" />detect</target>
        </segment>
      </unit>
      <unit id="1478">
        <segment state="initial">
          <source>For an example of this element, see the MigApp.xml file.</source>
          <target>For an example of this element, see the MigApp.xml file.</target>
        </segment>
      </unit>
      <unit id="1479">
        <segment state="initial">
          <source>object</source>
          <target>object</target>
        </segment>
      </unit>
      <unit id="1480">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />object<ph dataRef="id2" id="ph2" /> element represents a file or registry key.</source>
          <target>The <ph dataRef="id1" id="ph1" />object<ph dataRef="id2" id="ph2" /> element represents a file or registry key.</target>
        </segment>
      </unit>
      <unit id="1481">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1482">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#addobjects)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />addObjects<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />addObjects<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1483">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#location)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#attribute)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />location<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />attributes<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />location<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />attributes<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="1484">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#bytes)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />bytes<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />bytes<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1485">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1486">
        <segment state="initial">
          <source>object</source>
          <target>object</target>
        </segment>
      </unit>
      <unit id="1487">
        <segment state="initial">
          <source>/object</source>
          <target>/object</target>
        </segment>
      </unit>
      <unit id="1488">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1489">
        <segment state="initial">
          <source>objectSet</source>
          <target>objectSet</target>
        </segment>
      </unit>
      <unit id="1490">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> element contains a list of object patterns ; for example, file paths, registry locations, and so on.</source>
          <target>The <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> element contains a list of object patterns ; for example, file paths, registry locations, and so on.</target>
        </segment>
      </unit>
      <unit id="1491">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Any child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements will be evaluated first.</source>
          <target>Any child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements will be evaluated first.</target>
        </segment>
      </unit>
      <unit id="1492">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If all child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements return FALSE, the <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element will evaluate to an empty set.</source>
          <target>If all child <ph dataRef="id1" id="ph1" />conditions<ph dataRef="id2" id="ph2" /> elements return FALSE, the <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element will evaluate to an empty set.</target>
        </segment>
      </unit>
      <unit id="1493">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each parent element, there can be only multiple <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> elements.</source>
          <target>For each parent element, there can be only multiple <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" /> elements.</target>
        </segment>
      </unit>
      <unit id="1494">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1495">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#variable)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#content)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#include)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#exclude)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">[</data>
          <data id="id20">](#merge)</data>
          <data id="id21">&amp;lt;</data>
          <data id="id22">&amp;gt;</data>
          <data id="id23">[</data>
          <data id="id24">](#contentmodify)</data>
          <data id="id25">&amp;lt;</data>
          <data id="id26">&amp;gt;</data>
          <data id="id27">[</data>
          <data id="id28">](#locationmodify)</data>
          <data id="id29">&amp;lt;</data>
          <data id="id30">&amp;gt;</data>
          <data id="id31">[</data>
          <data id="id32">](#destinationcleanup)</data>
          <data id="id33">&amp;lt;</data>
          <data id="id34">&amp;gt;</data>
          <data id="id35">[</data>
          <data id="id36">](#includeattributes)</data>
          <data id="id37">&amp;lt;</data>
          <data id="id38">&amp;gt;</data>
          <data id="id39">[</data>
          <data id="id40">](#excludeattributes)</data>
          <data id="id41">&amp;lt;</data>
          <data id="id42">&amp;gt;</data>
          <data id="id43">[</data>
          <data id="id44">](#unconditionalexclude)</data>
          <data id="id45">&amp;lt;</data>
          <data id="id46">&amp;gt;</data>
          <data id="id47">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />content<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />include<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />exclude<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />merge<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />contentModify<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />locationModify<ph dataRef="id30" id="ph14" /></pc>, <pc dataRefEnd="id32" dataRefStart="id31" id="p9"><ph dataRef="id33" id="ph15" />destinationCleanup<ph dataRef="id34" id="ph16" /></pc>, <pc dataRefEnd="id36" dataRefStart="id35" id="p10"><ph dataRef="id37" id="ph17" />includeAttributes<ph dataRef="id38" id="ph18" /></pc>, <pc dataRefEnd="id40" dataRefStart="id39" id="p11"><ph dataRef="id41" id="ph19" />excludeAttributes<ph dataRef="id42" id="ph20" /></pc>, <pc dataRefEnd="id44" dataRefStart="id43" id="p12"><ph dataRef="id45" id="ph21" />unconditionalExclude<ph dataRef="id46" id="ph22" /></pc>, <ph dataRef="id47" id="ph23" />detect</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />content<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />include<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />exclude<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />merge<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />contentModify<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />locationModify<ph dataRef="id30" id="ph14" /></pc>, <pc dataRefEnd="id32" dataRefStart="id31" id="p9"><ph dataRef="id33" id="ph15" />destinationCleanup<ph dataRef="id34" id="ph16" /></pc>, <pc dataRefEnd="id36" dataRefStart="id35" id="p10"><ph dataRef="id37" id="ph17" />includeAttributes<ph dataRef="id38" id="ph18" /></pc>, <pc dataRefEnd="id40" dataRefStart="id39" id="p11"><ph dataRef="id41" id="ph19" />excludeAttributes<ph dataRef="id42" id="ph20" /></pc>, <pc dataRefEnd="id44" dataRefStart="id43" id="p12"><ph dataRef="id45" id="ph21" />unconditionalExclude<ph dataRef="id46" id="ph22" /></pc>, <ph dataRef="id47" id="ph23" />detect</target>
        </segment>
      </unit>
      <unit id="1496">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#script)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#pattern)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc> either <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />pattern<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc> either <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc> or <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />pattern<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="1497">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#content)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#conditions)</data>
          <data id="id9">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />content<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3">conditions</pc>, <ph dataRef="id9" id="ph3" />condition</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />content<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3">conditions</pc>, <ph dataRef="id9" id="ph3" />condition</target>
        </segment>
      </unit>
      <unit id="1498">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1499">
        <segment state="initial">
          <source>objectSet</source>
          <target>objectSet</target>
        </segment>
      </unit>
      <unit id="1500">
        <segment state="initial">
          <source>/objectSet</source>
          <target>/objectSet</target>
        </segment>
      </unit>
      <unit id="1501">
        <segment state="initial">
          <source>The following example is from the MigUser.xml file:</source>
          <target>The following example is from the MigUser.xml file:</target>
        </segment>
      </unit>
      <unit id="1502">
        <segment state="initial">
          <source>path</source>
          <target>path</target>
        </segment>
      </unit>
      <unit id="1503">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1504">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1505">
        <segment state="initial">
          <source>paths</source>
          <target>paths</target>
        </segment>
      </unit>
      <unit id="1506">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1507">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1508">
        <segment state="initial">
          <source>pattern</source>
          <target>pattern</target>
        </segment>
      </unit>
      <unit id="1509">
        <segment state="initial">
          <source>You can use this element to specify multiple objects.</source>
          <target>You can use this element to specify multiple objects.</target>
        </segment>
      </unit>
      <unit id="1510">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can specify multiple <ph dataRef="id1" id="ph1" />pattern<ph dataRef="id2" id="ph2" /> elements for each <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element and they will be combined.</source>
          <target>You can specify multiple <ph dataRef="id1" id="ph1" />pattern<ph dataRef="id2" id="ph2" /> elements for each <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element and they will be combined.</target>
        </segment>
      </unit>
      <unit id="1511">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If you are specifying files, you may want to use GenerateDrivePatterns with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> instead.</source>
          <target>If you are specifying files, you may want to use GenerateDrivePatterns with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> instead.</target>
        </segment>
      </unit>
      <unit id="1512">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>GenerateDrivePatterns is basically the same as a <ph dataRef="id1" id="ph1" />pattern<ph dataRef="id2" id="ph2" /> rule, without the drive letter specification.</source>
          <target>GenerateDrivePatterns is basically the same as a <ph dataRef="id1" id="ph1" />pattern<ph dataRef="id2" id="ph2" /> rule, without the drive letter specification.</target>
        </segment>
      </unit>
      <unit id="1513">
        <segment state="initial">
          <source>For example, the following two lines of code are similar:</source>
          <target>For example, the following two lines of code are similar:</target>
        </segment>
      </unit>
      <unit id="1514">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1515">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1516">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">\[</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">\]</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none but <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">object</pc><ph dataRef="id8" id="ph2" /> must be valid.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none but <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Path</pc><ph dataRef="id5" id="ph1" /><pc dataRefEnd="id7" dataRefStart="id6" id="p3">object</pc><ph dataRef="id8" id="ph2" /> must be valid.</target>
        </segment>
      </unit>
      <unit id="1517">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1518">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">&amp;gt;</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">\[</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">\]&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>pattern type="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">typeID</pc>"<ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Path</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">object</pc><ph dataRef="id9" id="ph3" />/pattern</source>
          <target>pattern type="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">typeID</pc>"<ph dataRef="id3" id="ph1" /><pc dataRefEnd="id5" dataRefStart="id4" id="p2">Path</pc><ph dataRef="id6" id="ph2" /><pc dataRefEnd="id8" dataRefStart="id7" id="p3">object</pc><ph dataRef="id9" id="ph3" />/pattern</target>
        </segment>
      </unit>
      <unit id="1519">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1520">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1521">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1522">
        <segment state="initial">
          <source>type</source>
          <target>type</target>
        </segment>
      </unit>
      <unit id="1523">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1524">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>typeID<ph dataRef="id1" id="ph1" /> can be Registry, File, or Ini.</source>
          <target>typeID<ph dataRef="id1" id="ph1" /> can be Registry, File, or Ini.</target>
        </segment>
      </unit>
      <unit id="1525">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
          <data id="id3">&lt;em&gt;</data>
          <data id="id4">&lt;/em&gt;</data>
          <data id="id5">&lt;em&gt;</data>
          <data id="id6">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>If <ph dataRef="id1" id="ph1" />typeId<ph dataRef="id2" id="ph2" /> is Ini, then you cannot have a space between <ph dataRef="id3" id="ph3" />Path<ph dataRef="id4" id="ph4" /> and <ph dataRef="id5" id="ph5" />object<ph dataRef="id6" id="ph6" />.</source>
          <target>If <ph dataRef="id1" id="ph1" />typeId<ph dataRef="id2" id="ph2" /> is Ini, then you cannot have a space between <ph dataRef="id3" id="ph3" />Path<ph dataRef="id4" id="ph4" /> and <ph dataRef="id5" id="ph5" />object<ph dataRef="id6" id="ph6" />.</target>
        </segment>
      </unit>
      <unit id="1526">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, the following is correct when type=<ph dataRef="id1" id="ph1" />Ini<ph dataRef="id2" id="ph2" />:</source>
          <target>For example, the following is correct when type=<ph dataRef="id1" id="ph1" />Ini<ph dataRef="id2" id="ph2" />:</target>
        </segment>
      </unit>
      <unit id="1527">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>pattern type=<ph dataRef="id1" id="ph1" />Ini<ph dataRef="id2" id="ph2" />%WinAmp5InstPath%\Winamp.ini|WinAmp[keeponscreen]<ph dataRef="id3" id="ph3" />/pattern</source>
          <target>pattern type=<ph dataRef="id1" id="ph1" />Ini<ph dataRef="id2" id="ph2" />%WinAmp5InstPath%\Winamp.ini|WinAmp[keeponscreen]<ph dataRef="id3" id="ph3" />/pattern</target>
        </segment>
      </unit>
      <unit id="1528">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
          <data id="id2">&lt;em&gt;</data>
          <data id="id3">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Path<ph dataRef="id1" id="ph1" /> [<ph dataRef="id2" id="ph2" />object<ph dataRef="id3" id="ph3" />]</source>
          <target>Path<ph dataRef="id1" id="ph1" /> [<ph dataRef="id2" id="ph2" />object<ph dataRef="id3" id="ph3" />]</target>
        </segment>
      </unit>
      <unit id="1529">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1530">
        <segment state="initial">
          <source>A valid registry or file path pattern, followed by at least one space, followed by brackets [] that contain the object to be migrated.</source>
          <target>A valid registry or file path pattern, followed by at least one space, followed by brackets [] that contain the object to be migrated.</target>
        </segment>
      </unit>
      <unit id="1531">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
          <data id="id2">[</data>
          <data id="id3">](usmt-recognized-environment-variables.md)</data>
        </originalData>
        <segment state="initial">
          <source>Path<ph dataRef="id1" id="ph1" /> can contain the asterisk (*) wildcard character or can be an <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Recognized Environment Variables</pc>.</source>
          <target>Path<ph dataRef="id1" id="ph1" /> can contain the asterisk (*) wildcard character or can be an <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Recognized Environment Variables</pc>.</target>
        </segment>
      </unit>
      <unit id="1532">
        <segment state="initial">
          <source>You cannot use the question mark as a wildcard character.You can use HKCU and HKLM to refer to HKEY_CURRENT_USER and HKEY_LOCAL_MACHINE respectively.</source>
          <target>You cannot use the question mark as a wildcard character.You can use HKCU and HKLM to refer to HKEY_CURRENT_USER and HKEY_LOCAL_MACHINE respectively.</target>
        </segment>
      </unit>
      <unit id="1533">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>Object<ph dataRef="id1" id="ph1" /> can contain the asterisk (*) wildcard character.</source>
          <target>Object<ph dataRef="id1" id="ph1" /> can contain the asterisk (*) wildcard character.</target>
        </segment>
      </unit>
      <unit id="1534">
        <segment state="initial">
          <source>However, you cannot use the question mark as a wildcard character.</source>
          <target>However, you cannot use the question mark as a wildcard character.</target>
        </segment>
      </unit>
      <unit id="1535">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1536">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
          <data id="id2">&lt;em&gt;</data>
          <data id="id3">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>C:\Folder\ [*]<ph dataRef="id1" id="ph1" /> enumerates all files in C:\<ph dataRef="id2" id="ph2" />Path<ph dataRef="id3" id="ph3" /> but no subfolders of C:\Folder.</source>
          <target>C:\Folder\ [*]<ph dataRef="id1" id="ph1" /> enumerates all files in C:\<ph dataRef="id2" id="ph2" />Path<ph dataRef="id3" id="ph3" /> but no subfolders of C:\Folder.</target>
        </segment>
      </unit>
      <unit id="1537">
        <originalData>
          <data id="id1">\*</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>C:\Folder<ph dataRef="id1" id="ph1" /> [*]<ph dataRef="id2" id="ph2" /> enumerates all files and subfolders of C:\Folder.</source>
          <target>C:\Folder<ph dataRef="id1" id="ph1" /> [*]<ph dataRef="id2" id="ph2" /> enumerates all files and subfolders of C:\Folder.</target>
        </segment>
      </unit>
      <unit id="1538">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>C:\Folder\ [*.mp3]<ph dataRef="id1" id="ph1" /> enumerates all .mp3 files in C:\Folder.</source>
          <target>C:\Folder\ [*.mp3]<ph dataRef="id1" id="ph1" /> enumerates all .mp3 files in C:\Folder.</target>
        </segment>
      </unit>
      <unit id="1539">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>C:\Folder\ [Sample.doc]<ph dataRef="id1" id="ph1" /> enumerates only the Sample.doc file located in C:\Folder.</source>
          <target>C:\Folder\ [Sample.doc]<ph dataRef="id1" id="ph1" /> enumerates only the Sample.doc file located in C:\Folder.</target>
        </segment>
      </unit>
      <unit id="1540">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="1541">
        <segment state="initial">
          <source>If you are migrating a file that has a square bracket character ([ or ]) in the file name, you must insert the carrot (^) character directly before the bracket for it to be valid.</source>
          <target>If you are migrating a file that has a square bracket character ([ or ]) in the file name, you must insert the carrot (^) character directly before the bracket for it to be valid.</target>
        </segment>
      </unit>
      <unit id="1542">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&lt;code&gt;&amp;lt;pattern type=&amp;quot;File&amp;quot;&amp;gt;c:\documents\mydocs [file^].txt]&amp;lt;/pattern&amp;gt; &lt;/code&gt;</data>
          <data id="id4">&lt;code&gt;&amp;lt;pattern type=&amp;quot;File&amp;quot;&amp;gt;c:\documents\mydocs [file].txt]&amp;lt;/pattern&amp;gt;&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if there is a file named <ph dataRef="id1" id="ph1" />file].txt<ph dataRef="id2" id="ph2" />, you must specify <ph dataRef="id3" id="ph3" />instead of <ph dataRef="id4" id="ph4" />.</source>
          <target>For example, if there is a file named <ph dataRef="id1" id="ph1" />file].txt<ph dataRef="id2" id="ph2" />, you must specify <ph dataRef="id3" id="ph3" />instead of <ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1543">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1544">
        <segment state="initial">
          <source>To migrate a single registry key:</source>
          <target>To migrate a single registry key:</target>
        </segment>
      </unit>
      <unit id="1545">
        <segment state="initial">
          <source>To migrate the EngineeringDrafts folder and any subfolders from the C: drive:</source>
          <target>To migrate the EngineeringDrafts folder and any subfolders from the C: drive:</target>
        </segment>
      </unit>
      <unit id="1546">
        <segment state="initial">
          <source>To migrate only the EngineeringDrafts folder, excluding any subfolders, from the C: drive:</source>
          <target>To migrate only the EngineeringDrafts folder, excluding any subfolders, from the C: drive:</target>
        </segment>
      </unit>
      <unit id="1547">
        <segment state="initial">
          <source>Reroute Files and Settings</source>
          <target>Reroute Files and Settings</target>
        </segment>
      </unit>
      <unit id="1548">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>To migrate the Sample.doc file from C:<ph dataRef="id1" id="ph1" />EngineeringDrafts:</source>
          <target>To migrate the Sample.doc file from C:<ph dataRef="id1" id="ph1" />EngineeringDrafts:</target>
        </segment>
      </unit>
      <unit id="1549">
        <segment state="initial">
          <source>To migrate the Sample.doc file from where ever it exists on the C: drive use pattern in the following way.</source>
          <target>To migrate the Sample.doc file from where ever it exists on the C: drive use pattern in the following way.</target>
        </segment>
      </unit>
      <unit id="1550">
        <segment state="initial">
          <source>If multiple files exist with the same name on the C: drive, then all of these files will be migrated.</source>
          <target>If multiple files exist with the same name on the C: drive, then all of these files will be migrated.</target>
        </segment>
      </unit>
      <unit id="1551">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-exclude-files-and-settings.md)</data>
          <data id="id3">[</data>
          <data id="id4">](usmt-reroute-files-and-settings.md)</data>
          <data id="id5">[</data>
          <data id="id6">](usmt-include-files-and-settings.md)</data>
          <data id="id7">[</data>
          <data id="id8">](usmt-custom-xml-examples.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more examples of how to use this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reroute Files and Settings</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Include Files and Settings</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Custom XML Examples</pc>.</source>
          <target>For more examples of how to use this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reroute Files and Settings</pc>, <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Include Files and Settings</pc>, and <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Custom XML Examples</pc>.</target>
        </segment>
      </unit>
      <unit id="1552">
        <segment state="initial">
          <source>processing</source>
          <target>processing</target>
        </segment>
      </unit>
      <unit id="1553">
        <segment state="initial">
          <source>You can use this element to run a script during a specific point within the migration process.</source>
          <target>You can use this element to run a script during a specific point within the migration process.</target>
        </segment>
      </unit>
      <unit id="1554">
        <segment state="initial">
          <source>Return values are not expected from the scripts that you specify, and if there are return values, they will be ignored.</source>
          <target>Return values are not expected from the scripts that you specify, and if there are return values, they will be ignored.</target>
        </segment>
      </unit>
      <unit id="1555">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="1556">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1557">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#script)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child element:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />script<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1558">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1559">
        <segment state="initial">
          <source>processing when="pre-scan|scan-success|post-scan|pre-apply|apply-success|post-apply"</source>
          <target>processing when="pre-scan|scan-success|post-scan|pre-apply|apply-success|post-apply"</target>
        </segment>
      </unit>
      <unit id="1560">
        <segment state="initial">
          <source>/processing</source>
          <target>/processing</target>
        </segment>
      </unit>
      <unit id="1561">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1562">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1563">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1564">
        <segment state="initial">
          <source>when</source>
          <target>when</target>
        </segment>
      </unit>
      <unit id="1565">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1566">
        <segment state="initial">
          <source>Indicates when the script should be run.</source>
          <target>Indicates when the script should be run.</target>
        </segment>
      </unit>
      <unit id="1567">
        <segment state="initial">
          <source>This value can be one of the following:</source>
          <target>This value can be one of the following:</target>
        </segment>
      </unit>
      <unit id="1568">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pre-scan<ph dataRef="id1" id="ph1" /> means before the scanning process begins.</source>
          <target>pre-scan<ph dataRef="id1" id="ph1" /> means before the scanning process begins.</target>
        </segment>
      </unit>
      <unit id="1569">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>scan-success<ph dataRef="id1" id="ph1" /> means after the scanning process has finished successfully.</source>
          <target>scan-success<ph dataRef="id1" id="ph1" /> means after the scanning process has finished successfully.</target>
        </segment>
      </unit>
      <unit id="1570">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>post-scan<ph dataRef="id1" id="ph1" /> means after the scanning process has finished, whether it was successful or not.</source>
          <target>post-scan<ph dataRef="id1" id="ph1" /> means after the scanning process has finished, whether it was successful or not.</target>
        </segment>
      </unit>
      <unit id="1571">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>pre-apply<ph dataRef="id1" id="ph1" /> means before the apply process begins.</source>
          <target>pre-apply<ph dataRef="id1" id="ph1" /> means before the apply process begins.</target>
        </segment>
      </unit>
      <unit id="1572">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>apply-success<ph dataRef="id1" id="ph1" /> means after the apply process has finished successfully.</source>
          <target>apply-success<ph dataRef="id1" id="ph1" /> means after the apply process has finished successfully.</target>
        </segment>
      </unit>
      <unit id="1573">
        <originalData>
          <data id="id1">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>post-apply<ph dataRef="id1" id="ph1" /> means after the apply process has finished, whether it was successful or not.</source>
          <target>post-apply<ph dataRef="id1" id="ph1" /> means after the apply process has finished, whether it was successful or not.</target>
        </segment>
      </unit>
      <unit id="1574">
        <segment state="initial">
          <source>plugin</source>
          <target>plugin</target>
        </segment>
      </unit>
      <unit id="1575">
        <segment state="initial">
          <source>This is an internal USMT element.</source>
          <target>This is an internal USMT element.</target>
        </segment>
      </unit>
      <unit id="1576">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1577">
        <segment state="initial">
          <source>role</source>
          <target>role</target>
        </segment>
      </unit>
      <unit id="1578">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</source>
          <target>The <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</target>
        </segment>
      </unit>
      <unit id="1579">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>By specifying the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element, you can create a concrete component.</source>
          <target>By specifying the <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element, you can create a concrete component.</target>
        </segment>
      </unit>
      <unit id="1580">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The component will be defined by the parameters specified at the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> level, and with the role that you specify here.</source>
          <target>The component will be defined by the parameters specified at the <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> level, and with the role that you specify here.</target>
        </segment>
      </unit>
      <unit id="1581">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Each <ph dataRef="id3" id="ph1" />component<ph dataRef="id4" id="ph2" /> can have one, two or three child <ph dataRef="id5" id="ph3" />role<ph dataRef="id6" id="ph4" /> elements.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Each <ph dataRef="id3" id="ph1" />component<ph dataRef="id4" id="ph2" /> can have one, two or three child <ph dataRef="id5" id="ph3" />role<ph dataRef="id6" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1582">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#role)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />role<ph dataRef="id10" id="ph4" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />role<ph dataRef="id10" id="ph4" /></pc></target>
        </segment>
      </unit>
      <unit id="1583">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1584">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#bkmk-environment)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#detection)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#component)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#role)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">&amp;lt;</data>
          <data id="id20">&amp;gt;</data>
          <data id="id21">&amp;lt;</data>
          <data id="id22">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />detection<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />component<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />role<ph dataRef="id18" id="ph8" /></pc>, <ph dataRef="id19" id="ph9" />detects<ph dataRef="id20" id="ph10" />, <ph dataRef="id21" id="ph11" />plugin<ph dataRef="id22" id="ph12" />,</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />detection<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />component<ph dataRef="id14" id="ph6" /></pc>, <pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />role<ph dataRef="id18" id="ph8" /></pc>, <ph dataRef="id19" id="ph9" />detects<ph dataRef="id20" id="ph10" />, <ph dataRef="id21" id="ph11" />plugin<ph dataRef="id22" id="ph12" />,</target>
        </segment>
      </unit>
      <unit id="1585">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1586">
        <segment state="initial">
          <source>role role="Container|Binaries|Settings|Data"</source>
          <target>role role="Container|Binaries|Settings|Data"</target>
        </segment>
      </unit>
      <unit id="1587">
        <segment state="initial">
          <source>/role</source>
          <target>/role</target>
        </segment>
      </unit>
      <unit id="1588">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1589">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1590">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1591">
        <segment state="initial">
          <source>role</source>
          <target>role</target>
        </segment>
      </unit>
      <unit id="1592">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1593">
        <segment state="initial">
          <source>Defines the role for the component.</source>
          <target>Defines the role for the component.</target>
        </segment>
      </unit>
      <unit id="1594">
        <segment state="initial">
          <source>Role can be one of:</source>
          <target>Role can be one of:</target>
        </segment>
      </unit>
      <unit id="1595">
        <segment state="initial">
          <source>Container</source>
          <target>Container</target>
        </segment>
      </unit>
      <unit id="1596">
        <segment state="initial">
          <source>Binaries</source>
          <target>Binaries</target>
        </segment>
      </unit>
      <unit id="1597">
        <segment state="initial">
          <source>Settings</source>
          <target>Settings</target>
        </segment>
      </unit>
      <unit id="1598">
        <segment state="initial">
          <source>Data</source>
          <target>Data</target>
        </segment>
      </unit>
      <unit id="1599">
        <segment state="initial">
          <source>You can either:</source>
          <target>You can either:</target>
        </segment>
      </unit>
      <unit id="1600">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Specify up to three <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> — one “Binaries” role element, one “Settings” role element and one “Data” role element.</source>
          <target>Specify up to three <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> elements within a <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> — one “Binaries” role element, one “Settings” role element and one “Data” role element.</target>
        </segment>
      </unit>
      <unit id="1601">
        <segment state="initial">
          <source>These parameters do not change the migration behavior — their only purpose is to help you categorize the settings that you are migrating.</source>
          <target>These parameters do not change the migration behavior — their only purpose is to help you categorize the settings that you are migrating.</target>
        </segment>
      </unit>
      <unit id="1602">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can nest these <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> elements, but each nested element must be of the same role parameter.</source>
          <target>You can nest these <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> elements, but each nested element must be of the same role parameter.</target>
        </segment>
      </unit>
      <unit id="1603">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Specify one “Container” <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element within a <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</source>
          <target>Specify one “Container” <ph dataRef="id1" id="ph1" />role<ph dataRef="id2" id="ph2" /> element within a <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1604">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>In this case, you cannot specify any child <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements, only other <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>In this case, you cannot specify any child <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements, only other <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1605">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>And each child <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element must have the same type as that of parent <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</source>
          <target>And each child <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element must have the same type as that of parent <ph dataRef="id3" id="ph3" />component<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1606">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1607">
        <segment state="initial">
          <source>The following example is from the MigUser.xml file.</source>
          <target>The following example is from the MigUser.xml file.</target>
        </segment>
      </unit>
      <unit id="1608">
        <segment state="initial">
          <source>For more examples, see the MigApp.xml file:</source>
          <target>For more examples, see the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1609">
        <segment state="initial">
          <source>rules</source>
          <target>rules</target>
        </segment>
      </unit>
      <unit id="1610">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</source>
          <target>The <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element is required in a custom .xml file.</target>
        </segment>
      </unit>
      <unit id="1611">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>This element contains rules that will run during the migration if the parent <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element is selected, unless the child <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element, if present, evaluates to FALSE.</source>
          <target>This element contains rules that will run during the migration if the parent <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element is selected, unless the child <ph dataRef="id3" id="ph3" />conditions<ph dataRef="id4" id="ph4" /> element, if present, evaluates to FALSE.</target>
        </segment>
      </unit>
      <unit id="1612">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>For each <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element there can be multiple child <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1613">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> unlimited</target>
        </segment>
      </unit>
      <unit id="1614">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#role)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#rules)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#namedelements)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />role<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />rules<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />namedElements<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="1615">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#include)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />include<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />include<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1616">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#exclude)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#unconditionalexclude)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
          <data id="id15">[</data>
          <data id="id16">](#merge)</data>
          <data id="id17">&amp;lt;</data>
          <data id="id18">&amp;gt;</data>
          <data id="id19">[</data>
          <data id="id20">](#contentmodify)</data>
          <data id="id21">&amp;lt;</data>
          <data id="id22">&amp;gt;</data>
          <data id="id23">[</data>
          <data id="id24">](#locationmodify)</data>
          <data id="id25">&amp;lt;</data>
          <data id="id26">&amp;gt;</data>
          <data id="id27">[</data>
          <data id="id28">](#destinationcleanup)</data>
          <data id="id29">&amp;lt;</data>
          <data id="id30">&amp;gt;</data>
          <data id="id31">[</data>
          <data id="id32">](#addobjects)</data>
          <data id="id33">&amp;lt;</data>
          <data id="id34">&amp;gt;</data>
          <data id="id35">[</data>
          <data id="id36">](#externalprocess)</data>
          <data id="id37">&amp;lt;</data>
          <data id="id38">&amp;gt;</data>
          <data id="id39">[</data>
          <data id="id40">](#processing)</data>
          <data id="id41">&amp;lt;</data>
          <data id="id42">&amp;gt;</data>
          <data id="id43">[</data>
          <data id="id44">](#includeattributes)</data>
          <data id="id45">&amp;lt;</data>
          <data id="id46">&amp;gt;</data>
          <data id="id47">[</data>
          <data id="id48">](#excludeattributes)</data>
          <data id="id49">&amp;lt;</data>
          <data id="id50">&amp;gt;</data>
          <data id="id51">[</data>
          <data id="id52">](#conditions)</data>
          <data id="id53">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />exclude<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />unconditionalExclude<ph dataRef="id14" id="ph6" /></pc>,<pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />merge<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />contentModify<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />locationModify<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />destinationCleanup<ph dataRef="id30" id="ph14" /></pc>, <pc dataRefEnd="id32" dataRefStart="id31" id="p9"><ph dataRef="id33" id="ph15" />addObjects<ph dataRef="id34" id="ph16" /></pc>, <pc dataRefEnd="id36" dataRefStart="id35" id="p10"><ph dataRef="id37" id="ph17" />externalProcess<ph dataRef="id38" id="ph18" /></pc>, <pc dataRefEnd="id40" dataRefStart="id39" id="p11"><ph dataRef="id41" id="ph19" />processing<ph dataRef="id42" id="ph20" /></pc>, <pc dataRefEnd="id44" dataRefStart="id43" id="p12"><ph dataRef="id45" id="ph21" />includeAttributes<ph dataRef="id46" id="ph22" /></pc>, <pc dataRefEnd="id48" dataRefStart="id47" id="p13"><ph dataRef="id49" id="ph23" />excludeAttributes<ph dataRef="id50" id="ph24" /></pc>, <pc dataRefEnd="id52" dataRefStart="id51" id="p14">conditions</pc>, <ph dataRef="id53" id="ph25" />detects</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Optional child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />exclude<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />unconditionalExclude<ph dataRef="id14" id="ph6" /></pc>,<pc dataRefEnd="id16" dataRefStart="id15" id="p5"><ph dataRef="id17" id="ph7" />merge<ph dataRef="id18" id="ph8" /></pc>, <pc dataRefEnd="id20" dataRefStart="id19" id="p6"><ph dataRef="id21" id="ph9" />contentModify<ph dataRef="id22" id="ph10" /></pc>, <pc dataRefEnd="id24" dataRefStart="id23" id="p7"><ph dataRef="id25" id="ph11" />locationModify<ph dataRef="id26" id="ph12" /></pc>, <pc dataRefEnd="id28" dataRefStart="id27" id="p8"><ph dataRef="id29" id="ph13" />destinationCleanup<ph dataRef="id30" id="ph14" /></pc>, <pc dataRefEnd="id32" dataRefStart="id31" id="p9"><ph dataRef="id33" id="ph15" />addObjects<ph dataRef="id34" id="ph16" /></pc>, <pc dataRefEnd="id36" dataRefStart="id35" id="p10"><ph dataRef="id37" id="ph17" />externalProcess<ph dataRef="id38" id="ph18" /></pc>, <pc dataRefEnd="id40" dataRefStart="id39" id="p11"><ph dataRef="id41" id="ph19" />processing<ph dataRef="id42" id="ph20" /></pc>, <pc dataRefEnd="id44" dataRefStart="id43" id="p12"><ph dataRef="id45" id="ph21" />includeAttributes<ph dataRef="id46" id="ph22" /></pc>, <pc dataRefEnd="id48" dataRefStart="id47" id="p13"><ph dataRef="id49" id="ph23" />excludeAttributes<ph dataRef="id50" id="ph24" /></pc>, <pc dataRefEnd="id52" dataRefStart="id51" id="p14">conditions</pc>, <ph dataRef="id53" id="ph25" />detects</target>
        </segment>
      </unit>
      <unit id="1617">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1618">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>rules name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</source>
          <target>rules name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" context="User|System|UserAndSystem"</target>
        </segment>
      </unit>
      <unit id="1619">
        <segment state="initial">
          <source>/rules</source>
          <target>/rules</target>
        </segment>
      </unit>
      <unit id="1620">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1621">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1622">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1623">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="1624">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Yes, when <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</source>
          <target>Yes, when <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> is a child to <ph dataRef="id3" id="ph3" />namedElements</target>
        </segment>
      </unit>
      <unit id="1625">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>No, when <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> is a child to any other element</source>
          <target>No, when <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> is a child to any other element</target>
        </segment>
      </unit>
      <unit id="1626">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, any child elements are not processed.</source>
          <target>When <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> is specified, any child elements are not processed.</target>
        </segment>
      </unit>
      <unit id="1627">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Instead, any other <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> are processed.</source>
          <target>Instead, any other <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements with the same name that are declared within <ph dataRef="id3" id="ph3" />namedElements<ph dataRef="id4" id="ph4" /> are processed.</target>
        </segment>
      </unit>
      <unit id="1628">
        <segment state="initial">
          <source>context</source>
          <target>context</target>
        </segment>
      </unit>
      <unit id="1629">
        <segment state="initial">
          <source>No</source>
          <target>No</target>
        </segment>
      </unit>
      <unit id="1630">
        <segment state="initial">
          <source>(default = UserAndSystem)</source>
          <target>(default = UserAndSystem)</target>
        </segment>
      </unit>
      <unit id="1631">
        <segment state="initial">
          <source>Defines the scope of this parameter — whether to process this component in the context of the specific user, across the entire operating system, or both.</source>
          <target>Defines the scope of this parameter — whether to process this component in the context of the specific user, across the entire operating system, or both.</target>
        </segment>
      </unit>
      <unit id="1632">
        <segment state="initial">
          <source>The largest possible scope is set by the component element.</source>
          <target>The largest possible scope is set by the component element.</target>
        </segment>
      </unit>
      <unit id="1633">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it has a context of User.</source>
          <target>For example, if a <ph dataRef="id1" id="ph1" />component<ph dataRef="id2" id="ph2" /> element has a context of User and a <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> element had a context of UserAndSystem, then the <ph dataRef="id5" id="ph5" />rules<ph dataRef="id6" id="ph6" /> element would act as though it has a context of User.</target>
        </segment>
      </unit>
      <unit id="1634">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> had a context of System, it would act as though <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> was not there.</source>
          <target>If <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> had a context of System, it would act as though <ph dataRef="id3" id="ph3" />rules<ph dataRef="id4" id="ph4" /> was not there.</target>
        </segment>
      </unit>
      <unit id="1635">
        <segment state="initial">
          <source>User.</source>
          <target>User.</target>
        </segment>
      </unit>
      <unit id="1636">
        <segment state="initial">
          <source>Evaluates the variables for each user.</source>
          <target>Evaluates the variables for each user.</target>
        </segment>
      </unit>
      <unit id="1637">
        <segment state="initial">
          <source>System.</source>
          <target>System.</target>
        </segment>
      </unit>
      <unit id="1638">
        <segment state="initial">
          <source>Evaluates the variables only once for the system.</source>
          <target>Evaluates the variables only once for the system.</target>
        </segment>
      </unit>
      <unit id="1639">
        <segment state="initial">
          <source>UserAndSystem.</source>
          <target>UserAndSystem.</target>
        </segment>
      </unit>
      <unit id="1640">
        <segment state="initial">
          <source>Evaluates the variables for the entire operating system and each user.</source>
          <target>Evaluates the variables for the entire operating system and each user.</target>
        </segment>
      </unit>
      <unit id="1641">
        <segment state="initial">
          <source>The following example is from the MigUser.xml file:</source>
          <target>The following example is from the MigUser.xml file:</target>
        </segment>
      </unit>
      <unit id="1642">
        <segment state="initial">
          <source>script</source>
          <target>script</target>
        </segment>
      </unit>
      <unit id="1643">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The return value that is required by <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> depends on the parent element.</source>
          <target>The return value that is required by <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> depends on the parent element.</target>
        </segment>
      </unit>
      <unit id="1644">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#variable)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#objectset)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#processing)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Once for <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>, unlimited for <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />objectSet<ph dataRef="id10" id="ph4" /></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />processing<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Once for <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>, unlimited for <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />objectSet<ph dataRef="id10" id="ph4" /></pc> and <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />processing<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="1645">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#variable)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#processing)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />variable<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />processing<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>, <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />variable<ph dataRef="id10" id="ph4" /></pc>, <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />processing<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="1646">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1647">
        <segment state="initial">
          <source>Syntax and helper functions:</source>
          <target>Syntax and helper functions:</target>
        </segment>
      </unit>
      <unit id="1648">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>General Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">ScriptWithArguments</pc><ph dataRef="id5" id="ph3" />/script</source>
          <target>General Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /><pc dataRefEnd="id4" dataRefStart="id3" id="p1">ScriptWithArguments</pc><ph dataRef="id5" id="ph3" />/script</target>
        </segment>
      </unit>
      <unit id="1649">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#scriptfunctions)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetStringContent</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />variable<ph dataRef="id6" id="ph4" />.</source>
          <target>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GetStringContent</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />variable<ph dataRef="id6" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1650">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GetStringContent("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectType</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">EncodedLocationPattern</pc>", "<pc dataRefEnd="id8" dataRefStart="id7" id="p3">ExpandContent</pc>")<ph dataRef="id9" id="ph3" />/script</source>
          <target>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GetStringContent("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectType</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">EncodedLocationPattern</pc>", "<pc dataRefEnd="id8" dataRefStart="id7" id="p3">ExpandContent</pc>")<ph dataRef="id9" id="ph3" />/script</target>
        </segment>
      </unit>
      <unit id="1651">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1652">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#scriptfunctions)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateUserPatterns</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" />.</source>
          <target>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateUserPatterns</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1653">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GenerateUserPatterns("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectType</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">EncodedLocationPattern</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p3">ProcessCurrentUser</pc>")<ph dataRef="id9" id="ph3" />/script</source>
          <target>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GenerateUserPatterns("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ObjectType</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">EncodedLocationPattern</pc>","<pc dataRefEnd="id8" dataRefStart="id7" id="p3">ProcessCurrentUser</pc>")<ph dataRef="id9" id="ph3" />/script</target>
        </segment>
      </unit>
      <unit id="1654">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1655">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#scriptfunctions)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateDrivePatterns</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" />.</source>
          <target>You can use <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GenerateDrivePatterns</pc> when <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> is within <ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1656">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
          <data id="id7">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GenerateDrivePatterns("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">PatternSegment</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">DriveType</pc>")<ph dataRef="id7" id="ph3" />/script</source>
          <target>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.GenerateDrivePatterns("<pc dataRefEnd="id4" dataRefStart="id3" id="p1">PatternSegment</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p2">DriveType</pc>")<ph dataRef="id7" id="ph3" />/script</target>
        </segment>
      </unit>
      <unit id="1657">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1658">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#scriptfunctions)</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple executing scripts</pc> with <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> elements that are within <ph dataRef="id5" id="ph3" />processing<ph dataRef="id6" id="ph4" /> elements: AskForLogoff, ConvertToShortFileName, KillExplorer, RemoveEmptyDirectories, RestartExplorer, RegisterFonts, StartService, StopService, SyncSCM.</source>
          <target>You can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Simple executing scripts</pc> with <ph dataRef="id3" id="ph1" />script<ph dataRef="id4" id="ph2" /> elements that are within <ph dataRef="id5" id="ph3" />processing<ph dataRef="id6" id="ph4" /> elements: AskForLogoff, ConvertToShortFileName, KillExplorer, RemoveEmptyDirectories, RestartExplorer, RegisterFonts, StartService, StopService, SyncSCM.</target>
        </segment>
      </unit>
      <unit id="1659">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ExecutingScript</pc><ph dataRef="id5" id="ph3" />/script</source>
          <target>Syntax: <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" />MigXmlHelper.<pc dataRefEnd="id4" dataRefStart="id3" id="p1">ExecutingScript</pc><ph dataRef="id5" id="ph3" />/script</target>
        </segment>
      </unit>
      <unit id="1660">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1661">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1662">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1663">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1664">
        <segment state="initial">
          <source>ScriptWithArguments</source>
          <target>ScriptWithArguments</target>
        </segment>
      </unit>
      <unit id="1665">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1666">
        <segment state="initial">
          <source>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</source>
          <target>A script followed by any number of string arguments that are separated by a comma and enclosed in parenthesis.</target>
        </segment>
      </unit>
      <unit id="1667">
        <segment state="initial">
          <source>For example</source>
          <target>For example</target>
        </segment>
      </unit>
      <unit id="1668">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</source>
          <target>The script will be called for each object that is enumerated by the object sets in the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rule.</target>
        </segment>
      </unit>
      <unit id="1669">
        <segment state="initial">
          <source>The filter script returns a Boolean value.</source>
          <target>The filter script returns a Boolean value.</target>
        </segment>
      </unit>
      <unit id="1670">
        <segment state="initial">
          <source>If the return value is TRUE, the object will be migrated.</source>
          <target>If the return value is TRUE, the object will be migrated.</target>
        </segment>
      </unit>
      <unit id="1671">
        <segment state="initial">
          <source>If it is FALSE, it will not be migrated.</source>
          <target>If it is FALSE, it will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1672">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The return value that is required by <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> depends on the parent element.</source>
          <target>The return value that is required by <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> depends on the parent element.</target>
        </segment>
      </unit>
      <unit id="1673">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When used within <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" />, the return value must be a string.</source>
          <target>When used within <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" />, the return value must be a string.</target>
        </segment>
      </unit>
      <unit id="1674">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When used within <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" />, the return value must be a two-dimensional array of strings.</source>
          <target>When used within <ph dataRef="id1" id="ph1" />objectSet<ph dataRef="id2" id="ph2" />, the return value must be a two-dimensional array of strings.</target>
        </segment>
      </unit>
      <unit id="1675">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>When used within <ph dataRef="id1" id="ph1" />location<ph dataRef="id2" id="ph2" />, the return value must be a valid location that aligns with the type attribute of <ph dataRef="id3" id="ph3" />location<ph dataRef="id4" id="ph4" />.</source>
          <target>When used within <ph dataRef="id1" id="ph1" />location<ph dataRef="id2" id="ph2" />, the return value must be a valid location that aligns with the type attribute of <ph dataRef="id3" id="ph3" />location<ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1676">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&amp;quot;&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if <ph dataRef="id1" id="ph1" />location type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />, the child script element, if specified, must be a valid file location.</source>
          <target>For example, if <ph dataRef="id1" id="ph1" />location type=<ph dataRef="id2" id="ph2" />File<ph dataRef="id3" id="ph3" />, the child script element, if specified, must be a valid file location.</target>
        </segment>
      </unit>
      <unit id="1677">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="1678">
        <segment state="initial">
          <source>If you are migrating a file that has a bracket character ([ or ]) in the file name, insert the carrot (^) character directly before the bracket for it to be valid.</source>
          <target>If you are migrating a file that has a bracket character ([ or ]) in the file name, insert the carrot (^) character directly before the bracket for it to be valid.</target>
        </segment>
      </unit>
      <unit id="1679">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">&amp;quot;</data>
          <data id="id3">&lt;code&gt;&amp;lt;pattern type=&amp;quot;File&amp;quot;&amp;gt;c:\documents\mydocs [file^].txt]&amp;lt;/pattern&amp;gt; &lt;/code&gt;</data>
          <data id="id4">&lt;code&gt;&amp;lt;pattern type=&amp;quot;File&amp;quot;&amp;gt;c:\documents\mydocs [file].txt]&amp;lt;/pattern&amp;gt;&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if there is a file named <ph dataRef="id1" id="ph1" />file].txt<ph dataRef="id2" id="ph2" />, specify <ph dataRef="id3" id="ph3" />instead of <ph dataRef="id4" id="ph4" />.</source>
          <target>For example, if there is a file named <ph dataRef="id1" id="ph1" />file].txt<ph dataRef="id2" id="ph2" />, specify <ph dataRef="id3" id="ph3" />instead of <ph dataRef="id4" id="ph4" />.</target>
        </segment>
      </unit>
      <unit id="1680">
        <segment state="initial">
          <source>Examples:</source>
          <target>Examples:</target>
        </segment>
      </unit>
      <unit id="1681">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>To migrate the Sample.doc file from any drive on the source computer, use <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> as follows.</source>
          <target>To migrate the Sample.doc file from any drive on the source computer, use <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> as follows.</target>
        </segment>
      </unit>
      <unit id="1682">
        <segment state="initial">
          <source>If multiple files exist with the same name, all such files will get migrated.</source>
          <target>If multiple files exist with the same name, all such files will get migrated.</target>
        </segment>
      </unit>
      <unit id="1683">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-exclude-files-and-settings.md)</data>
          <data id="id3">[</data>
          <data id="id4">](usmt-reroute-files-and-settings.md)</data>
          <data id="id5">[</data>
          <data id="id6">](usmt-custom-xml-examples.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more examples of how to use this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reroute Files and Settings</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Custom XML Examples</pc>.</source>
          <target>For more examples of how to use this element, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>, <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Reroute Files and Settings</pc>, and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Custom XML Examples</pc>.</target>
        </segment>
      </unit>
      <unit id="1684">
        <originalData>
          <data id="id1">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>script<ph dataRef="id1" id="ph1" /> functions</source>
          <target>script<ph dataRef="id1" id="ph1" /> functions</target>
        </segment>
      </unit>
      <unit id="1685">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the following functions with the <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> element</source>
          <target>You can use the following functions with the <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> element</target>
        </segment>
      </unit>
      <unit id="1686">
        <segment state="initial">
          <source>String and pattern generating functions</source>
          <target>String and pattern generating functions</target>
        </segment>
      </unit>
      <unit id="1687">
        <segment state="initial">
          <source>Simple executing scripts</source>
          <target>Simple executing scripts</target>
        </segment>
      </unit>
      <unit id="1688">
        <segment state="initial">
          <source>String and pattern generating functions</source>
          <target>String and pattern generating functions</target>
        </segment>
      </unit>
      <unit id="1689">
        <segment state="initial">
          <source>These functions return either a string or a pattern.</source>
          <target>These functions return either a string or a pattern.</target>
        </segment>
      </unit>
      <unit id="1690">
        <segment state="initial">
          <source>GetStringContent</source>
          <target>GetStringContent</target>
        </segment>
      </unit>
      <unit id="1691">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use GetStringContent with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <ph dataRef="id3" id="ph3" />variable<ph dataRef="id4" id="ph4" /> elements.</source>
          <target>You can use GetStringContent with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <ph dataRef="id3" id="ph3" />variable<ph dataRef="id4" id="ph4" /> elements.</target>
        </segment>
      </unit>
      <unit id="1692">
        <segment state="initial">
          <source>If possible, this function returns the string representation of the given object.</source>
          <target>If possible, this function returns the string representation of the given object.</target>
        </segment>
      </unit>
      <unit id="1693">
        <segment state="initial">
          <source>Otherwise, it returns NULL.</source>
          <target>Otherwise, it returns NULL.</target>
        </segment>
      </unit>
      <unit id="1694">
        <segment state="initial">
          <source>For file objects this function always returns NULL.</source>
          <target>For file objects this function always returns NULL.</target>
        </segment>
      </unit>
      <unit id="1695">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: GetStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>", "<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ExpandContent</pc>")</source>
          <target>Syntax: GetStringContent("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>", "<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ExpandContent</pc>")</target>
        </segment>
      </unit>
      <unit id="1696">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1697">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1698">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1699">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="1700">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1701">
        <segment state="initial">
          <source>The type of object.</source>
          <target>The type of object.</target>
        </segment>
      </unit>
      <unit id="1702">
        <segment state="initial">
          <source>Can be Registry or Ini (for an .ini file).</source>
          <target>Can be Registry or Ini (for an .ini file).</target>
        </segment>
      </unit>
      <unit id="1703">
        <segment state="initial">
          <source>EncodedLocationPattern</source>
          <target>EncodedLocationPattern</target>
        </segment>
      </unit>
      <unit id="1704">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1705">
        <segment state="initial">
          <source>If type of object is Registry, EncodedLocationPattern must be a valid registry path.</source>
          <target>If type of object is Registry, EncodedLocationPattern must be a valid registry path.</target>
        </segment>
      </unit>
      <unit id="1706">
        <segment state="initial">
          <source>For example, HKLM\SOFTWARE\MyKey[].</source>
          <target>For example, HKLM\SOFTWARE\MyKey[].</target>
        </segment>
      </unit>
      <unit id="1707">
        <segment state="initial">
          <source>If the type of object is Ini, then EncodedLocationPattern must be in the following format:</source>
          <target>If the type of object is Ini, then EncodedLocationPattern must be in the following format:</target>
        </segment>
      </unit>
      <unit id="1708">
        <segment state="initial">
          <source>IniFilePath|SectionName[SettingName]</source>
          <target>IniFilePath|SectionName[SettingName]</target>
        </segment>
      </unit>
      <unit id="1709">
        <segment state="initial">
          <source>ExpandContent</source>
          <target>ExpandContent</target>
        </segment>
      </unit>
      <unit id="1710">
        <segment state="initial">
          <source>No (default=TRUE)</source>
          <target>No (default=TRUE)</target>
        </segment>
      </unit>
      <unit id="1711">
        <segment state="initial">
          <source>Can be TRUE or FALSE.</source>
          <target>Can be TRUE or FALSE.</target>
        </segment>
      </unit>
      <unit id="1712">
        <segment state="initial">
          <source>If FALSE, then the given location will not be expanded before it is returned.</source>
          <target>If FALSE, then the given location will not be expanded before it is returned.</target>
        </segment>
      </unit>
      <unit id="1713">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1714">
        <segment state="initial">
          <source>GenerateDrivePatterns</source>
          <target>GenerateDrivePatterns</target>
        </segment>
      </unit>
      <unit id="1715">
        <segment state="initial">
          <source>The GenerateDrivePatterns function will iterate all of the available drives and select the ones that match the requested drive type.</source>
          <target>The GenerateDrivePatterns function will iterate all of the available drives and select the ones that match the requested drive type.</target>
        </segment>
      </unit>
      <unit id="1716">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>It will then concatenate the selected drives with the end part of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc> to form a full encoded file pattern.</source>
          <target>It will then concatenate the selected drives with the end part of <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc> to form a full encoded file pattern.</target>
        </segment>
      </unit>
      <unit id="1717">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">`Path [file.txt]`</data>
          <data id="id4">`Fixed`</data>
          <data id="id5">`C:\Path [file.txt]`</data>
        </originalData>
        <segment state="initial">
          <source>For example, if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc> is <ph dataRef="id3" id="ph1" /> and DriveType is <ph dataRef="id4" id="ph2" />, then the function will generate <ph dataRef="id5" id="ph3" />, and other patterns if there are fixed drives other than C:.</source>
          <target>For example, if <pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc> is <ph dataRef="id3" id="ph1" /> and DriveType is <ph dataRef="id4" id="ph2" />, then the function will generate <ph dataRef="id5" id="ph3" />, and other patterns if there are fixed drives other than C:.</target>
        </segment>
      </unit>
      <unit id="1718">
        <segment state="initial">
          <source>You cannot specify environment variables with this function.</source>
          <target>You cannot specify environment variables with this function.</target>
        </segment>
      </unit>
      <unit id="1719">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;/&amp;lt;</data>
          <data id="id9">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use GenerateDrivePatterns with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" /></pc> that are within <ph dataRef="id7" id="ph5" />include<ph dataRef="id8" id="ph6" />exclude<ph dataRef="id9" id="ph7" />.</source>
          <target>You can use GenerateDrivePatterns with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <pc dataRefEnd="id4" dataRefStart="id3" id="p1"><ph dataRef="id5" id="ph3" />objectSet<ph dataRef="id6" id="ph4" /></pc> that are within <ph dataRef="id7" id="ph5" />include<ph dataRef="id8" id="ph6" />exclude<ph dataRef="id9" id="ph7" />.</target>
        </segment>
      </unit>
      <unit id="1720">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax: GenerateDrivePatterns("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DriveType</pc>")</source>
          <target>Syntax: GenerateDrivePatterns("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">PatternSegment</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">DriveType</pc>")</target>
        </segment>
      </unit>
      <unit id="1721">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1722">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1723">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1724">
        <segment state="initial">
          <source>PatternSegment</source>
          <target>PatternSegment</target>
        </segment>
      </unit>
      <unit id="1725">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1726">
        <segment state="initial">
          <source>The suffix of an encoded pattern.</source>
          <target>The suffix of an encoded pattern.</target>
        </segment>
      </unit>
      <unit id="1727">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">\&amp;</data>
          <data id="id3">[</data>
          <data id="id4">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>It will be concatenated with a drive specification, such as <ph dataRef="id1" id="ph1" />c:<ph dataRef="id2" id="ph2" />quot;, to form a complete <pc dataRefEnd="id4" dataRefStart="id3" id="p1">encoded file pattern</pc>.</source>
          <target>It will be concatenated with a drive specification, such as <ph dataRef="id1" id="ph1" />c:<ph dataRef="id2" id="ph2" />quot;, to form a complete <pc dataRefEnd="id4" dataRefStart="id3" id="p1">encoded file pattern</pc>.</target>
        </segment>
      </unit>
      <unit id="1728">
        <originalData>
          <data id="id1">&amp;quot;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;quot;</data>
        </originalData>
        <segment state="initial">
          <source>For example, <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1"> [</pc>.doc]<ph dataRef="id4" id="ph2" />.</source>
          <target>For example, <ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1"> [</pc>.doc]<ph dataRef="id4" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="1729">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>PatternSegment<ph dataRef="id1" id="ph1" /> cannot be an environment variable.</source>
          <target>PatternSegment<ph dataRef="id1" id="ph1" /> cannot be an environment variable.</target>
        </segment>
      </unit>
      <unit id="1730">
        <segment state="initial">
          <source>DriveType</source>
          <target>DriveType</target>
        </segment>
      </unit>
      <unit id="1731">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1732">
        <segment state="initial">
          <source>The drive type for which the patterns are to be generated.</source>
          <target>The drive type for which the patterns are to be generated.</target>
        </segment>
      </unit>
      <unit id="1733">
        <segment state="initial">
          <source>You can specify one of:</source>
          <target>You can specify one of:</target>
        </segment>
      </unit>
      <unit id="1734">
        <segment state="initial">
          <source>Fixed</source>
          <target>Fixed</target>
        </segment>
      </unit>
      <unit id="1735">
        <segment state="initial">
          <source>CDROM</source>
          <target>CDROM</target>
        </segment>
      </unit>
      <unit id="1736">
        <segment state="initial">
          <source>Removable</source>
          <target>Removable</target>
        </segment>
      </unit>
      <unit id="1737">
        <segment state="initial">
          <source>Remote</source>
          <target>Remote</target>
        </segment>
      </unit>
      <unit id="1738">
        <segment state="initial">
          <source>See the last component in the MigUser.xml file for an example of this element.</source>
          <target>See the last component in the MigUser.xml file for an example of this element.</target>
        </segment>
      </unit>
      <unit id="1739">
        <segment state="initial">
          <source>GenerateUserPatterns</source>
          <target>GenerateUserPatterns</target>
        </segment>
      </unit>
      <unit id="1740">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The function will iterate through all users that are being migrated, excluding the currently processed user if <ph dataRef="id1" id="ph1" />ProcessCurrentUser<ph dataRef="id2" id="ph2" /> is FALSE, and will expand the specified pattern in the context of each user.</source>
          <target>The function will iterate through all users that are being migrated, excluding the currently processed user if <ph dataRef="id1" id="ph1" />ProcessCurrentUser<ph dataRef="id2" id="ph2" /> is FALSE, and will expand the specified pattern in the context of each user.</target>
        </segment>
      </unit>
      <unit id="1741">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">`GenerateUserPattens('File','%userprofile% [*.doc]','TRUE')`</data>
        </originalData>
        <segment state="initial">
          <source>For example, if users A, B and C have profiles in C:<ph dataRef="id1" id="ph1" />Documents and Settings), by calling <ph dataRef="id2" id="ph2" />, the helper function will generate the following three patterns:</source>
          <target>For example, if users A, B and C have profiles in C:<ph dataRef="id1" id="ph1" />Documents and Settings), by calling <ph dataRef="id2" id="ph2" />, the helper function will generate the following three patterns:</target>
        </segment>
      </unit>
      <unit id="1742">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\\*</data>
          <data id="id4">\[\*</data>
          <data id="id5">\]</data>
        </originalData>
        <segment state="initial">
          <source>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />A<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</source>
          <target>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />A<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</target>
        </segment>
      </unit>
      <unit id="1743">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\\*</data>
          <data id="id4">\[\*</data>
          <data id="id5">\]</data>
        </originalData>
        <segment state="initial">
          <source>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />B<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</source>
          <target>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />B<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</target>
        </segment>
      </unit>
      <unit id="1744">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\\*</data>
          <data id="id4">\[\*</data>
          <data id="id5">\]</data>
        </originalData>
        <segment state="initial">
          <source>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />C<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</source>
          <target>"C:<ph dataRef="id1" id="ph1" />Documents and Settings<ph dataRef="id2" id="ph2" />C<ph dataRef="id3" id="ph3" /><ph dataRef="id4" id="ph4" />.doc<ph dataRef="id5" id="ph5" />"</target>
        </segment>
      </unit>
      <unit id="1745">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>Syntax:GenerateUserPatterns("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ProcessCurrentUser</pc>")</source>
          <target>Syntax:GenerateUserPatterns("<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ObjectType</pc>","<pc dataRefEnd="id4" dataRefStart="id3" id="p2">EncodedLocationPattern</pc>","<pc dataRefEnd="id6" dataRefStart="id5" id="p3">ProcessCurrentUser</pc>")</target>
        </segment>
      </unit>
      <unit id="1746">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1747">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1748">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1749">
        <segment state="initial">
          <source>ObjectType</source>
          <target>ObjectType</target>
        </segment>
      </unit>
      <unit id="1750">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1751">
        <segment state="initial">
          <source>Defines the object type.</source>
          <target>Defines the object type.</target>
        </segment>
      </unit>
      <unit id="1752">
        <segment state="initial">
          <source>Can be File or Registry.</source>
          <target>Can be File or Registry.</target>
        </segment>
      </unit>
      <unit id="1753">
        <segment state="initial">
          <source>EncodedLocationPattern</source>
          <target>EncodedLocationPattern</target>
        </segment>
      </unit>
      <unit id="1754">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1755">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#locations)</data>
        </originalData>
        <segment state="initial">
          <source>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc>.</source>
          <target>The <pc dataRefEnd="id2" dataRefStart="id1" id="p1">location pattern</pc>.</target>
        </segment>
      </unit>
      <unit id="1756">
        <segment state="initial">
          <source>Environment variables are allowed.</source>
          <target>Environment variables are allowed.</target>
        </segment>
      </unit>
      <unit id="1757">
        <segment state="initial">
          <source>ProcessCurrentUser</source>
          <target>ProcessCurrentUser</target>
        </segment>
      </unit>
      <unit id="1758">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1759">
        <segment state="initial">
          <source>Can be TRUE or FALSE.</source>
          <target>Can be TRUE or FALSE.</target>
        </segment>
      </unit>
      <unit id="1760">
        <segment state="initial">
          <source>Indicates if the patterns should be generated for the current user.</source>
          <target>Indicates if the patterns should be generated for the current user.</target>
        </segment>
      </unit>
      <unit id="1761">
        <segment state="initial">
          <source>Example:</source>
          <target>Example:</target>
        </segment>
      </unit>
      <unit id="1762">
        <originalData>
          <data id="id1">\[\*</data>
          <data id="id2">\]</data>
        </originalData>
        <segment state="initial">
          <source>If GenerateUserPattens('File','%userprofile% <ph dataRef="id1" id="ph1" />.doc<ph dataRef="id2" id="ph2" />','FALSE') is called while USMT is processing user A, then this function will only generate patterns for users B and C. You can use this helper function to build complex rules.</source>
          <target>If GenerateUserPattens('File','%userprofile% <ph dataRef="id1" id="ph1" />.doc<ph dataRef="id2" id="ph2" />','FALSE') is called while USMT is processing user A, then this function will only generate patterns for users B and C. You can use this helper function to build complex rules.</target>
        </segment>
      </unit>
      <unit id="1763">
        <segment state="initial">
          <source>For example, to migrate all .doc files from the source computer — but if user X is not migrated, then do not migrate any of the .doc files from user X’s profile.</source>
          <target>For example, to migrate all .doc files from the source computer — but if user X is not migrated, then do not migrate any of the .doc files from user X’s profile.</target>
        </segment>
      </unit>
      <unit id="1764">
        <segment state="initial">
          <source>The following is example code for this scenario.</source>
          <target>The following is example code for this scenario.</target>
        </segment>
      </unit>
      <unit id="1765">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>The first <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element migrates all.doc files on the source computer with the exception of those inside C:<ph dataRef="id3" id="ph3" />Documents and Settings.</source>
          <target>The first <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element migrates all.doc files on the source computer with the exception of those inside C:<ph dataRef="id3" id="ph3" />Documents and Settings.</target>
        </segment>
      </unit>
      <unit id="1766">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>The second <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements will migrate all .doc files from C:<ph dataRef="id3" id="ph3" />Documents and Settings with the exception of the .doc files in the profiles of the other users.</source>
          <target>The second <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> elements will migrate all .doc files from C:<ph dataRef="id3" id="ph3" />Documents and Settings with the exception of the .doc files in the profiles of the other users.</target>
        </segment>
      </unit>
      <unit id="1767">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>Because the second <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element will be processed in each migrated user context, the end result will be the desired behavior.</source>
          <target>Because the second <ph dataRef="id1" id="ph1" />rules<ph dataRef="id2" id="ph2" /> element will be processed in each migrated user context, the end result will be the desired behavior.</target>
        </segment>
      </unit>
      <unit id="1768">
        <segment state="initial">
          <source>The end result is the one we expected.</source>
          <target>The end result is the one we expected.</target>
        </segment>
      </unit>
      <unit id="1769">
        <segment state="initial">
          <source>MigXmlHelper.GenerateDocPatterns</source>
          <target>MigXmlHelper.GenerateDocPatterns</target>
        </segment>
      </unit>
      <unit id="1770">
        <segment state="initial">
          <source>This helper function invokes the document finder to scan the system for all files that can be migrated.</source>
          <target>This helper function invokes the document finder to scan the system for all files that can be migrated.</target>
        </segment>
      </unit>
      <unit id="1771">
        <segment state="initial">
          <source>It can be invoked in either System or User context to focus the scan.</source>
          <target>It can be invoked in either System or User context to focus the scan.</target>
        </segment>
      </unit>
      <unit id="1772">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1773">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1774">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1775">
        <segment state="initial">
          <source>ScanProgramFiles</source>
          <target>ScanProgramFiles</target>
        </segment>
      </unit>
      <unit id="1776">
        <segment state="initial">
          <source>No (default = FALSE)</source>
          <target>No (default = FALSE)</target>
        </segment>
      </unit>
      <unit id="1777">
        <segment state="initial">
          <source>Can be TRUE or FALSE.</source>
          <target>Can be TRUE or FALSE.</target>
        </segment>
      </unit>
      <unit id="1778">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
          <data id="id3">&lt;strong&gt;</data>
          <data id="id4">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />ScanProgramFiles<ph dataRef="id2" id="ph2" /> parameter determines whether or not the document finder scans the <ph dataRef="id3" id="ph3" />Program Files<ph dataRef="id4" id="ph4" /> directory to gather registered file extensions for known applications.</source>
          <target>The <ph dataRef="id1" id="ph1" />ScanProgramFiles<ph dataRef="id2" id="ph2" /> parameter determines whether or not the document finder scans the <ph dataRef="id3" id="ph3" />Program Files<ph dataRef="id4" id="ph4" /> directory to gather registered file extensions for known applications.</target>
        </segment>
      </unit>
      <unit id="1779">
        <segment state="initial">
          <source>For example, when set to TRUE it will discover and migrate .jpg files under the Photoshop directory, if .jpg is a file extension registered to Photoshop.</source>
          <target>For example, when set to TRUE it will discover and migrate .jpg files under the Photoshop directory, if .jpg is a file extension registered to Photoshop.</target>
        </segment>
      </unit>
      <unit id="1780">
        <segment state="initial">
          <source>IncludePatterns</source>
          <target>IncludePatterns</target>
        </segment>
      </unit>
      <unit id="1781">
        <segment state="initial">
          <source>No (default = TRUE)</source>
          <target>No (default = TRUE)</target>
        </segment>
      </unit>
      <unit id="1782">
        <segment state="initial">
          <source>Can be TRUE or FALSE.</source>
          <target>Can be TRUE or FALSE.</target>
        </segment>
      </unit>
      <unit id="1783">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>TRUE will generate include patterns and can be added under the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element.</source>
          <target>TRUE will generate include patterns and can be added under the <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="1784">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>FALSE will generate exclude patterns and can be added under the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element.</source>
          <target>FALSE will generate exclude patterns and can be added under the <ph dataRef="id1" id="ph1" />exclude<ph dataRef="id2" id="ph2" /> element.</target>
        </segment>
      </unit>
      <unit id="1785">
        <segment state="initial">
          <source>SystemDrive</source>
          <target>SystemDrive</target>
        </segment>
      </unit>
      <unit id="1786">
        <segment state="initial">
          <source>No (default = FALSE)</source>
          <target>No (default = FALSE)</target>
        </segment>
      </unit>
      <unit id="1787">
        <segment state="initial">
          <source>Can be TRUE or FALSE.</source>
          <target>Can be TRUE or FALSE.</target>
        </segment>
      </unit>
      <unit id="1788">
        <segment state="initial">
          <source>If TRUE, restricts all patterns to the system drive.</source>
          <target>If TRUE, restricts all patterns to the system drive.</target>
        </segment>
      </unit>
      <unit id="1789">
        <segment state="initial">
          <source>Simple executing scripts</source>
          <target>Simple executing scripts</target>
        </segment>
      </unit>
      <unit id="1790">
        <segment state="initial">
          <source>The following scripts have no return value.</source>
          <target>The following scripts have no return value.</target>
        </segment>
      </unit>
      <unit id="1791">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the following errors with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <ph dataRef="id3" id="ph3" />processing<ph dataRef="id4" id="ph4" /> elements</source>
          <target>You can use the following errors with <ph dataRef="id1" id="ph1" />script<ph dataRef="id2" id="ph2" /> elements that are within <ph dataRef="id3" id="ph3" />processing<ph dataRef="id4" id="ph4" /> elements</target>
        </segment>
      </unit>
      <unit id="1792">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AskForLogoff()</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">AskForLogoff()</pc>.</target>
        </segment>
      </unit>
      <unit id="1793">
        <segment state="initial">
          <source>Prompts the user to log off at the end of the migration.</source>
          <target>Prompts the user to log off at the end of the migration.</target>
        </segment>
      </unit>
      <unit id="1794">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1795">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConvertToShortFileName(RegistryEncodedLocation)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ConvertToShortFileName(RegistryEncodedLocation)</pc>.</target>
        </segment>
      </unit>
      <unit id="1796">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegistryEncodedLocation</pc> is the full path of an existing file, this function will convert the file to its short file name and then it will update the registry value.</source>
          <target>If <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegistryEncodedLocation</pc> is the full path of an existing file, this function will convert the file to its short file name and then it will update the registry value.</target>
        </segment>
      </unit>
      <unit id="1797">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KillExplorer()</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">KillExplorer()</pc>.</target>
        </segment>
      </unit>
      <unit id="1798">
        <segment state="initial">
          <source>Stops Explorer.exe for the current user context.</source>
          <target>Stops Explorer.exe for the current user context.</target>
        </segment>
      </unit>
      <unit id="1799">
        <segment state="initial">
          <source>This allows access to certain keys and files that are kept open when Explorer.exe is running.</source>
          <target>This allows access to certain keys and files that are kept open when Explorer.exe is running.</target>
        </segment>
      </unit>
      <unit id="1800">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1801">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegisterFonts(FileEncodedLocation)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RegisterFonts(FileEncodedLocation)</pc>.</target>
        </segment>
      </unit>
      <unit id="1802">
        <segment state="initial">
          <source>Registers the given font or all of the fonts in the given directory.</source>
          <target>Registers the given font or all of the fonts in the given directory.</target>
        </segment>
      </unit>
      <unit id="1803">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1804">
        <segment state="initial">
          <source>RemoveEmptyDirectories (DirectoryEncodedPattern).</source>
          <target>RemoveEmptyDirectories (DirectoryEncodedPattern).</target>
        </segment>
      </unit>
      <unit id="1805">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Deletes any empty directories that match <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectoryEncodedPattern</pc> on the destination computer.</source>
          <target>Deletes any empty directories that match <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DirectoryEncodedPattern</pc> on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1806">
        <segment state="initial">
          <source>RestartExplorer().</source>
          <target>RestartExplorer().</target>
        </segment>
      </unit>
      <unit id="1807">
        <segment state="initial">
          <source>Restarts Explorer.exe at the end of the migration.</source>
          <target>Restarts Explorer.exe at the end of the migration.</target>
        </segment>
      </unit>
      <unit id="1808">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1809">
        <segment state="initial">
          <source>StartService (ServiceName, OptionalParam1, OptionalParam2,…).</source>
          <target>StartService (ServiceName, OptionalParam1, OptionalParam2,…).</target>
        </segment>
      </unit>
      <unit id="1810">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>Starts the service identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ServiceName. ServiceName</pc> is the subkey in HKLM<ph dataRef="id3" id="ph1" />System<ph dataRef="id4" id="ph2" />CurrentControlSet<ph dataRef="id5" id="ph3" />Services that holds the data for the given service.</source>
          <target>Starts the service identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ServiceName. ServiceName</pc> is the subkey in HKLM<ph dataRef="id3" id="ph1" />System<ph dataRef="id4" id="ph2" />CurrentControlSet<ph dataRef="id5" id="ph3" />Services that holds the data for the given service.</target>
        </segment>
      </unit>
      <unit id="1811">
        <segment state="initial">
          <source>The optional parameters, if any, will be passed to the StartService API.</source>
          <target>The optional parameters, if any, will be passed to the StartService API.</target>
        </segment>
      </unit>
      <unit id="1812">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=267898)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this Microsoft Web site</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">this Microsoft Web site</pc>.</target>
        </segment>
      </unit>
      <unit id="1813">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StopService (ServiceName)</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">StopService (ServiceName)</pc>.</target>
        </segment>
      </unit>
      <unit id="1814">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>Stops the service that is identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ServiceName. ServiceName</pc> is the subkey in HKLM<ph dataRef="id3" id="ph1" />System<ph dataRef="id4" id="ph2" />CurrentControlSet<ph dataRef="id5" id="ph3" />Services that holds the data for the given service.</source>
          <target>Stops the service that is identified by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ServiceName. ServiceName</pc> is the subkey in HKLM<ph dataRef="id3" id="ph1" />System<ph dataRef="id4" id="ph2" />CurrentControlSet<ph dataRef="id5" id="ph3" />Services that holds the data for the given service.</target>
        </segment>
      </unit>
      <unit id="1815">
        <segment state="initial">
          <source>SyncSCM(ServiceShortName).</source>
          <target>SyncSCM(ServiceShortName).</target>
        </segment>
      </unit>
      <unit id="1816">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\[</data>
          <data id="id6">\]</data>
        </originalData>
        <segment state="initial">
          <source>Reads the Start type value from the registry (HKLM<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" />CurrentControlSet<ph dataRef="id3" id="ph3" />Services<ph dataRef="id4" id="ph4" />ServiceShortName <ph dataRef="id5" id="ph5" />Start<ph dataRef="id6" id="ph6" />) after it is changed by the migration engine, and then synchronizes Service Control Manager (SCM) with the new value.</source>
          <target>Reads the Start type value from the registry (HKLM<ph dataRef="id1" id="ph1" />System<ph dataRef="id2" id="ph2" />CurrentControlSet<ph dataRef="id3" id="ph3" />Services<ph dataRef="id4" id="ph4" />ServiceShortName <ph dataRef="id5" id="ph5" />Start<ph dataRef="id6" id="ph6" />) after it is changed by the migration engine, and then synchronizes Service Control Manager (SCM) with the new value.</target>
        </segment>
      </unit>
      <unit id="1817">
        <segment state="initial">
          <source>text</source>
          <target>text</target>
        </segment>
      </unit>
      <unit id="1818">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>You can use the <ph dataRef="id1" id="ph1" />text<ph dataRef="id2" id="ph2" /> element to set a value for any environment variables that are inside one of the migration .xml files.</source>
          <target>You can use the <ph dataRef="id1" id="ph1" />text<ph dataRef="id2" id="ph2" /> element to set a value for any environment variables that are inside one of the migration .xml files.</target>
        </segment>
      </unit>
      <unit id="1819">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#variable)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Once in each <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc> element.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Once in each <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc> element.</target>
        </segment>
      </unit>
      <unit id="1820">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#variable)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />variable<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1821">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> None.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> None.</target>
        </segment>
      </unit>
      <unit id="1822">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1823">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>text<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">NormalText</pc><ph dataRef="id4" id="ph2" />/text</source>
          <target>text<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">NormalText</pc><ph dataRef="id4" id="ph2" />/text</target>
        </segment>
      </unit>
      <unit id="1824">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1825">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1826">
        <segment state="initial">
          <source>NormalText</source>
          <target>NormalText</target>
        </segment>
      </unit>
      <unit id="1827">
        <segment state="initial">
          <source>This is interpreted as normal text.</source>
          <target>This is interpreted as normal text.</target>
        </segment>
      </unit>
      <unit id="1828">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1829">
        <segment state="initial">
          <source>unconditionalExclude</source>
          <target>unconditionalExclude</target>
        </segment>
      </unit>
      <unit id="1830">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element excludes the specified files and registry values from the migration, regardless of the other include rules in any of the migration .xml files or in the Config.xml file.</source>
          <target>The <ph dataRef="id1" id="ph1" />unconditionalExclude<ph dataRef="id2" id="ph2" /> element excludes the specified files and registry values from the migration, regardless of the other include rules in any of the migration .xml files or in the Config.xml file.</target>
        </segment>
      </unit>
      <unit id="1831">
        <segment state="initial">
          <source>The objects declared here will not be migrated because this element takes precedence over all other rules.</source>
          <target>The objects declared here will not be migrated because this element takes precedence over all other rules.</target>
        </segment>
      </unit>
      <unit id="1832">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, even if there are explicit <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules to include .mp3 files, if you specify to exclude them with this option, then they will not be migrated.</source>
          <target>For example, even if there are explicit <ph dataRef="id1" id="ph1" />include<ph dataRef="id2" id="ph2" /> rules to include .mp3 files, if you specify to exclude them with this option, then they will not be migrated.</target>
        </segment>
      </unit>
      <unit id="1833">
        <segment state="initial">
          <source>Use this element if you want to exclude all .mp3 files from the source computer.</source>
          <target>Use this element if you want to exclude all .mp3 files from the source computer.</target>
        </segment>
      </unit>
      <unit id="1834">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>Or, if you are backing up C:<ph dataRef="id1" id="ph1" />UserData using another method, you can exclude the entire folder from the migration.</source>
          <target>Or, if you are backing up C:<ph dataRef="id1" id="ph1" />UserData using another method, you can exclude the entire folder from the migration.</target>
        </segment>
      </unit>
      <unit id="1835">
        <segment state="initial">
          <source>Use this element with caution, however, because if an application needs a file that you exclude, the application may not function properly on the destination computer.</source>
          <target>Use this element with caution, however, because if an application needs a file that you exclude, the application may not function properly on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1836">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited.</target>
        </segment>
      </unit>
      <unit id="1837">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#rules)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />rules<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1838">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#objectset)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />objectSet<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1839">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1840">
        <originalData>
          <data id="id1">&amp;gt;&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>unconditionalExclude<ph dataRef="id1" id="ph1" />/unconditionalExclude</source>
          <target>unconditionalExclude<ph dataRef="id1" id="ph1" />/unconditionalExclude</target>
        </segment>
      </unit>
      <unit id="1841">
        <segment state="initial">
          <source>The following .xml file excludes all .mp3 files from migration.</source>
          <target>The following .xml file excludes all .mp3 files from migration.</target>
        </segment>
      </unit>
      <unit id="1842">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](usmt-exclude-files-and-settings.md)</data>
        </originalData>
        <segment state="initial">
          <source>For additional examples of how to use this element, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>.</source>
          <target>For additional examples of how to use this element, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Exclude Files and Settings</pc>.</target>
        </segment>
      </unit>
      <unit id="1843">
        <segment state="initial">
          <source>variable</source>
          <target>variable</target>
        </segment>
      </unit>
      <unit id="1844">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element is required in an <ph dataRef="id3" id="ph3" />environment<ph dataRef="id4" id="ph4" /> element.</source>
          <target>The <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element is required in an <ph dataRef="id3" id="ph3" />environment<ph dataRef="id4" id="ph4" /> element.</target>
        </segment>
      </unit>
      <unit id="1845">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">&amp;lt;</data>
          <data id="id8">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>For each <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element there must be one <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />script<ph dataRef="id6" id="ph6" />, or <ph dataRef="id7" id="ph7" />text<ph dataRef="id8" id="ph8" /> element.</source>
          <target>For each <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element there must be one <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" />, <ph dataRef="id5" id="ph5" />script<ph dataRef="id6" id="ph6" />, or <ph dataRef="id7" id="ph7" />text<ph dataRef="id8" id="ph8" /> element.</target>
        </segment>
      </unit>
      <unit id="1846">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The content of the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element assigns a text value to the environment variable.</source>
          <target>The content of the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element assigns a text value to the environment variable.</target>
        </segment>
      </unit>
      <unit id="1847">
        <segment state="initial">
          <source>This element has the following three options:</source>
          <target>This element has the following three options:</target>
        </segment>
      </unit>
      <unit id="1848">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains a <ph dataRef="id3" id="ph3" />text<ph dataRef="id4" id="ph4" /> element, then the value of the variable element will be the value of the <ph dataRef="id5" id="ph5" />text<ph dataRef="id6" id="ph6" /> element.</source>
          <target>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains a <ph dataRef="id3" id="ph3" />text<ph dataRef="id4" id="ph4" /> element, then the value of the variable element will be the value of the <ph dataRef="id5" id="ph5" />text<ph dataRef="id6" id="ph6" /> element.</target>
        </segment>
      </unit>
      <unit id="1849">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains a <ph dataRef="id3" id="ph3" />script<ph dataRef="id4" id="ph4" /> element and the invocation of the script produces a non-null string, then the value of the <ph dataRef="id5" id="ph5" />variable<ph dataRef="id6" id="ph6" /> element will be the result of the script invocation.</source>
          <target>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains a <ph dataRef="id3" id="ph3" />script<ph dataRef="id4" id="ph4" /> element and the invocation of the script produces a non-null string, then the value of the <ph dataRef="id5" id="ph5" />variable<ph dataRef="id6" id="ph6" /> element will be the result of the script invocation.</target>
        </segment>
      </unit>
      <unit id="1850">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
          <data id="id3">&amp;lt;</data>
          <data id="id4">&amp;gt;</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains an <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element and the evaluation of the <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" /> element produces at least one object pattern, then the value of the first object to match the resulting object pattern will be the value of the variable element.</source>
          <target>If the <ph dataRef="id1" id="ph1" />variable<ph dataRef="id2" id="ph2" /> element contains an <ph dataRef="id3" id="ph3" />objectSet<ph dataRef="id4" id="ph4" /> element and the evaluation of the <ph dataRef="id5" id="ph5" />objectSet<ph dataRef="id6" id="ph6" /> element produces at least one object pattern, then the value of the first object to match the resulting object pattern will be the value of the variable element.</target>
        </segment>
      </unit>
      <unit id="1851">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> Unlimited</target>
        </segment>
      </unit>
      <unit id="1852">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#bkmk-environment)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />environment<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1853">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#text)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
          <data id="id7">[</data>
          <data id="id8">](#script)</data>
          <data id="id9">&amp;lt;</data>
          <data id="id10">&amp;gt;</data>
          <data id="id11">[</data>
          <data id="id12">](#objectset)</data>
          <data id="id13">&amp;lt;</data>
          <data id="id14">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc> either <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />text<ph dataRef="id6" id="ph2" /></pc>, or <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />script<ph dataRef="id10" id="ph4" /></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />objectSet<ph dataRef="id14" id="ph6" /></pc></source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Required child elements:</pc> either <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />text<ph dataRef="id6" id="ph2" /></pc>, or <pc dataRefEnd="id8" dataRefStart="id7" id="p3"><ph dataRef="id9" id="ph3" />script<ph dataRef="id10" id="ph4" /></pc>, or <pc dataRefEnd="id12" dataRefStart="id11" id="p4"><ph dataRef="id13" id="ph5" />objectSet<ph dataRef="id14" id="ph6" /></pc></target>
        </segment>
      </unit>
      <unit id="1854">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1855">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>variable name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" remap=TRUE|FALSE</source>
          <target>variable name="<pc dataRefEnd="id2" dataRefStart="id1" id="p1">ID</pc>" remap=TRUE|FALSE</target>
        </segment>
      </unit>
      <unit id="1856">
        <segment state="initial">
          <source>/variable</source>
          <target>/variable</target>
        </segment>
      </unit>
      <unit id="1857">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1858">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1859">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1860">
        <segment state="initial">
          <source>name</source>
          <target>name</target>
        </segment>
      </unit>
      <unit id="1861">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1862">
        <originalData>
          <data id="id1">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>ID<ph dataRef="id1" id="ph1" /> is a string value that is the name used to reference the environment variable.</source>
          <target>ID<ph dataRef="id1" id="ph1" /> is a string value that is the name used to reference the environment variable.</target>
        </segment>
      </unit>
      <unit id="1863">
        <originalData>
          <data id="id1">&lt;em&gt;</data>
          <data id="id2">&lt;/em&gt;</data>
        </originalData>
        <segment state="initial">
          <source>We recommend that <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> start with the component’s name to avoid namespace collisions.</source>
          <target>We recommend that <ph dataRef="id1" id="ph1" />ID<ph dataRef="id2" id="ph2" /> start with the component’s name to avoid namespace collisions.</target>
        </segment>
      </unit>
      <unit id="1864">
        <originalData>
          <data id="id1">&lt;code&gt;MyComponent.InstallPath&lt;/code&gt;</data>
        </originalData>
        <segment state="initial">
          <source>For example, if your component’s name is MyComponent, and you want a variable that is your component’s install path, you could specify <ph dataRef="id1" id="ph1" />.</source>
          <target>For example, if your component’s name is MyComponent, and you want a variable that is your component’s install path, you could specify <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="1865">
        <segment state="initial">
          <source>remap</source>
          <target>remap</target>
        </segment>
      </unit>
      <unit id="1866">
        <segment state="initial">
          <source>No, default = FALSE</source>
          <target>No, default = FALSE</target>
        </segment>
      </unit>
      <unit id="1867">
        <segment state="initial">
          <source>Specifies whether to evaluate this environment variable as a remapping environment variable.</source>
          <target>Specifies whether to evaluate this environment variable as a remapping environment variable.</target>
        </segment>
      </unit>
      <unit id="1868">
        <segment state="initial">
          <source>Objects that are located in a path that is underneath this environment variable’s value are automatically moved to where the environment variable points on the destination computer.</source>
          <target>Objects that are located in a path that is underneath this environment variable’s value are automatically moved to where the environment variable points on the destination computer.</target>
        </segment>
      </unit>
      <unit id="1869">
        <segment state="initial">
          <source>The following example is from the MigApp.xml file:</source>
          <target>The following example is from the MigApp.xml file:</target>
        </segment>
      </unit>
      <unit id="1870">
        <segment state="initial">
          <source>version</source>
          <target>version</target>
        </segment>
      </unit>
      <unit id="1871">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />version<ph dataRef="id2" id="ph2" /> element defines the version for the component, but does not affect the migration.</source>
          <target>The <ph dataRef="id1" id="ph1" />version<ph dataRef="id2" id="ph2" /> element defines the version for the component, but does not affect the migration.</target>
        </segment>
      </unit>
      <unit id="1872">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Number of occurrences:</pc> zero or one</target>
        </segment>
      </unit>
      <unit id="1873">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#component)</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Parent elements:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />component<ph dataRef="id6" id="ph2" /></pc>
          </target>
        </segment>
      </unit>
      <unit id="1874">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Child elements:</pc> none</target>
        </segment>
      </unit>
      <unit id="1875">
        <segment state="initial">
          <source>Syntax:</source>
          <target>Syntax:</target>
        </segment>
      </unit>
      <unit id="1876">
        <originalData>
          <data id="id1">&amp;gt;</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">&amp;lt;</data>
        </originalData>
        <segment state="initial">
          <source>version<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ComponentVersion</pc><ph dataRef="id4" id="ph2" />/version</source>
          <target>version<ph dataRef="id1" id="ph1" /><pc dataRefEnd="id3" dataRefStart="id2" id="p1">ComponentVersion</pc><ph dataRef="id4" id="ph2" />/version</target>
        </segment>
      </unit>
      <unit id="1877">
        <segment state="initial">
          <source>Setting</source>
          <target>Setting</target>
        </segment>
      </unit>
      <unit id="1878">
        <segment state="initial">
          <source>Required?</source>
          <target>Required?</target>
        </segment>
      </unit>
      <unit id="1879">
        <segment state="initial">
          <source>Value</source>
          <target>Value</target>
        </segment>
      </unit>
      <unit id="1880">
        <segment state="initial">
          <source>ComponentVersion</source>
          <target>ComponentVersion</target>
        </segment>
      </unit>
      <unit id="1881">
        <segment state="initial">
          <source>Yes</source>
          <target>Yes</target>
        </segment>
      </unit>
      <unit id="1882">
        <segment state="initial">
          <source>The version of the component, which can contain patterns.</source>
          <target>The version of the component, which can contain patterns.</target>
        </segment>
      </unit>
      <unit id="1883">
        <segment state="initial">
          <source>For example:</source>
          <target>For example:</target>
        </segment>
      </unit>
      <unit id="1884">
        <segment state="initial">
          <source>windowsObjects</source>
          <target>windowsObjects</target>
        </segment>
      </unit>
      <unit id="1885">
        <originalData>
          <data id="id1">&amp;lt;</data>
          <data id="id2">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>The <ph dataRef="id1" id="ph1" />windowsObjects<ph dataRef="id2" id="ph2" /> element is for USMT internal use only.</source>
          <target>The <ph dataRef="id1" id="ph1" />windowsObjects<ph dataRef="id2" id="ph2" /> element is for USMT internal use only.</target>
        </segment>
      </unit>
      <unit id="1886">
        <segment state="initial">
          <source>Do not use this element.</source>
          <target>Do not use this element.</target>
        </segment>
      </unit>
      <unit id="1887">
        <segment state="initial">
          <source>Appendix</source>
          <target>Appendix</target>
        </segment>
      </unit>
      <unit id="1888">
        <segment state="initial">
          <source>Specifying locations</source>
          <target>Specifying locations</target>
        </segment>
      </unit>
      <unit id="1889">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Specifying encoded locations</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Specifying encoded locations</pc>.</target>
        </segment>
      </unit>
      <unit id="1890">
        <segment state="initial">
          <source>The encoded location used in all of the helper functions is an unambiguous string representation for the name of an object.</source>
          <target>The encoded location used in all of the helper functions is an unambiguous string representation for the name of an object.</target>
        </segment>
      </unit>
      <unit id="1891">
        <segment state="initial">
          <source>It is composed of the node part, optionally followed by the leaf enclosed in square brackets.</source>
          <target>It is composed of the node part, optionally followed by the leaf enclosed in square brackets.</target>
        </segment>
      </unit>
      <unit id="1892">
        <segment state="initial">
          <source>This makes a clear distinction between nodes and leaves.</source>
          <target>This makes a clear distinction between nodes and leaves.</target>
        </segment>
      </unit>
      <unit id="1893">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">`c:\Windows[Notepad.exe]`</data>
        </originalData>
        <segment state="initial">
          <source>For example, specify the file C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />Notepad.exe like this: <ph dataRef="id3" id="ph3" />.</source>
          <target>For example, specify the file C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />Notepad.exe like this: <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="1894">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">`c:\Windows\System32`</data>
        </originalData>
        <segment state="initial">
          <source>Similarly, specify the directory C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 like this: <ph dataRef="id3" id="ph3" />.</source>
          <target>Similarly, specify the directory C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32 like this: <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="1895">
        <originalData>
          <data id="id1">\[\]</data>
        </originalData>
        <segment state="initial">
          <source>(Notice the absence of the <ph dataRef="id1" id="ph1" /> construct.)</source>
          <target>(Notice the absence of the <ph dataRef="id1" id="ph1" /> construct.)</target>
        </segment>
      </unit>
      <unit id="1896">
        <segment state="initial">
          <source>Representing the registry is very similar.</source>
          <target>Representing the registry is very similar.</target>
        </segment>
      </unit>
      <unit id="1897">
        <originalData>
          <data id="id1">\[\]</data>
        </originalData>
        <segment state="initial">
          <source>The default value of a registry key is represented as an empty <ph dataRef="id1" id="ph1" /> construct.</source>
          <target>The default value of a registry key is represented as an empty <ph dataRef="id1" id="ph1" /> construct.</target>
        </segment>
      </unit>
      <unit id="1898">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">`HKLM\SOFTWARE\MyKey[]`</data>
        </originalData>
        <segment state="initial">
          <source>For example, the default value for the HKLM<ph dataRef="id1" id="ph1" />SOFTWARE<ph dataRef="id2" id="ph2" />MyKey registry key will be <ph dataRef="id3" id="ph3" />.</source>
          <target>For example, the default value for the HKLM<ph dataRef="id1" id="ph1" />SOFTWARE<ph dataRef="id2" id="ph2" />MyKey registry key will be <ph dataRef="id3" id="ph3" />.</target>
        </segment>
      </unit>
      <unit id="1899">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Specifying location patterns</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Specifying location patterns</pc>.</target>
        </segment>
      </unit>
      <unit id="1900">
        <segment state="initial">
          <source>You specify a location pattern in a way that is similar to how you specify an actual location.</source>
          <target>You specify a location pattern in a way that is similar to how you specify an actual location.</target>
        </segment>
      </unit>
      <unit id="1901">
        <segment state="initial">
          <source>The exception is that both the node and leaf part accept patterns.</source>
          <target>The exception is that both the node and leaf part accept patterns.</target>
        </segment>
      </unit>
      <unit id="1902">
        <segment state="initial">
          <source>However, a pattern from the node does not extend to the leaf.</source>
          <target>However, a pattern from the node does not extend to the leaf.</target>
        </segment>
      </unit>
      <unit id="1903">
        <originalData>
          <data id="id1">`c:\Windows\*`</data>
        </originalData>
        <segment state="initial">
          <source>For example, the pattern <ph dataRef="id1" id="ph1" /> will match the Windows directory and all subdirectories.</source>
          <target>For example, the pattern <ph dataRef="id1" id="ph1" /> will match the Windows directory and all subdirectories.</target>
        </segment>
      </unit>
      <unit id="1904">
        <segment state="initial">
          <source>But it will not match any of the files in those directories.</source>
          <target>But it will not match any of the files in those directories.</target>
        </segment>
      </unit>
      <unit id="1905">
        <originalData>
          <data id="id1">`c:\Windows\*[*]`</data>
        </originalData>
        <segment state="initial">
          <source>To match the files as well, you must specify <ph dataRef="id1" id="ph1" />.</source>
          <target>To match the files as well, you must specify <ph dataRef="id1" id="ph1" />.</target>
        </segment>
      </unit>
      <unit id="1906">
        <segment state="initial">
          <source>Internal USMT functions</source>
          <target>Internal USMT functions</target>
        </segment>
      </unit>
      <unit id="1907">
        <segment state="initial">
          <source>The following functions are for internal USMT use only.</source>
          <target>The following functions are for internal USMT use only.</target>
        </segment>
      </unit>
      <unit id="1908">
        <segment state="initial">
          <source>Do not use them in an .xml file.</source>
          <target>Do not use them in an .xml file.</target>
        </segment>
      </unit>
      <unit id="1909">
        <segment state="initial">
          <source>AntiAlias</source>
          <target>AntiAlias</target>
        </segment>
      </unit>
      <unit id="1910">
        <segment state="initial">
          <source>ConvertScreenSaver</source>
          <target>ConvertScreenSaver</target>
        </segment>
      </unit>
      <unit id="1911">
        <segment state="initial">
          <source>ConvertShowIEOnDesktop</source>
          <target>ConvertShowIEOnDesktop</target>
        </segment>
      </unit>
      <unit id="1912">
        <segment state="initial">
          <source>ConvertToOfficeLangID</source>
          <target>ConvertToOfficeLangID</target>
        </segment>
      </unit>
      <unit id="1913">
        <segment state="initial">
          <source>MigrateActiveDesktop</source>
          <target>MigrateActiveDesktop</target>
        </segment>
      </unit>
      <unit id="1914">
        <segment state="initial">
          <source>MigrateAppearanceUPM</source>
          <target>MigrateAppearanceUPM</target>
        </segment>
      </unit>
      <unit id="1915">
        <segment state="initial">
          <source>MigrateDisplayCS</source>
          <target>MigrateDisplayCS</target>
        </segment>
      </unit>
      <unit id="1916">
        <segment state="initial">
          <source>MigrateDisplaySS</source>
          <target>MigrateDisplaySS</target>
        </segment>
      </unit>
      <unit id="1917">
        <segment state="initial">
          <source>MigrateIEAutoSearch</source>
          <target>MigrateIEAutoSearch</target>
        </segment>
      </unit>
      <unit id="1918">
        <segment state="initial">
          <source>MigrateMouseUPM</source>
          <target>MigrateMouseUPM</target>
        </segment>
      </unit>
      <unit id="1919">
        <segment state="initial">
          <source>MigrateSoundSysTray</source>
          <target>MigrateSoundSysTray</target>
        </segment>
      </unit>
      <unit id="1920">
        <segment state="initial">
          <source>MigrateTaskBarSS</source>
          <target>MigrateTaskBarSS</target>
        </segment>
      </unit>
      <unit id="1921">
        <segment state="initial">
          <source>SetPstPathInMapiStruc</source>
          <target>SetPstPathInMapiStruc</target>
        </segment>
      </unit>
      <unit id="1922">
        <segment state="initial">
          <source>Valid version tags</source>
          <target>Valid version tags</target>
        </segment>
      </unit>
      <unit id="1923">
        <segment state="initial">
          <source>You can use the following version tags with various helper functions:</source>
          <target>You can use the following version tags with various helper functions:</target>
        </segment>
      </unit>
      <unit id="1924">
        <segment state="initial">
          <source>“CompanyName”</source>
          <target>“CompanyName”</target>
        </segment>
      </unit>
      <unit id="1925">
        <segment state="initial">
          <source>“FileDescription”</source>
          <target>“FileDescription”</target>
        </segment>
      </unit>
      <unit id="1926">
        <segment state="initial">
          <source>“FileVersion”</source>
          <target>“FileVersion”</target>
        </segment>
      </unit>
      <unit id="1927">
        <segment state="initial">
          <source>“InternalName”</source>
          <target>“InternalName”</target>
        </segment>
      </unit>
      <unit id="1928">
        <segment state="initial">
          <source>“LegalCopyright”</source>
          <target>“LegalCopyright”</target>
        </segment>
      </unit>
      <unit id="1929">
        <segment state="initial">
          <source>“OriginalFilename”</source>
          <target>“OriginalFilename”</target>
        </segment>
      </unit>
      <unit id="1930">
        <segment state="initial">
          <source>“ProductName”</source>
          <target>“ProductName”</target>
        </segment>
      </unit>
      <unit id="1931">
        <segment state="initial">
          <source>“ProductVersion”</source>
          <target>“ProductVersion”</target>
        </segment>
      </unit>
      <unit id="1932">
        <segment state="initial">
          <source>The following version tags contain values that can be compared:</source>
          <target>The following version tags contain values that can be compared:</target>
        </segment>
      </unit>
      <unit id="1933">
        <segment state="initial">
          <source>“FileVersion”</source>
          <target>“FileVersion”</target>
        </segment>
      </unit>
      <unit id="1934">
        <segment state="initial">
          <source>“ProductVersion”</source>
          <target>“ProductVersion”</target>
        </segment>
      </unit>
      <unit id="1935">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="1936">
        <segment state="initial">
          <source>USMT XML Reference</source>
          <target>USMT XML Reference</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>