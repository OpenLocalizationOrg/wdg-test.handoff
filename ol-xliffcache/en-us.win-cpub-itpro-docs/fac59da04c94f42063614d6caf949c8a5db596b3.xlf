<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\keep-secure\device-guard-deployment-guide.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">fac59da04c94f42063614d6caf949c8a5db596b3</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Device Guard deployment guide (Windows 10)</source>
          <target>Device Guard deployment guide (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Microsoft Device Guard is a feature set that consists of both hardware and software system integrity hardening features that revolutionize the Windows operating system’s security.</source>
          <target>Microsoft Device Guard is a feature set that consists of both hardware and software system integrity hardening features that revolutionize the Windows operating system’s security.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Device Guard deployment guide</source>
          <target>Device Guard deployment guide</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Applies to</source>
          <target>Applies to</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Windows 10</source>
          <target>Windows 10</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Microsoft Device Guard is a feature set that consists of both hardware and software system integrity hardening features that revolutionize the Windows operating system’s security.</source>
          <target>Microsoft Device Guard is a feature set that consists of both hardware and software system integrity hardening features that revolutionize the Windows operating system’s security.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>Windows 10 employs Device Guard as well as code integrity and advanced hardware features such as CPU virtualization extensions, Trusted Platform Module, and second-level address translation to offer comprehensive modern security to its users.</source>
          <target>Windows 10 employs Device Guard as well as code integrity and advanced hardware features such as CPU virtualization extensions, Trusted Platform Module, and second-level address translation to offer comprehensive modern security to its users.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>This guide explores the individual features in Device Guard as well as how to plan for, configure, and deploy them.</source>
          <target>This guide explores the individual features in Device Guard as well as how to plan for, configure, and deploy them.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>Introduction to Device Guard</source>
          <target>Introduction to Device Guard</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>Today’s security threat landscape is more aggressive than ever before.</source>
          <target>Today’s security threat landscape is more aggressive than ever before.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Modern malicious attacks are focused on revenue generation, intellectual property theft, and targeted system degradation, which results in financial loss.</source>
          <target>Modern malicious attacks are focused on revenue generation, intellectual property theft, and targeted system degradation, which results in financial loss.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>Many of these modern attackers are sponsored by nation states with unknown motives and large cyber terrorism budgets.</source>
          <target>Many of these modern attackers are sponsored by nation states with unknown motives and large cyber terrorism budgets.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>These threats can enter a company through something as simple as an email message and can permanently damage its reputation for securing its software assets, as well as having significant financial impact.</source>
          <target>These threats can enter a company through something as simple as an email message and can permanently damage its reputation for securing its software assets, as well as having significant financial impact.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Windows 10 introduces several new security features that help mitigate a large percentage of today’s known threats.</source>
          <target>Windows 10 introduces several new security features that help mitigate a large percentage of today’s known threats.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>It is estimated that more than 300,000 new malware variants are discovered daily.</source>
          <target>It is estimated that more than 300,000 new malware variants are discovered daily.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Unfortunately, companies currently use an ancient method to discover this infectious software and prevent its use.</source>
          <target>Unfortunately, companies currently use an ancient method to discover this infectious software and prevent its use.</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>In fact, current PCs trust everything that runs until malware signatures determine whether a threat exists; then, the antimalware software attempts to clean the PC, often after the malicious software’s effect has already been noticed.</source>
          <target>In fact, current PCs trust everything that runs until malware signatures determine whether a threat exists; then, the antimalware software attempts to clean the PC, often after the malicious software’s effect has already been noticed.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>This signature-based system focuses on reacting to an infection and ensuring that the particular infection does not happen again.</source>
          <target>This signature-based system focuses on reacting to an infection and ensuring that the particular infection does not happen again.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>In this model, the system that drives malware detection relies on the discovery of malicious software; only then can a signature be provided to the client to remediate it, which implies that a computer must be infected first.</source>
          <target>In this model, the system that drives malware detection relies on the discovery of malicious software; only then can a signature be provided to the client to remediate it, which implies that a computer must be infected first.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>The time between the detection of the malware and a client being issued a signature could mean the difference between losing data and staying safe.</source>
          <target>The time between the detection of the malware and a client being issued a signature could mean the difference between losing data and staying safe.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>In addition to antimalware solutions, there are some “whitelisting” technologies available, including AppLocker.</source>
          <target>In addition to antimalware solutions, there are some “whitelisting” technologies available, including AppLocker.</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>These technologies perform single instance, or blanket-allow or blanket-deny rules for running applications.</source>
          <target>These technologies perform single instance, or blanket-allow or blanket-deny rules for running applications.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>Although this is more preventative than signature-based detection, it requires significant ongoing maintenance.</source>
          <target>Although this is more preventative than signature-based detection, it requires significant ongoing maintenance.</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>In Windows 10, these applications are most effective when they are deployed alongside Microsoft Device Guard.</source>
          <target>In Windows 10, these applications are most effective when they are deployed alongside Microsoft Device Guard.</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Device Guard breaks the current model of detection first-block later, and allows only trusted applications to run, period.</source>
          <target>Device Guard breaks the current model of detection first-block later, and allows only trusted applications to run, period.</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>This methodology is consistent with the successful prevention strategy for mobile phone security.</source>
          <target>This methodology is consistent with the successful prevention strategy for mobile phone security.</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>With Device Guard, Microsoft has changed how the Windows operating system handles untrusted applications, which makes its defenses difficult for malware to penetrate.</source>
          <target>With Device Guard, Microsoft has changed how the Windows operating system handles untrusted applications, which makes its defenses difficult for malware to penetrate.</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>This new prevention versus detection model provides Windows clients with the necessary security for modern threats and, when implemented, makes most of today’s threats completely obsolete from day one.</source>
          <target>This new prevention versus detection model provides Windows clients with the necessary security for modern threats and, when implemented, makes most of today’s threats completely obsolete from day one.</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>Device Guard's features revolutionize the Windows operating system’s security by taking advantage of new virtualization-based security (VBS) options and the trust-nothing mobile device operating system model, which makes its defenses much more difficult for malware to penetrate.</source>
          <target>Device Guard's features revolutionize the Windows operating system’s security by taking advantage of new virtualization-based security (VBS) options and the trust-nothing mobile device operating system model, which makes its defenses much more difficult for malware to penetrate.</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>By using configurable code integrity policies, organizations are able to choose exactly which applications are allowed to run in their environment.</source>
          <target>By using configurable code integrity policies, organizations are able to choose exactly which applications are allowed to run in their environment.</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Configurable code integrity is not limited to Windows Store applications and can be used with existing unsigned or signed Win32 applications, without the requirement that the application be repackaged.</source>
          <target>Configurable code integrity is not limited to Windows Store applications and can be used with existing unsigned or signed Win32 applications, without the requirement that the application be repackaged.</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>In addition, configurable code integrity can be deployed as an individual feature if organizations don’t possess the required hardware for Device Guard.</source>
          <target>In addition, configurable code integrity can be deployed as an individual feature if organizations don’t possess the required hardware for Device Guard.</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>Along with code integrity, Windows 10 leverages advanced hardware features such as CPU virtualization extensions, input/output memory management units (IOMMUs), Trusted Platform Module (TPM), and second-level address translation (SLAT) to offer comprehensive modern security to its users.</source>
          <target>Along with code integrity, Windows 10 leverages advanced hardware features such as CPU virtualization extensions, input/output memory management units (IOMMUs), Trusted Platform Module (TPM), and second-level address translation (SLAT) to offer comprehensive modern security to its users.</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Device Guard deployed with configurable code integrity and Credential Guard will be among the most impactful client-side security deployments an organization can implement today.</source>
          <target>Device Guard deployed with configurable code integrity and Credential Guard will be among the most impactful client-side security deployments an organization can implement today.</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>In this guide, you learn about the individual features found within Device Guard as well as how to plan for, configure, and deploy them.</source>
          <target>In this guide, you learn about the individual features found within Device Guard as well as how to plan for, configure, and deploy them.</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Device Guard with configurable code integrity is intended for deployment alongside additional threat-mitigating Windows features such as Credential Guard and AppLocker.</source>
          <target>Device Guard with configurable code integrity is intended for deployment alongside additional threat-mitigating Windows features such as Credential Guard and AppLocker.</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>Device Guard overview</source>
          <target>Device Guard overview</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Device Guard is a feature set that consists of both hardware and software system integrity hardening features.</source>
          <target>Device Guard is a feature set that consists of both hardware and software system integrity hardening features.</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>These features revolutionize the Windows operating system’s security by taking advantage of new virtualization-based security options and the trust-nothing mobile device operating system model.</source>
          <target>These features revolutionize the Windows operating system’s security by taking advantage of new virtualization-based security options and the trust-nothing mobile device operating system model.</target>
        </segment>
      </unit>
      <unit id="140">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>A key feature in this model is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">configurable code integrity</pc>, which allows your organization to choose exactly which software or trusted software publishers are allowed to run code on your client machines—exactly what has made mobile phone security so successful.</source>
          <target>A key feature in this model is called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">configurable code integrity</pc>, which allows your organization to choose exactly which software or trusted software publishers are allowed to run code on your client machines—exactly what has made mobile phone security so successful.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>In addition, Device Guard offers organizations a way to sign existing line-of-business (LOB) applications so that they can trust their own code, without the requirement that the application be repackaged.</source>
          <target>In addition, Device Guard offers organizations a way to sign existing line-of-business (LOB) applications so that they can trust their own code, without the requirement that the application be repackaged.</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Also, this same method of signing provides organizations with a way to trust individual third-party applications.</source>
          <target>Also, this same method of signing provides organizations with a way to trust individual third-party applications.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>Device Guard—with configurable code integrity, Credential Guard, and AppLocker—is the most complete security defense that any Microsoft product has ever been able to offer a Windows client.</source>
          <target>Device Guard—with configurable code integrity, Credential Guard, and AppLocker—is the most complete security defense that any Microsoft product has ever been able to offer a Windows client.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Advanced hardware features such as CPU virtualization extensions, IOMMUs, and SLAT, drive these new client security offerings.</source>
          <target>Advanced hardware features such as CPU virtualization extensions, IOMMUs, and SLAT, drive these new client security offerings.</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>By integrating these hardware features further into the core operating system, Windows 10 leverages them in new ways.</source>
          <target>By integrating these hardware features further into the core operating system, Windows 10 leverages them in new ways.</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>For example, the same type 1 hypervisor technology that is used to run virtual machines in Microsoft Hyper-V is used to isolate core Windows services into a virtualization-based, protected container.</source>
          <target>For example, the same type 1 hypervisor technology that is used to run virtual machines in Microsoft Hyper-V is used to isolate core Windows services into a virtualization-based, protected container.</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>This is just one example of how Windows 10 integrates advanced hardware features deeper into the operating system to offer comprehensive modern security to its users.</source>
          <target>This is just one example of how Windows 10 integrates advanced hardware features deeper into the operating system to offer comprehensive modern security to its users.</target>
        </segment>
      </unit>
      <unit id="148">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
        </originalData>
        <segment state="initial">
          <source>These hardware features are now available in consumer and enterprise PC markets and are discussed in detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</source>
          <target>These hardware features are now available in consumer and enterprise PC markets and are discussed in detail in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>Along with these new features, some components of Device Guard are existing tools or technologies that have been included in this strategic security offering to provide customers with the most secure Windows operating system possible.</source>
          <target>Along with these new features, some components of Device Guard are existing tools or technologies that have been included in this strategic security offering to provide customers with the most secure Windows operating system possible.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>Device Guard is intended as a set of client security features to be used in conjunction with the other threat-resistance features available in the Windows operating system, some of which are mentioned in this guide.</source>
          <target>Device Guard is intended as a set of client security features to be used in conjunction with the other threat-resistance features available in the Windows operating system, some of which are mentioned in this guide.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>In addition to an overview of each feature, this guide walks you through the configuration and deployment of them.</source>
          <target>In addition to an overview of each feature, this guide walks you through the configuration and deployment of them.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Configurable code integrity</source>
          <target>Configurable code integrity</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>The Windows operating system consists of two operating modes: user mode and kernel mode.</source>
          <target>The Windows operating system consists of two operating modes: user mode and kernel mode.</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>The base of the operating system runs within the kernel mode, which is where the Windows operating system directly interfaces with hardware resources.</source>
          <target>The base of the operating system runs within the kernel mode, which is where the Windows operating system directly interfaces with hardware resources.</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>User mode is primarily responsible for running applications and brokering information to and from the kernel mode for hardware resource requests.</source>
          <target>User mode is primarily responsible for running applications and brokering information to and from the kernel mode for hardware resource requests.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>For example, when an application that is running in user mode needs additional memory, the user mode process must request the resources from kernel mode, not directly from RAM.</source>
          <target>For example, when an application that is running in user mode needs additional memory, the user mode process must request the resources from kernel mode, not directly from RAM.</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Code integrity is the component of the Windows operating system that verifies that the code Windows is running is trusted and safe.</source>
          <target>Code integrity is the component of the Windows operating system that verifies that the code Windows is running is trusted and safe.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Like the operating system, Windows code integrity also contains two primary components: kernel mode code integrity (KMCI) and user mode code integrity (UMCI).</source>
          <target>Like the operating system, Windows code integrity also contains two primary components: kernel mode code integrity (KMCI) and user mode code integrity (UMCI).</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>KMCI has been used in recent versions of the Windows operating system to protect the kernel mode from running unsigned drivers.</source>
          <target>KMCI has been used in recent versions of the Windows operating system to protect the kernel mode from running unsigned drivers.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Although effective, drivers are not the only route that malware can take to penetrate the kernel mode space of the operating system.</source>
          <target>Although effective, drivers are not the only route that malware can take to penetrate the kernel mode space of the operating system.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>In Windows 10, however, Microsoft has raised the standard for kernel mode code out of the box as well as provided enterprises with a way to set their own UMCI and KMCI standards.</source>
          <target>In Windows 10, however, Microsoft has raised the standard for kernel mode code out of the box as well as provided enterprises with a way to set their own UMCI and KMCI standards.</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Beginning with the Code Integrity service itself and continuing through the policies a Windows client uses to verify that an application should be allowed to run, Microsoft has made Windows 10 more secure than any previous Windows release.</source>
          <target>Beginning with the Code Integrity service itself and continuing through the policies a Windows client uses to verify that an application should be allowed to run, Microsoft has made Windows 10 more secure than any previous Windows release.</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>Historically, UMCI has been available only in Windows RT and on Windows Phone devices, which has made it difficult for these devices to be infected with viruses and malware.</source>
          <target>Historically, UMCI has been available only in Windows RT and on Windows Phone devices, which has made it difficult for these devices to be infected with viruses and malware.</target>
        </segment>
      </unit>
      <unit id="164">
        <segment state="initial">
          <source>In Windows 10, these same successful UMCI standards are available.</source>
          <target>In Windows 10, these same successful UMCI standards are available.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>Historically, most malware has been unsigned.</source>
          <target>Historically, most malware has been unsigned.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>By simply deploying code integrity policies, organizations will immediately protect themselves against unsigned malware, which is estimated to be responsible for more than 95 percent of current attacks.</source>
          <target>By simply deploying code integrity policies, organizations will immediately protect themselves against unsigned malware, which is estimated to be responsible for more than 95 percent of current attacks.</target>
        </segment>
      </unit>
      <unit id="167">
        <segment state="initial">
          <source>By using code integrity policies, an enterprise can select exactly which binaries are allowed to run in both user mode and kernel mode, from the signer to the hash level.</source>
          <target>By using code integrity policies, an enterprise can select exactly which binaries are allowed to run in both user mode and kernel mode, from the signer to the hash level.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>When completely enforced, it makes user mode in Windows function like a mobile phone, by allowing only specific applications or specific signatures to be trusted and run.</source>
          <target>When completely enforced, it makes user mode in Windows function like a mobile phone, by allowing only specific applications or specific signatures to be trusted and run.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>This feature alone fundamentally changes the security in an enterprise.</source>
          <target>This feature alone fundamentally changes the security in an enterprise.</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>This additional security is not limited to Windows apps and does not require that an application be rewritten to be compatible with your existing, unsigned applications.</source>
          <target>This additional security is not limited to Windows apps and does not require that an application be rewritten to be compatible with your existing, unsigned applications.</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>You can implement configurable code integrity without enabling Device Guard, but it is intended to run in conjunction with Device Guard when supported hardware is available.</source>
          <target>You can implement configurable code integrity without enabling Device Guard, but it is intended to run in conjunction with Device Guard when supported hardware is available.</target>
        </segment>
      </unit>
      <unit id="172">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to configure, deploy, and manage code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</source>
          <target>For more information about how to configure, deploy, and manage code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>Hardware security features and virtualization-based security</source>
          <target>Hardware security features and virtualization-based security</target>
        </segment>
      </unit>
      <unit id="174">
        <segment state="initial">
          <source>The Device Guard core functionality and protection start at the hardware level.</source>
          <target>The Device Guard core functionality and protection start at the hardware level.</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Devices that have processors equipped with SLAT technologies and virtualization extensions, such as Intel Virtualization Technology (VT-x) and AMD-V, will be able to take advantage of virtualization-based security (VBS) features that enhance Windows security.</source>
          <target>Devices that have processors equipped with SLAT technologies and virtualization extensions, such as Intel Virtualization Technology (VT-x) and AMD-V, will be able to take advantage of virtualization-based security (VBS) features that enhance Windows security.</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Device Guard leverages VBS to isolate core Windows services that are critical to the security and integrity of the operating system.</source>
          <target>Device Guard leverages VBS to isolate core Windows services that are critical to the security and integrity of the operating system.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>This isolation removes the vulnerability of these services from both the user and kernel modes and acts as an impenetrable barrier for most malware used today.</source>
          <target>This isolation removes the vulnerability of these services from both the user and kernel modes and acts as an impenetrable barrier for most malware used today.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>One of these isolated services, called the Windows Code Integrity service, drives the Device Guard kernel mode configurable code integrity feature.</source>
          <target>One of these isolated services, called the Windows Code Integrity service, drives the Device Guard kernel mode configurable code integrity feature.</target>
        </segment>
      </unit>
      <unit id="179">
        <segment state="initial">
          <source>This prevents code that has penetrated the kernel mode operations from compromising the code integrity service.</source>
          <target>This prevents code that has penetrated the kernel mode operations from compromising the code integrity service.</target>
        </segment>
      </unit>
      <unit id="180">
        <segment state="initial">
          <source>Another Windows 10 feature that employs VBS is Credential Guard.</source>
          <target>Another Windows 10 feature that employs VBS is Credential Guard.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>Credential Guard provides additional protection to Active Directory domain users by storing domain credentials within the virtualization container that hosts the Windows security services, such as code integrity.</source>
          <target>Credential Guard provides additional protection to Active Directory domain users by storing domain credentials within the virtualization container that hosts the Windows security services, such as code integrity.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>By isolating these domain credentials from the active user mode and kernel mode, they have a much lower risk of being stolen.</source>
          <target>By isolating these domain credentials from the active user mode and kernel mode, they have a much lower risk of being stolen.</target>
        </segment>
      </unit>
      <unit id="183">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#device-guard-with-credential-guard)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how Credential Guard complements Device Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard with Credential Guard</pc> section.</source>
          <target>For more information about how Credential Guard complements Device Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard with Credential Guard</pc> section.</target>
        </segment>
      </unit>
      <unit id="184">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-credential-guard)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</source>
          <target>For information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>Device Guard with AppLocker</source>
          <target>Device Guard with AppLocker</target>
        </segment>
      </unit>
      <unit id="186">
        <segment state="initial">
          <source>Although AppLocker is not considered a new Device Guard feature, it complements Device Guard functionality when enforced code integrity cannot be fully implemented or its functionality does not cover every desired scenario.</source>
          <target>Although AppLocker is not considered a new Device Guard feature, it complements Device Guard functionality when enforced code integrity cannot be fully implemented or its functionality does not cover every desired scenario.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>There are many scenarios in which code integrity policies would be used alongside AppLocker rules.</source>
          <target>There are many scenarios in which code integrity policies would be used alongside AppLocker rules.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>As a best practice, you should enforce code integrity policies at the most restrictive level possible for your organization, and then you can use AppLocker to fine-tune the restrictions to an even lower level.</source>
          <target>As a best practice, you should enforce code integrity policies at the most restrictive level possible for your organization, and then you can use AppLocker to fine-tune the restrictions to an even lower level.</target>
        </segment>
      </unit>
      <unit id="189">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  One example in which Device Guard functionality needs AppLocker supplementation is when your organization would like to limit universal applications.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  One example in which Device Guard functionality needs AppLocker supplementation is when your organization would like to limit universal applications.</target>
        </segment>
      </unit>
      <unit id="190">
        <segment state="initial">
          <source>Universal applications have already been validated by Microsoft to be trustworthy to run, but an organization may not want to allow specific universal applications to run in their environment.</source>
          <target>Universal applications have already been validated by Microsoft to be trustworthy to run, but an organization may not want to allow specific universal applications to run in their environment.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>You can accomplish this enforcement by using an AppLocker rule.</source>
          <target>You can accomplish this enforcement by using an AppLocker rule.</target>
        </segment>
      </unit>
      <unit id="192">
        <segment state="initial">
          <source>AppLocker and Device Guard should run side-by-side in your organization, which offers the best of both security features at the same time and provides the most comprehensive security to as many devices as possible.</source>
          <target>AppLocker and Device Guard should run side-by-side in your organization, which offers the best of both security features at the same time and provides the most comprehensive security to as many devices as possible.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>In addition to these features, Microsoft recommends that you continue to maintain an enterprise antivirus solution for a well-rounded enterprise security portfolio.</source>
          <target>In addition to these features, Microsoft recommends that you continue to maintain an enterprise antivirus solution for a well-rounded enterprise security portfolio.</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>Device Guard with Credential Guard</source>
          <target>Device Guard with Credential Guard</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>Although Credential Guard is not a feature within Device Guard, many organizations will likely deploy Credential Guard alongside Device Guard for additional protection against credential theft.</source>
          <target>Although Credential Guard is not a feature within Device Guard, many organizations will likely deploy Credential Guard alongside Device Guard for additional protection against credential theft.</target>
        </segment>
      </unit>
      <unit id="196">
        <segment state="initial">
          <source>Similar to virtualization-based protection of kernel mode code integrity, Credential Guard leverages hypervisor technology to protect domain credentials.</source>
          <target>Similar to virtualization-based protection of kernel mode code integrity, Credential Guard leverages hypervisor technology to protect domain credentials.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>This mitigation is targeted at resisting the use of pass-the-hash and pass-the-ticket techniques.</source>
          <target>This mitigation is targeted at resisting the use of pass-the-hash and pass-the-ticket techniques.</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>By employing multifactor authentication with Credential Guard, organizations can gain additional protection against such threats.</source>
          <target>By employing multifactor authentication with Credential Guard, organizations can gain additional protection against such threats.</target>
        </segment>
      </unit>
      <unit id="199">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-cg)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to deploy Credential Guard to your Windows 10 Enterprise clients, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</source>
          <target>For information about how to deploy Credential Guard to your Windows 10 Enterprise clients, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</target>
        </segment>
      </unit>
      <unit id="200">
        <segment state="initial">
          <source>In addition to the client-side enablement of Credential Guard, organizations can deploy mitigations at both the CA and domain controller level to help prevent credential theft.</source>
          <target>In addition to the client-side enablement of Credential Guard, organizations can deploy mitigations at both the CA and domain controller level to help prevent credential theft.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>Microsoft will be releasing details about these additional mitigations in the future.</source>
          <target>Microsoft will be releasing details about these additional mitigations in the future.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Unified manageability</source>
          <target>Unified manageability</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>You can easily manage Device Guard features by using the familiar enterprise and client-management tools that IT pros use every day.</source>
          <target>You can easily manage Device Guard features by using the familiar enterprise and client-management tools that IT pros use every day.</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>Use the following management tools to enable and manage Device Guard:</source>
          <target>Use the following management tools to enable and manage Device Guard:</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group Policy</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group Policy</pc>.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Windows 10 provides an administrative template to configure and deploy the configurable code integrity policies for your organization.</source>
          <target>Windows 10 provides an administrative template to configure and deploy the configurable code integrity policies for your organization.</target>
        </segment>
      </unit>
      <unit id="207">
        <segment state="initial">
          <source>This template also allows you to specify which hardware-based security features you would like to enable and deploy.</source>
          <target>This template also allows you to specify which hardware-based security features you would like to enable and deploy.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>You can manage these settings along with your existing Group Policy Objects (GPOs), which makes it simple to implement Device Guard features.</source>
          <target>You can manage these settings along with your existing Group Policy Objects (GPOs), which makes it simple to implement Device Guard features.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>In addition to these code integrity and hardware-based security features, you can use Group Policy to help you manage your catalog files.</source>
          <target>In addition to these code integrity and hardware-based security features, you can use Group Policy to help you manage your catalog files.</target>
        </segment>
      </unit>
      <unit id="210">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</source>
          <target>For more information about catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft System Center Configuration Manager</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft System Center Configuration Manager</pc>.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>You can use System Center Configuration Manager to simplify deployment and management of catalog files, code integrity policies, and hardware-based security features, as well as provide version control.</source>
          <target>You can use System Center Configuration Manager to simplify deployment and management of catalog files, code integrity policies, and hardware-based security features, as well as provide version control.</target>
        </segment>
      </unit>
      <unit id="213">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#deploy-cat-sccm)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to deploy catalog files by using System Center Configuration Manager, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy catalog files with System Center Configuration Manager</pc> section.</source>
          <target>For more information about how to deploy catalog files by using System Center Configuration Manager, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy catalog files with System Center Configuration Manager</pc> section.</target>
        </segment>
      </unit>
      <unit id="214">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Intune</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Microsoft Intune</pc>.</target>
        </segment>
      </unit>
      <unit id="215">
        <segment state="initial">
          <source>In a future release of Microsoft Intune, organizations will be able to leverage Intune for deployment and management of code integrity policies and catalog files.</source>
          <target>In a future release of Microsoft Intune, organizations will be able to leverage Intune for deployment and management of code integrity policies and catalog files.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows PowerShell</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows PowerShell</pc>.</target>
        </segment>
      </unit>
      <unit id="217">
        <segment state="initial">
          <source>Windows PowerShell is primarily used to create and service code integrity policies.</source>
          <target>Windows PowerShell is primarily used to create and service code integrity policies.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>These policies represent the most powerful component of Device Guard.</source>
          <target>These policies represent the most powerful component of Device Guard.</target>
        </segment>
      </unit>
      <unit id="219">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For a step-by-step walkthrough of how to create, audit, service, enforce, and deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</source>
          <target>For a step-by-step walkthrough of how to create, audit, service, enforce, and deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>These options provide the same experience you are used to in order to manage your existing enterprise management solutions.</source>
          <target>These options provide the same experience you are used to in order to manage your existing enterprise management solutions.</target>
        </segment>
      </unit>
      <unit id="221">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#dg-deployment)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to manage and deploy Device Guard hardware and code integrity features in your organization, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment</pc> section.</source>
          <target>For more information about how to manage and deploy Device Guard hardware and code integrity features in your organization, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment</pc> section.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Plan for Device Guard</source>
          <target>Plan for Device Guard</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>In this section, you will learn about the following topics:</source>
          <target>In this section, you will learn about the following topics:</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#approach-enterprise-code-integrity-deployment)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc>.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>Device Guard deployment in your organization requires a planned approach.</source>
          <target>Device Guard deployment in your organization requires a planned approach.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>In this section, you get high-level recommendations for how to approach enterprise code integrity deployment in your organization.</source>
          <target>In this section, you get high-level recommendations for how to approach enterprise code integrity deployment in your organization.</target>
        </segment>
      </unit>
      <unit id="227">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#device-guard-deployment-scenarios)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc>.</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>When you plan for Device Guard deployment, Microsoft recommends that you categorize each device in your organization into a deployment scenario.</source>
          <target>When you plan for Device Guard deployment, Microsoft recommends that you categorize each device in your organization into a deployment scenario.</target>
        </segment>
      </unit>
      <unit id="229">
        <segment state="initial">
          <source>These scenarios will provide a roadmap for your Device Guard deployment.</source>
          <target>These scenarios will provide a roadmap for your Device Guard deployment.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-signing-adoption)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code signing adoption</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code signing adoption</pc>.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Code signing is important to the security that Device Guard provides.</source>
          <target>Code signing is important to the security that Device Guard provides.</target>
        </segment>
      </unit>
      <unit id="232">
        <segment state="initial">
          <source>This section outlines the options for code signing and the benefits and disadvantages of each method.</source>
          <target>This section outlines the options for code signing and the benefits and disadvantages of each method.</target>
        </segment>
      </unit>
      <unit id="233">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc>.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Several Device Guard features require advanced hardware.</source>
          <target>Several Device Guard features require advanced hardware.</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>This section outlines the requirements for each of those features and what to look for during your next hardware refresh.</source>
          <target>This section outlines the requirements for each of those features and what to look for during your next hardware refresh.</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>Approach enterprise code integrity deployment</source>
          <target>Approach enterprise code integrity deployment</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>Enterprises that want to consider Device Guard should not expect deployment to their entire organization overnight.</source>
          <target>Enterprises that want to consider Device Guard should not expect deployment to their entire organization overnight.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Device Guard implementation requires that you plan for both end-user and IT pro impact.</source>
          <target>Device Guard implementation requires that you plan for both end-user and IT pro impact.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>In addition, the deployment of Device Guard features to your enterprise requires a planned, phased approach to ensure that end-user systems are fully capable and ready to enforce these new security restrictions.</source>
          <target>In addition, the deployment of Device Guard features to your enterprise requires a planned, phased approach to ensure that end-user systems are fully capable and ready to enforce these new security restrictions.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>Perform the following high-level tasks to approach the deployment of Device Guard to your enterprise:</source>
          <target>Perform the following high-level tasks to approach the deployment of Device Guard to your enterprise:</target>
        </segment>
      </unit>
      <unit id="241">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group devices into similar functions</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Group devices into similar functions</pc>.</target>
        </segment>
      </unit>
      <unit id="242">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#device-guard-deployment-scenarios)</data>
        </originalData>
        <segment state="initial">
          <source>Categorize machines into the groups described in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc> section.</source>
          <target>Categorize machines into the groups described in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc> section.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>This begins the roadmap for your Device Guard deployment and provides groups of easier and more difficult implementations.</source>
          <target>This begins the roadmap for your Device Guard deployment and provides groups of easier and more difficult implementations.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>From there, assess the quantity of necessary Device Guard policies.</source>
          <target>From there, assess the quantity of necessary Device Guard policies.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>The easiest solution is to lock down your entire enterprise, but it might not fit your individual departments’ needs.</source>
          <target>The easiest solution is to lock down your entire enterprise, but it might not fit your individual departments’ needs.</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>To discover an appropriate number of policies for your organization, try to separate the defined groups into departments or roles.</source>
          <target>To discover an appropriate number of policies for your organization, try to separate the defined groups into departments or roles.</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>Then ask some questions: What software does each department or role need to do their job?</source>
          <target>Then ask some questions: What software does each department or role need to do their job?</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>Should they be able to install and run other departments’ software?</source>
          <target>Should they be able to install and run other departments’ software?</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Do we need to create a base code integrity policy that aligns with our application catalog?</source>
          <target>Do we need to create a base code integrity policy that aligns with our application catalog?</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>Should users be able to install any application or only choose from an “allowed” list?</source>
          <target>Should users be able to install any application or only choose from an “allowed” list?</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>Do we allow users to use their own peripheral devices?</source>
          <target>Do we allow users to use their own peripheral devices?</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>These questions will help you discover the number of necessary policies for your organization.</source>
          <target>These questions will help you discover the number of necessary policies for your organization.</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Finally, try to focus on which people or departments would require an additional level of privileges.</source>
          <target>Finally, try to focus on which people or departments would require an additional level of privileges.</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>For example, should department x be able to install and run application xyz, even though no other department does?</source>
          <target>For example, should department x be able to install and run application xyz, even though no other department does?</target>
        </segment>
      </unit>
      <unit id="255">
        <segment state="initial">
          <source>If the answer is yes and justifiable, you will need a secondary code integrity policy for that group.</source>
          <target>If the answer is yes and justifiable, you will need a secondary code integrity policy for that group.</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>If not, you will likely be able to merge several policies to simplify management.</source>
          <target>If not, you will likely be able to merge several policies to simplify management.</target>
        </segment>
      </unit>
      <unit id="257">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about configurable code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</source>
          <target>For more information about configurable code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="258">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from “golden” PCs</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from “golden” PCs</pc>.</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>After you create the groups of devices, you can create code integrity policies to align with those groups, similar to the way you would manage corporate images.</source>
          <target>After you create the groups of devices, you can create code integrity policies to align with those groups, similar to the way you would manage corporate images.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>When you have separated these groups and set up golden PCs that mimic the software and hardware those individual groups require, create code integrity policies from each of them.</source>
          <target>When you have separated these groups and set up golden PCs that mimic the software and hardware those individual groups require, create code integrity policies from each of them.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>After you create these, you can merge these code integrity policies to create a master policy, or you can manage and deploy them individually.</source>
          <target>After you create these, you can merge these code integrity policies to create a master policy, or you can manage and deploy them individually.</target>
        </segment>
      </unit>
      <unit id="262">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-integrity-policies-from-golden-pcs)</data>
        </originalData>
        <segment state="initial">
          <source>For step-by-step instructions about how to create code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section.</source>
          <target>For step-by-step instructions about how to create code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="263">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit and merge code integrity policies</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit and merge code integrity policies</pc>.</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>Microsoft recommends that you test code integrity policies in audit mode before you enforce them.</source>
          <target>Microsoft recommends that you test code integrity policies in audit mode before you enforce them.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>Audit mode allows administrators to run the code integrity policy on a system but not actually block anything.</source>
          <target>Audit mode allows administrators to run the code integrity policy on a system but not actually block anything.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>Rather than not allowing applications to run, events are logged with each exception to the policy.</source>
          <target>Rather than not allowing applications to run, events are logged with each exception to the policy.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>This way, you can easily highlight any issues that were not discovered during the initial scan.</source>
          <target>This way, you can easily highlight any issues that were not discovered during the initial scan.</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>You can create additional code integrity policies by using the audit events and merge them into the existing policy.</source>
          <target>You can create additional code integrity policies by using the audit events and merge them into the existing policy.</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</source>
          <target>For more information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="270">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assess LOB applications that are currently unsigned, and create a catalog file for them</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assess LOB applications that are currently unsigned, and create a catalog file for them</pc>.</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>Catalog files allow organizations to sign applications that do not currently possess digitally signed binaries or applications that a customer would want to add a secondary signature to.</source>
          <target>Catalog files allow organizations to sign applications that do not currently possess digitally signed binaries or applications that a customer would want to add a secondary signature to.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>These applications can be in-house applications or from third parties, and the process does not require any repackaging of the application.</source>
          <target>These applications can be in-house applications or from third parties, and the process does not require any repackaging of the application.</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source>When you create code integrity policies at a rule level above hash values, you will not discover unsigned applications.</source>
          <target>When you create code integrity policies at a rule level above hash values, you will not discover unsigned applications.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source>To include these applications in your code integrity policies, simply create, sign, and deploy a catalog file.</source>
          <target>To include these applications in your code integrity policies, simply create, sign, and deploy a catalog file.</target>
        </segment>
      </unit>
      <unit id="275">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For information about catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</source>
          <target>For information about catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="276">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable desired hardware security features</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable desired hardware security features</pc>.</target>
        </segment>
      </unit>
      <unit id="277">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#device-guard-deployment-scenarios)</data>
        </originalData>
        <segment state="initial">
          <source>Each type of device found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc> section takes advantage of different software and hardware integrity configurations.</source>
          <target>Each type of device found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Device Guard deployment scenarios</pc> section takes advantage of different software and hardware integrity configurations.</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>You should assess hardware-based security features separately from code integrity policies because they provide complementary functionality.</source>
          <target>You should assess hardware-based security features separately from code integrity policies because they provide complementary functionality.</target>
        </segment>
      </unit>
      <unit id="279">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#configure-hardware-based-security-features)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to configure Device Guard hardware-based security features, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure hardware-based security features</pc> section.</source>
          <target>For information about how to configure Device Guard hardware-based security features, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure hardware-based security features</pc> section.</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy code integrity policies and catalog files</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy code integrity policies and catalog files</pc>.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>After you have created and signed the necessary catalog files and created and audited code integrity policies, you are ready to deploy them in phases.</source>
          <target>After you have created and signed the necessary catalog files and created and audited code integrity policies, you are ready to deploy them in phases.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>Microsoft strongly recommends that you deploy these components to a test group of users, even after your IT organization has tested and vetted them.</source>
          <target>Microsoft strongly recommends that you deploy these components to a test group of users, even after your IT organization has tested and vetted them.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>This provides a final quality control validation before you deploy the catalog files and policies more broadly.</source>
          <target>This provides a final quality control validation before you deploy the catalog files and policies more broadly.</target>
        </segment>
      </unit>
      <unit id="284">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#deploy-catalog-files-with-group-policy)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to deploy catalog files with Group Policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy catalog files with Group Policy</pc> section.</source>
          <target>For information about how to deploy catalog files with Group Policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy catalog files with Group Policy</pc> section.</target>
        </segment>
      </unit>
      <unit id="285">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#deploy-code-integrity-policies-with-group-policy)</data>
        </originalData>
        <segment state="initial">
          <source>For additional information about how to deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy code integrity policies with Group Policy</pc> section.</source>
          <target>For additional information about how to deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy code integrity policies with Group Policy</pc> section.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>Device Guard deployment scenarios</source>
          <target>Device Guard deployment scenarios</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source>To help simplify the deployment of Device Guard to your organization, Microsoft recommends that you group devices into the deployment scenarios described in this section.</source>
          <target>To help simplify the deployment of Device Guard to your organization, Microsoft recommends that you group devices into the deployment scenarios described in this section.</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source>Device Guard is not a feature that organizations will just simply “turn on”; rather, it typically requires a phased implementation approach.</source>
          <target>Device Guard is not a feature that organizations will just simply “turn on”; rather, it typically requires a phased implementation approach.</target>
        </segment>
      </unit>
      <unit id="289">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#approach-to-enterprise-code-integrity-deployment)</data>
        </originalData>
        <segment state="initial">
          <source>To see where these scenarios fit into an overall Device Guard deployment approach, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach to enterprise code integrity deployment</pc> section.</source>
          <target>To see where these scenarios fit into an overall Device Guard deployment approach, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach to enterprise code integrity deployment</pc> section.</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source>Fixed-workload devices</source>
          <target>Fixed-workload devices</target>
        </segment>
      </unit>
      <unit id="291">
        <segment state="initial">
          <source>The lists of approved applications on fixed-workload devices rarely change as they perform the same tasks day after day.</source>
          <target>The lists of approved applications on fixed-workload devices rarely change as they perform the same tasks day after day.</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source>Examples of such devices include kiosks, point-of-sale systems, and call center PCs.</source>
          <target>Examples of such devices include kiosks, point-of-sale systems, and call center PCs.</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source>These devices could easily employ the full capabilities of Device Guard and would require little management or policy modification.</source>
          <target>These devices could easily employ the full capabilities of Device Guard and would require little management or policy modification.</target>
        </segment>
      </unit>
      <unit id="294">
        <segment state="initial">
          <source>Device Guard implementation to these devices is painless and requires little ongoing administration.</source>
          <target>Device Guard implementation to these devices is painless and requires little ongoing administration.</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source>With Device Guard fully implemented, users are able to run only those applications that the IT department installs, manages, and trusts.</source>
          <target>With Device Guard fully implemented, users are able to run only those applications that the IT department installs, manages, and trusts.</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source>Device Guard components that are applicable to fixed-workload devices include:</source>
          <target>Device Guard components that are applicable to fixed-workload devices include:</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>KMCI VBS protection</source>
          <target>KMCI VBS protection</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source>Enforced UMCI policy</source>
          <target>Enforced UMCI policy</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>Fully managed devices</source>
          <target>Fully managed devices</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source>Fully managed devices are those for which the IT department restricts the software that is installed and run on them, but allows users to request installation of additional software or provides a list of approved software in an application catalog.</source>
          <target>Fully managed devices are those for which the IT department restricts the software that is installed and run on them, but allows users to request installation of additional software or provides a list of approved software in an application catalog.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source>Examples of such devices include locked-down, company-owned desktops and laptops.</source>
          <target>Examples of such devices include locked-down, company-owned desktops and laptops.</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source>With these devices, establish an initial baseline code integrity policy and enforce the code integrity policy.</source>
          <target>With these devices, establish an initial baseline code integrity policy and enforce the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source>The IT department manages the policies and updates the devices when new applications are approved or are provided in the System Center Configuration Manager catalog.</source>
          <target>The IT department manages the policies and updates the devices when new applications are approved or are provided in the System Center Configuration Manager catalog.</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source>Device Guard components that are applicable to fully managed devices include:</source>
          <target>Device Guard components that are applicable to fully managed devices include:</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source>KMCI VBS protection</source>
          <target>KMCI VBS protection</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source>Enforced UMCI policy</source>
          <target>Enforced UMCI policy</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>In this scenario, an application list is provided and trusted, and the trust policy is constantly re-evaluated when a user requests a new application.</source>
          <target>In this scenario, an application list is provided and trusted, and the trust policy is constantly re-evaluated when a user requests a new application.</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source>When an application is trusted across all of these devices, new user requests for that application do not require a policy update (alignment with application catalog).</source>
          <target>When an application is trusted across all of these devices, new user requests for that application do not require a policy update (alignment with application catalog).</target>
        </segment>
      </unit>
      <unit id="309">
        <segment state="initial">
          <source>In addition, you can couple this with an onboarding process for new applications that you should add to the central application catalog.</source>
          <target>In addition, you can couple this with an onboarding process for new applications that you should add to the central application catalog.</target>
        </segment>
      </unit>
      <unit id="310">
        <segment state="initial">
          <source>Initial implementation of Device Guard to fully managed devices is simple but does require more administrative overhead to manage trusted signatures of newly requested and approved applications.</source>
          <target>Initial implementation of Device Guard to fully managed devices is simple but does require more administrative overhead to manage trusted signatures of newly requested and approved applications.</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source>Lightly managed devices</source>
          <target>Lightly managed devices</target>
        </segment>
      </unit>
      <unit id="312">
        <segment state="initial">
          <source>Lightly managed devices are company-owned machines over which users have full control, which includes what is installed on them.</source>
          <target>Lightly managed devices are company-owned machines over which users have full control, which includes what is installed on them.</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source>These devices run the organization’s antivirus solution and client management tools but are not restricted by software request or compliance policies.</source>
          <target>These devices run the organization’s antivirus solution and client management tools but are not restricted by software request or compliance policies.</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source>Device Guard components that are applicable to lightly managed devices include:</source>
          <target>Device Guard components that are applicable to lightly managed devices include:</target>
        </segment>
      </unit>
      <unit id="315">
        <segment state="initial">
          <source>KMCI VBS protection</source>
          <target>KMCI VBS protection</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>UMCI policy in Audit mode</source>
          <target>UMCI policy in Audit mode</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source>Bring Your Own Device</source>
          <target>Bring Your Own Device</target>
        </segment>
      </unit>
      <unit id="318">
        <segment state="initial">
          <source>Device Guard is not a good way to manage devices in a Bring Your Own Device (BYOD) model.</source>
          <target>Device Guard is not a good way to manage devices in a Bring Your Own Device (BYOD) model.</target>
        </segment>
      </unit>
      <unit id="319">
        <segment state="initial">
          <source>When employees are allowed to bring their own devices, the management of user-mode applications on them can make it difficult for users to use their own devices when they are not at work.</source>
          <target>When employees are allowed to bring their own devices, the management of user-mode applications on them can make it difficult for users to use their own devices when they are not at work.</target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source>In addition, Device Guard functionality is difficult to maintain from an administrative perspective.</source>
          <target>In addition, Device Guard functionality is difficult to maintain from an administrative perspective.</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>For devices in this group, explore alternate hardening and security features with MDM-based conditional access solutions, such as Microsoft Intune.</source>
          <target>For devices in this group, explore alternate hardening and security features with MDM-based conditional access solutions, such as Microsoft Intune.</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source>Code signing adoption</source>
          <target>Code signing adoption</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source>Code signing is crucial to the successful implementation of configurable code integrity policies.</source>
          <target>Code signing is crucial to the successful implementation of configurable code integrity policies.</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>These policies can trust the signing certificates from both independent software vendors and customers.</source>
          <target>These policies can trust the signing certificates from both independent software vendors and customers.</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source>In Windows 10, all Windows Store applications are signed.</source>
          <target>In Windows 10, all Windows Store applications are signed.</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source>Also, you can easily trust any other signed application by adding the signing certificate to the code integrity policy.</source>
          <target>Also, you can easily trust any other signed application by adding the signing certificate to the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source>For unsigned applications, customers have multiple options for signing them so that code integrity policies can trust them.</source>
          <target>For unsigned applications, customers have multiple options for signing them so that code integrity policies can trust them.</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source>The first option is traditional embedded code signing.</source>
          <target>The first option is traditional embedded code signing.</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source>Organizations that have in-house development teams can incorporate binary code signing into their application development process, and then simply add the signing certificate to their code integrity policies.</source>
          <target>Organizations that have in-house development teams can incorporate binary code signing into their application development process, and then simply add the signing certificate to their code integrity policies.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>The second option for signing unsigned applications is to use catalog files.</source>
          <target>The second option for signing unsigned applications is to use catalog files.</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>In Windows 10, customers have the ability to create catalog files as they monitor the installation and initial run of an application.</source>
          <target>In Windows 10, customers have the ability to create catalog files as they monitor the installation and initial run of an application.</target>
        </segment>
      </unit>
      <unit id="332">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#existing-line-of-business-applications)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about signing existing unsigned LOB applications or third-party applications, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Existing line-of-business applications</pc> section.</source>
          <target>For more information about signing existing unsigned LOB applications or third-party applications, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Existing line-of-business applications</pc> section.</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source>Existing line-of-business applications</source>
          <target>Existing line-of-business applications</target>
        </segment>
      </unit>
      <unit id="334">
        <segment state="initial">
          <source>Until now, existing LOB applications were difficult to trust if they were signed by a source other than the Windows Store or not signed at all.</source>
          <target>Until now, existing LOB applications were difficult to trust if they were signed by a source other than the Windows Store or not signed at all.</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source>With Windows 10, signing your existing LOB and third-party unsigned applications is simplified.</source>
          <target>With Windows 10, signing your existing LOB and third-party unsigned applications is simplified.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source>This new signing method does not require that applications be repackaged in any way.</source>
          <target>This new signing method does not require that applications be repackaged in any way.</target>
        </segment>
      </unit>
      <unit id="337">
        <segment state="initial">
          <source>With catalog files, administrators can sign these unsigned applications simply by monitoring for an installation and initial startup.</source>
          <target>With catalog files, administrators can sign these unsigned applications simply by monitoring for an installation and initial startup.</target>
        </segment>
      </unit>
      <unit id="338">
        <segment state="initial">
          <source>By using this monitoring information, an administrator can generate a catalog file.</source>
          <target>By using this monitoring information, an administrator can generate a catalog file.</target>
        </segment>
      </unit>
      <unit id="339">
        <segment state="initial">
          <source>Catalog files are simply Secure Hash Algorithm 2 (SHA2) hash lists of discovered binaries.</source>
          <target>Catalog files are simply Secure Hash Algorithm 2 (SHA2) hash lists of discovered binaries.</target>
        </segment>
      </unit>
      <unit id="340">
        <segment state="initial">
          <source>These binaries’ hash values are updated every time an application is updated and therefore require an updated catalog file.</source>
          <target>These binaries’ hash values are updated every time an application is updated and therefore require an updated catalog file.</target>
        </segment>
      </unit>
      <unit id="341">
        <segment state="initial">
          <source>For simplified administration, consider incorporating embedded code signing into your application development process.</source>
          <target>For simplified administration, consider incorporating embedded code signing into your application development process.</target>
        </segment>
      </unit>
      <unit id="342">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to generate catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</source>
          <target>For more information about how to generate catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="343">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Catalog files are lists of individual binaries’ hash values.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Catalog files are lists of individual binaries’ hash values.</target>
        </segment>
      </unit>
      <unit id="344">
        <segment state="initial">
          <source>If the scanned application is updated, you will need to create a new catalog file.</source>
          <target>If the scanned application is updated, you will need to create a new catalog file.</target>
        </segment>
      </unit>
      <unit id="345">
        <segment state="initial">
          <source>That said, binary signing is still highly recommended for any future applications so that no catalog files are needed.</source>
          <target>That said, binary signing is still highly recommended for any future applications so that no catalog files are needed.</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source>When you create a catalog file, you must sign it by using enterprise public key infrastructure (PKI), or a purchased code signing certificate.</source>
          <target>When you create a catalog file, you must sign it by using enterprise public key infrastructure (PKI), or a purchased code signing certificate.</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source>When signed, code integrity policies can trust the signer or signing certificate of those files.</source>
          <target>When signed, code integrity policies can trust the signer or signing certificate of those files.</target>
        </segment>
      </unit>
      <unit id="348">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For information about catalog file signing, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</source>
          <target>For information about catalog file signing, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source>Application development</source>
          <target>Application development</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source>Although in-house applications can be signed after packaging by using catalog files, Microsoft strongly recommends that embedded code signing be incorporated into your application development process.</source>
          <target>Although in-house applications can be signed after packaging by using catalog files, Microsoft strongly recommends that embedded code signing be incorporated into your application development process.</target>
        </segment>
      </unit>
      <unit id="351">
        <segment state="initial">
          <source>When signing applications, simply add the code signing certificate used to sign your applications to your code integrity policy.</source>
          <target>When signing applications, simply add the code signing certificate used to sign your applications to your code integrity policy.</target>
        </segment>
      </unit>
      <unit id="352">
        <segment state="initial">
          <source>This ensures that your code integrity policy will trust any future application that is signed with that certificate.</source>
          <target>This ensures that your code integrity policy will trust any future application that is signed with that certificate.</target>
        </segment>
      </unit>
      <unit id="353">
        <segment state="initial">
          <source>Embedding code signing into any in-house application development process is beneficial to your IT organization as you implement code integrity policies.</source>
          <target>Embedding code signing into any in-house application development process is beneficial to your IT organization as you implement code integrity policies.</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source>Hardware considerations</source>
          <target>Hardware considerations</target>
        </segment>
      </unit>
      <unit id="355">
        <segment state="initial">
          <source>Careful consideration about which hardware vendor and specific models to purchase during your next hardware refresh is vitally important to the success of your organization’s Device Guard implementation efforts.</source>
          <target>Careful consideration about which hardware vendor and specific models to purchase during your next hardware refresh is vitally important to the success of your organization’s Device Guard implementation efforts.</target>
        </segment>
      </unit>
      <unit id="356">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#approach-enterprise-code-integrity-deployment)</data>
        </originalData>
        <segment state="initial">
          <source>In alignment with your current hardware life cycle, consider the process that is discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section when you determine the appropriate order of hardware replacement in your organization.</source>
          <target>In alignment with your current hardware life cycle, consider the process that is discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section when you determine the appropriate order of hardware replacement in your organization.</target>
        </segment>
      </unit>
      <unit id="357">
        <segment state="initial">
          <source>Device Guard should be deployed in phases; therefore, you have time to methodically plan for its implementation.</source>
          <target>Device Guard should be deployed in phases; therefore, you have time to methodically plan for its implementation.</target>
        </segment>
      </unit>
      <unit id="358">
        <segment state="initial">
          <source>Different hardware features are required to implement the various features of Device Guard.</source>
          <target>Different hardware features are required to implement the various features of Device Guard.</target>
        </segment>
      </unit>
      <unit id="359">
        <segment state="initial">
          <source>There will likely be some individual features that you will be able to enable with your current hardware and some that you will not.</source>
          <target>There will likely be some individual features that you will be able to enable with your current hardware and some that you will not.</target>
        </segment>
      </unit>
      <unit id="360">
        <segment state="initial">
          <source>However, for organizations that want to implement Device Guard in its entirety, several advanced hardware features will be required.</source>
          <target>However, for organizations that want to implement Device Guard in its entirety, several advanced hardware features will be required.</target>
        </segment>
      </unit>
      <unit id="361">
        <segment state="initial">
          <source>For additional details about the hardware features that are required for Device Guard components, see the following table.</source>
          <target>For additional details about the hardware features that are required for Device Guard components, see the following table.</target>
        </segment>
      </unit>
      <unit id="362">
        <segment state="initial">
          <source>Requirement</source>
          <target>Requirement</target>
        </segment>
      </unit>
      <unit id="363">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="364">
        <segment state="initial">
          <source>Windows 10 Enterprise</source>
          <target>Windows 10 Enterprise</target>
        </segment>
      </unit>
      <unit id="365">
        <segment state="initial">
          <source>The PC must be running Windows 10 Enterprise.</source>
          <target>The PC must be running Windows 10 Enterprise.</target>
        </segment>
      </unit>
      <unit id="366">
        <segment state="initial">
          <source>UEFI firmware version 2.3.1 or higher with UEFI Secure Boot and Platform Secure Boot</source>
          <target>UEFI firmware version 2.3.1 or higher with UEFI Secure Boot and Platform Secure Boot</target>
        </segment>
      </unit>
      <unit id="367">
        <segment state="initial">
          <source>UEFI Secure Boot ensures that the device boots only authorized code.</source>
          <target>UEFI Secure Boot ensures that the device boots only authorized code.</target>
        </segment>
      </unit>
      <unit id="368">
        <segment state="initial">
          <source>Additionally, Boot Integrity, also known as Platform Secure Boot must be supported.</source>
          <target>Additionally, Boot Integrity, also known as Platform Secure Boot must be supported.</target>
        </segment>
      </unit>
      <unit id="369">
        <segment state="initial">
          <source>You can validate it against the following Windows Hardware Compatibility Program requirements:</source>
          <target>You can validate it against the following Windows Hardware Compatibility Program requirements:</target>
        </segment>
      </unit>
      <unit id="370">
        <segment state="initial">
          <source>System.Fundamentals.Firmware.UEFISecureBoot</source>
          <target>System.Fundamentals.Firmware.UEFISecureBoot</target>
        </segment>
      </unit>
      <unit id="371">
        <segment state="initial">
          <source>System.Fundamentals.Firmware.CS.UEFISecureBoot.ConnectedStandby</source>
          <target>System.Fundamentals.Firmware.CS.UEFISecureBoot.ConnectedStandby</target>
        </segment>
      </unit>
      <unit id="372">
        <segment state="initial">
          <source>Virtualization extensions</source>
          <target>Virtualization extensions</target>
        </segment>
      </unit>
      <unit id="373">
        <segment state="initial">
          <source>The following virtualization extensions are required to support virtualization-based security:</source>
          <target>The following virtualization extensions are required to support virtualization-based security:</target>
        </segment>
      </unit>
      <unit id="374">
        <segment state="initial">
          <source>Intel VT-x or AMD-V</source>
          <target>Intel VT-x or AMD-V</target>
        </segment>
      </unit>
      <unit id="375">
        <segment state="initial">
          <source>Second Level Address Translation</source>
          <target>Second Level Address Translation</target>
        </segment>
      </unit>
      <unit id="376">
        <segment state="initial">
          <source>Firmware lock</source>
          <target>Firmware lock</target>
        </segment>
      </unit>
      <unit id="377">
        <segment state="initial">
          <source>The firmware setup should be locked to prevent other operating systems from starting and to prevent changes to the UEFI settings.</source>
          <target>The firmware setup should be locked to prevent other operating systems from starting and to prevent changes to the UEFI settings.</target>
        </segment>
      </unit>
      <unit id="378">
        <segment state="initial">
          <source>Work with your hardware manufacturer to ensure that the devices are Device Guard ready.</source>
          <target>Work with your hardware manufacturer to ensure that the devices are Device Guard ready.</target>
        </segment>
      </unit>
      <unit id="379">
        <segment state="initial">
          <source>You should require a firmware password or higher authentication to change firmware settings.</source>
          <target>You should require a firmware password or higher authentication to change firmware settings.</target>
        </segment>
      </unit>
      <unit id="380">
        <segment state="initial">
          <source>x64 architecture</source>
          <target>x64 architecture</target>
        </segment>
      </unit>
      <unit id="381">
        <segment state="initial">
          <source>The features that virtualization-based security uses in the Windows hypervisor can only run on a 64-bit PC.</source>
          <target>The features that virtualization-based security uses in the Windows hypervisor can only run on a 64-bit PC.</target>
        </segment>
      </unit>
      <unit id="382">
        <segment state="initial">
          <source>A VT-d or AMD-Vi IOMMU (Input/output memory management unit)</source>
          <target>A VT-d or AMD-Vi IOMMU (Input/output memory management unit)</target>
        </segment>
      </unit>
      <unit id="383">
        <segment state="initial">
          <source>In Windows 10, an IOMMU enhances system resiliency against memory attacks.</source>
          <target>In Windows 10, an IOMMU enhances system resiliency against memory attacks.</target>
        </segment>
      </unit>
      <unit id="384">
        <segment state="initial">
          <source>Secure firmware update process</source>
          <target>Secure firmware update process</target>
        </segment>
      </unit>
      <unit id="385">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://msdn.microsoft.com/library/windows/hardware/dn932805.aspx#system-fundamentals-firmware-uefisecureboot)</data>
        </originalData>
        <segment state="initial">
          <source>To verify that the firmware complies with the secure firmware update process, you can validate it against the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Fundamentals.Firmware.UEFISecureBoot</pc> Windows Hardware Compatibility Program requirement.</source>
          <target>To verify that the firmware complies with the secure firmware update process, you can validate it against the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System.Fundamentals.Firmware.UEFISecureBoot</pc> Windows Hardware Compatibility Program requirement.</target>
        </segment>
      </unit>
      <unit id="386">
        <segment state="initial">
          <source>Device Guard relies on the security of the underlying hardware and firmware.</source>
          <target>Device Guard relies on the security of the underlying hardware and firmware.</target>
        </segment>
      </unit>
      <unit id="387">
        <segment state="initial">
          <source>It is critical to keep the firmware updated with the latest security fixes.</source>
          <target>It is critical to keep the firmware updated with the latest security fixes.</target>
        </segment>
      </unit>
      <unit id="388">
        <segment state="initial">
          <source>Signed processor microcode updates</source>
          <target>Signed processor microcode updates</target>
        </segment>
      </unit>
      <unit id="389">
        <segment state="initial">
          <source>If the processor supports it, you must require signed microcode updates.</source>
          <target>If the processor supports it, you must require signed microcode updates.</target>
        </segment>
      </unit>
      <unit id="390">
        <segment state="initial">
          <source>Device Guard deployment</source>
          <target>Device Guard deployment</target>
        </segment>
      </unit>
      <unit id="391">
        <segment state="initial">
          <source>In this section, you learn about the following topics:</source>
          <target>In this section, you learn about the following topics:</target>
        </segment>
      </unit>
      <unit id="392">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#configure-hardware-based-security-features)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure hardware-based security features</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure hardware-based security features</pc>.</target>
        </segment>
      </unit>
      <unit id="393">
        <segment state="initial">
          <source>This section explains how to enable the hardware-based security features in Device Guard.</source>
          <target>This section explains how to enable the hardware-based security features in Device Guard.</target>
        </segment>
      </unit>
      <unit id="394">
        <segment state="initial">
          <source>Also, you verify that the features are enabled by using both Windows Management Infrastructure (WMI) and Msinfo32.exe.</source>
          <target>Also, you verify that the features are enabled by using both Windows Management Infrastructure (WMI) and Msinfo32.exe.</target>
        </segment>
      </unit>
      <unit id="395">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc>.</target>
        </segment>
      </unit>
      <unit id="396">
        <segment state="initial">
          <source>In this section, you create, sign, and deploy catalog files.</source>
          <target>In this section, you create, sign, and deploy catalog files.</target>
        </segment>
      </unit>
      <unit id="397">
        <segment state="initial">
          <source>You deploy the catalog files by using both Group Policy and System Center Configuration Manager.</source>
          <target>You deploy the catalog files by using both Group Policy and System Center Configuration Manager.</target>
        </segment>
      </unit>
      <unit id="398">
        <segment state="initial">
          <source>Also, you use System Center Configuration Manager to inventory the deployed catalog files for reporting purposes.</source>
          <target>Also, you use System Center Configuration Manager to inventory the deployed catalog files for reporting purposes.</target>
        </segment>
      </unit>
      <unit id="399">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policies</pc>.</target>
        </segment>
      </unit>
      <unit id="400">
        <segment state="initial">
          <source>This section provides information on how to create, audit, service, merge, deploy, and remove signed and unsigned configurable code integrity policies.</source>
          <target>This section provides information on how to create, audit, service, merge, deploy, and remove signed and unsigned configurable code integrity policies.</target>
        </segment>
      </unit>
      <unit id="401">
        <segment state="initial">
          <source>Configure hardware-based security features</source>
          <target>Configure hardware-based security features</target>
        </segment>
      </unit>
      <unit id="402">
        <segment state="initial">
          <source>Hardware-based security features make up a large part of Device Guard security offerings.</source>
          <target>Hardware-based security features make up a large part of Device Guard security offerings.</target>
        </segment>
      </unit>
      <unit id="403">
        <segment state="initial">
          <source>VBS reinforces the most important feature of Device Guard: configurable code integrity.</source>
          <target>VBS reinforces the most important feature of Device Guard: configurable code integrity.</target>
        </segment>
      </unit>
      <unit id="404">
        <segment state="initial">
          <source>There are three steps to configure hardware-based security features in Device Guard:</source>
          <target>There are three steps to configure hardware-based security features in Device Guard:</target>
        </segment>
      </unit>
      <unit id="405">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verify that hardware requirements are met and enabled</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Verify that hardware requirements are met and enabled</pc>.</target>
        </segment>
      </unit>
      <unit id="406">
        <segment state="initial">
          <source>Verify that your client machines possess the necessary hardware to run these features.</source>
          <target>Verify that your client machines possess the necessary hardware to run these features.</target>
        </segment>
      </unit>
      <unit id="407">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
        </originalData>
        <segment state="initial">
          <source>A list of hardware requirements for the hardware-based security features is available in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</source>
          <target>A list of hardware requirements for the hardware-based security features is available in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</target>
        </segment>
      </unit>
      <unit id="408">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable the necessary Windows features</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable the necessary Windows features</pc>.</target>
        </segment>
      </unit>
      <unit id="409">
        <segment state="initial">
          <source>There are several ways to enable the Windows features required for hardware-based security.</source>
          <target>There are several ways to enable the Windows features required for hardware-based security.</target>
        </segment>
      </unit>
      <unit id="410">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#windows-feature-requirements-for-virtualization-based-security)</data>
        </originalData>
        <segment state="initial">
          <source>For details on which Windows features are needed, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows feature requirements for virtualization-based security</pc> section.</source>
          <target>For details on which Windows features are needed, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows feature requirements for virtualization-based security</pc> section.</target>
        </segment>
      </unit>
      <unit id="411">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable desired features</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable desired features</pc>.</target>
        </segment>
      </unit>
      <unit id="412">
        <segment state="initial">
          <source>When the necessary hardware and Windows features have been enabled, you are ready to enable the desired hardware-based security features.</source>
          <target>When the necessary hardware and Windows features have been enabled, you are ready to enable the desired hardware-based security features.</target>
        </segment>
      </unit>
      <unit id="413">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-unified-extensible-interface-secure-boot)</data>
        </originalData>
        <segment state="initial">
          <source>For UEFI Secure Boot, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable UEFI Secure Boot</pc> section.</source>
          <target>For UEFI Secure Boot, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable UEFI Secure Boot</pc> section.</target>
        </segment>
      </unit>
      <unit id="414">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-virtualbased)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to enable VBS protection of the KMCI service, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable virtualization-based protection of kernel mode code integrity</pc> section.</source>
          <target>For information about how to enable VBS protection of the KMCI service, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable virtualization-based protection of kernel mode code integrity</pc> section.</target>
        </segment>
      </unit>
      <unit id="415">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-credential-guard)</data>
        </originalData>
        <segment state="initial">
          <source>Finally, for information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</source>
          <target>Finally, for information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</target>
        </segment>
      </unit>
      <unit id="416">
        <segment state="initial">
          <source>Windows feature requirements for virtualization-based security</source>
          <target>Windows feature requirements for virtualization-based security</target>
        </segment>
      </unit>
      <unit id="417">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
        </originalData>
        <segment state="initial">
          <source>In addition to the hardware requirements found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, you must enable certain operating system features before you can enable VBS: Microsoft Hyper-V and isolated user mode (shown in Figure 1).</source>
          <target>In addition to the hardware requirements found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, you must enable certain operating system features before you can enable VBS: Microsoft Hyper-V and isolated user mode (shown in Figure 1).</target>
        </segment>
      </unit>
      <unit id="418">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You can configure these features manually by using Windows PowerShell or Deployment Image Servicing and Management.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You can configure these features manually by using Windows PowerShell or Deployment Image Servicing and Management.</target>
        </segment>
      </unit>
      <unit id="419">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=624529)</data>
        </originalData>
        <segment state="initial">
          <source>For specific information about these methods, refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Credential Guard documentation</pc>.</source>
          <target>For specific information about these methods, refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Credential Guard documentation</pc>.</target>
        </segment>
      </unit>
      <unit id="420">
        <segment state="initial">
          <source>figure 1</source>
          <target>figure 1</target>
        </segment>
      </unit>
      <unit id="421">
        <segment state="initial">
          <source>Figure 1.</source>
          <target>Figure 1.</target>
        </segment>
      </unit>
      <unit id="422">
        <segment state="initial">
          <source>Enable operating system features for VBS</source>
          <target>Enable operating system features for VBS</target>
        </segment>
      </unit>
      <unit id="423">
        <segment state="initial">
          <source>After you enable these features, you can configure any hardware-based security features you want.</source>
          <target>After you enable these features, you can configure any hardware-based security features you want.</target>
        </segment>
      </unit>
      <unit id="424">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-virtualization-based-protection-of-kernel-mode-code-integrity)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to enable virtualization-based protection of kernel-mode code integrity, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable virtualization-based protection of kernel-mode code integrity</pc> section.</source>
          <target>For information about how to enable virtualization-based protection of kernel-mode code integrity, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable virtualization-based protection of kernel-mode code integrity</pc> section.</target>
        </segment>
      </unit>
      <unit id="425">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-unified-extensible-interface-secure-boot)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to enable UEFI Secure Boot, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable UEFI Secure Boot</pc> section.</source>
          <target>For information about how to enable UEFI Secure Boot, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable UEFI Secure Boot</pc> section.</target>
        </segment>
      </unit>
      <unit id="426">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#enable-credential-guard)</data>
        </originalData>
        <segment state="initial">
          <source>Finally, for additional information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</source>
          <target>Finally, for additional information about how to enable Credential Guard, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable Credential Guard</pc> section.</target>
        </segment>
      </unit>
      <unit id="427">
        <segment state="initial">
          <source>Enable Unified Extensible Firmware Interface Secure Boot</source>
          <target>Enable Unified Extensible Firmware Interface Secure Boot</target>
        </segment>
      </unit>
      <unit id="428">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
        </originalData>
        <segment state="initial">
          <source>Before you begin this process, verify that the target device meets the hardware requirements for UEFI Secure Boot that are laid out in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</source>
          <target>Before you begin this process, verify that the target device meets the hardware requirements for UEFI Secure Boot that are laid out in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section.</target>
        </segment>
      </unit>
      <unit id="429">
        <segment state="initial">
          <source>There are two options to configure UEFI Secure Boot: manual configuration of the appropriate registry keys and Group Policy deployment.</source>
          <target>There are two options to configure UEFI Secure Boot: manual configuration of the appropriate registry keys and Group Policy deployment.</target>
        </segment>
      </unit>
      <unit id="430">
        <segment state="initial">
          <source>Complete the following steps to manually configure UEFI Secure Boot on a computer running Windows 10:</source>
          <target>Complete the following steps to manually configure UEFI Secure Boot on a computer running Windows 10:</target>
        </segment>
      </unit>
      <unit id="431">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  There are two platform security levels for Secure Boot: stand-alone Secure Boot and Secure Boot with DMA protection.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  There are two platform security levels for Secure Boot: stand-alone Secure Boot and Secure Boot with DMA protection.</target>
        </segment>
      </unit>
      <unit id="432">
        <segment state="initial">
          <source>DMA protection provides additional memory protection but will be enabled only on systems whose processors include DMA protection (IOMMU) technologies.</source>
          <target>DMA protection provides additional memory protection but will be enabled only on systems whose processors include DMA protection (IOMMU) technologies.</target>
        </segment>
      </unit>
      <unit id="433">
        <segment state="initial">
          <source>Without the presence of IOMMUs and with DMA protection disabled, customers will lose protection from driver-based attacks.</source>
          <target>Without the presence of IOMMUs and with DMA protection disabled, customers will lose protection from driver-based attacks.</target>
        </segment>
      </unit>
      <unit id="434">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />DeviceGuard</pc> registry subkey.</source>
          <target>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />DeviceGuard</pc> registry subkey.</target>
        </segment>
      </unit>
      <unit id="435">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnableVirtualizationBasedSecurity DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</source>
          <target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">EnableVirtualizationBasedSecurity DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</target>
        </segment>
      </unit>
      <unit id="436">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RequirePlatformSecurityFeatures DWORD</pc> value as appropriate:</source>
          <target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RequirePlatformSecurityFeatures DWORD</pc> value as appropriate:</target>
        </segment>
      </unit>
      <unit id="437">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set this value to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">1</pc> to enable the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot</pc> option.</source>
          <target>Set this value to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">1</pc> to enable the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot</pc> option.</target>
        </segment>
      </unit>
      <unit id="438">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set this value to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2</pc> to enable the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot with DMA Protection</pc> option.</source>
          <target>Set this value to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">2</pc> to enable the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot with DMA Protection</pc> option.</target>
        </segment>
      </unit>
      <unit id="439">
        <segment state="initial">
          <source>Restart the client machine.</source>
          <target>Restart the client machine.</target>
        </segment>
      </unit>
      <unit id="440">
        <segment state="initial">
          <source>Unfortunately, it would be time consuming to perform these steps manually on every protected machine in your enterprise.</source>
          <target>Unfortunately, it would be time consuming to perform these steps manually on every protected machine in your enterprise.</target>
        </segment>
      </unit>
      <unit id="441">
        <segment state="initial">
          <source>Group Policy offers a much simpler way to deploy UEFI Secure Boot to your organization.</source>
          <target>Group Policy offers a much simpler way to deploy UEFI Secure Boot to your organization.</target>
        </segment>
      </unit>
      <unit id="442">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example creates a test organizational unit (OU) called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>.</source>
          <target>This example creates a test organizational unit (OU) called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>.</target>
        </segment>
      </unit>
      <unit id="443">
        <segment state="initial">
          <source>If you prefer to link the policy to an existing OU, and then scope the GPO by using appropriately named computer security groups, you can certainly do so.</source>
          <target>If you prefer to link the policy to an existing OU, and then scope the GPO by using appropriately named computer security groups, you can certainly do so.</target>
        </segment>
      </unit>
      <unit id="444">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you test-enable this feature on a group of test machines before you deploy it to machines that are currently deployed to users.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you test-enable this feature on a group of test machines before you deploy it to machines that are currently deployed to users.</target>
        </segment>
      </unit>
      <unit id="445">
        <segment state="initial">
          <source>Use Group Policy to deploy Secure Boot</source>
          <target>Use Group Policy to deploy Secure Boot</target>
        </segment>
      </unit>
      <unit id="446">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To create a new GPO, right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>.</source>
          <target>To create a new GPO, right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>.</target>
        </segment>
      </unit>
      <unit id="447">
        <segment state="initial">
          <source>figure 2</source>
          <target>figure 2</target>
        </segment>
      </unit>
      <unit id="448">
        <segment state="initial">
          <source>Figure 2.</source>
          <target>Figure 2.</target>
        </segment>
      </unit>
      <unit id="449">
        <segment state="initial">
          <source>Create a new OU-linked GPO</source>
          <target>Create a new OU-linked GPO</target>
        </segment>
      </unit>
      <unit id="450">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Secure Boot GPO Test</pc>.</source>
          <target>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Secure Boot GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="451">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Secure Boot GPO Test</pc> as the name of the GPO.</source>
          <target>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Secure Boot GPO Test</pc> as the name of the GPO.</target>
        </segment>
      </unit>
      <unit id="452">
        <segment state="initial">
          <source>You can choose any name for this example.</source>
          <target>You can choose any name for this example.</target>
        </segment>
      </unit>
      <unit id="453">
        <segment state="initial">
          <source>Ideally, the name would align with your existing GPO naming convention.</source>
          <target>Ideally, the name would align with your existing GPO naming convention.</target>
        </segment>
      </unit>
      <unit id="454">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To open the Group Policy Management Editor, right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</source>
          <target>To open the Group Policy Management Editor, right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="455">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</source>
          <target>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</target>
        </segment>
      </unit>
      <unit id="456">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</source>
          <target>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="457">
        <segment state="initial">
          <source>figure 3</source>
          <target>figure 3</target>
        </segment>
      </unit>
      <unit id="458">
        <segment state="initial">
          <source>Figure 3.</source>
          <target>Figure 3.</target>
        </segment>
      </unit>
      <unit id="459">
        <segment state="initial">
          <source>Enable VBS</source>
          <target>Enable VBS</target>
        </segment>
      </unit>
      <unit id="460">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot and DMA Protection</pc> from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Select Platform Security Level</pc> list.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot and DMA Protection</pc> from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Select Platform Security Level</pc> list.</target>
        </segment>
      </unit>
      <unit id="461">
        <segment state="initial">
          <source>figure 4</source>
          <target>figure 4</target>
        </segment>
      </unit>
      <unit id="462">
        <segment state="initial">
          <source>Figure 4.</source>
          <target>Figure 4.</target>
        </segment>
      </unit>
      <unit id="463">
        <segment state="initial">
          <source>Enable Secure Boot</source>
          <target>Enable Secure Boot</target>
        </segment>
      </unit>
      <unit id="464">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Device Guard Secure Boot is maximized when combined with DMA protection.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Device Guard Secure Boot is maximized when combined with DMA protection.</target>
        </segment>
      </unit>
      <unit id="465">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If your hardware contains the IOMMUs required for DMA protection, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Secure Boot and DMA Protection</pc> platform security level.</source>
          <target>If your hardware contains the IOMMUs required for DMA protection, be sure to select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Secure Boot and DMA Protection</pc> platform security level.</target>
        </segment>
      </unit>
      <unit id="466">
        <segment state="initial">
          <source>If your hardware does not contain IOMMU, there are several mitigations provided by leveraging Secure Boot without DMA Protection.</source>
          <target>If your hardware does not contain IOMMU, there are several mitigations provided by leveraging Secure Boot without DMA Protection.</target>
        </segment>
      </unit>
      <unit id="467">
        <segment state="initial">
          <source>Close the Group Policy Management Editor, and then restart the Windows 10 test computer.</source>
          <target>Close the Group Policy Management Editor, and then restart the Windows 10 test computer.</target>
        </segment>
      </unit>
      <unit id="468">
        <segment state="initial">
          <source>After you configure this setting, UEFI Secure Boot will be enabled upon restart.</source>
          <target>After you configure this setting, UEFI Secure Boot will be enabled upon restart.</target>
        </segment>
      </unit>
      <unit id="469">
        <segment state="initial">
          <source>Check the test computer’s event log for Device Guard GPOs.</source>
          <target>Check the test computer’s event log for Device Guard GPOs.</target>
        </segment>
      </unit>
      <unit id="470">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>Processed Device Guard policies are logged in event viewer at Application and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Windows<ph dataRef="id3" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id4" id="ph4" />Operational.</source>
          <target>Processed Device Guard policies are logged in event viewer at Application and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Windows<ph dataRef="id3" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id4" id="ph4" />Operational.</target>
        </segment>
      </unit>
      <unit id="471">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc> policy is successfully processed, event ID 7000 is logged, which contains the selected settings within the policy.</source>
          <target>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc> policy is successfully processed, event ID 7000 is logged, which contains the selected settings within the policy.</target>
        </segment>
      </unit>
      <unit id="472">
        <segment state="initial">
          <source>Enable virtualization-based security of kernel-mode code integrity</source>
          <target>Enable virtualization-based security of kernel-mode code integrity</target>
        </segment>
      </unit>
      <unit id="473">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware-considerations)</data>
          <data id="id3">[</data>
          <data id="id4">](#virtualization-based-security-windows-featurerrequirements)</data>
        </originalData>
        <segment state="initial">
          <source>Before you begin this process, verify that the desired computer meets the hardware requirements for VBS found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, and enable the Windows features discussed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Virtualization-based security Windows feature requirements</pc> section.</source>
          <target>Before you begin this process, verify that the desired computer meets the hardware requirements for VBS found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, and enable the Windows features discussed in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Virtualization-based security Windows feature requirements</pc> section.</target>
        </segment>
      </unit>
      <unit id="474">
        <segment state="initial">
          <source>When validated, you can enable virtualization-based protection of KMCI in one of two ways: manual configuration of the appropriate registry subkeys and Group Policy deployment.</source>
          <target>When validated, you can enable virtualization-based protection of KMCI in one of two ways: manual configuration of the appropriate registry subkeys and Group Policy deployment.</target>
        </segment>
      </unit>
      <unit id="475">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  All drivers on the system must be compatible with virtualization-based protection of code integrity; otherwise, your system may fail.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  All drivers on the system must be compatible with virtualization-based protection of code integrity; otherwise, your system may fail.</target>
        </segment>
      </unit>
      <unit id="476">
        <segment state="initial">
          <source>Microsoft recommends that you enable this feature on a group of test machines before you enable it on deployed machines.</source>
          <target>Microsoft recommends that you enable this feature on a group of test machines before you enable it on deployed machines.</target>
        </segment>
      </unit>
      <unit id="477">
        <segment state="initial">
          <source>To configure virtualization-based protection of KMCI manually:</source>
          <target>To configure virtualization-based protection of KMCI manually:</target>
        </segment>
      </unit>
      <unit id="478">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />DeviceGuard</pc> registry subkey.</source>
          <target>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />DeviceGuard</pc> registry subkey.</target>
        </segment>
      </unit>
      <unit id="479">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HypervisorEnforcedCodeIntegrity DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</source>
          <target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HypervisorEnforcedCodeIntegrity DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</target>
        </segment>
      </unit>
      <unit id="480">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="481">
        <segment state="initial">
          <source>It would be time consuming to perform these steps manually on every protected machine in your enterprise.</source>
          <target>It would be time consuming to perform these steps manually on every protected machine in your enterprise.</target>
        </segment>
      </unit>
      <unit id="482">
        <segment state="initial">
          <source>Instead, use Group Policy to deploy virtualization-based protection of KMCI.</source>
          <target>Instead, use Group Policy to deploy virtualization-based protection of KMCI.</target>
        </segment>
      </unit>
      <unit id="483">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example creates a test OU called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>, which you will use to link the GPO.</source>
          <target>This example creates a test OU called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>, which you will use to link the GPO.</target>
        </segment>
      </unit>
      <unit id="484">
        <segment state="initial">
          <source>If you prefer to link the policy to an existing OU rather than create a test OU and scope the policy by using appropriately named computer security groups, that is another option.</source>
          <target>If you prefer to link the policy to an existing OU rather than create a test OU and scope the policy by using appropriately named computer security groups, that is another option.</target>
        </segment>
      </unit>
      <unit id="485">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you test-enable this feature on a group of test computers before you deploy it to machines that are currently deployed to users.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you test-enable this feature on a group of test computers before you deploy it to machines that are currently deployed to users.</target>
        </segment>
      </unit>
      <unit id="486">
        <segment state="initial">
          <source>If untested, there is a possibility that this feature can cause system instability and ultimately cause the client operating system to fail.</source>
          <target>If untested, there is a possibility that this feature can cause system instability and ultimately cause the client operating system to fail.</target>
        </segment>
      </unit>
      <unit id="487">
        <segment state="initial">
          <source>To use Group Policy to configure VBS of KMCI:</source>
          <target>To use Group Policy to configure VBS of KMCI:</target>
        </segment>
      </unit>
      <unit id="488">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a new GPO: Right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>.</source>
          <target>Create a new GPO: Right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>.</target>
        </segment>
      </unit>
      <unit id="489">
        <segment state="initial">
          <source>figure 5</source>
          <target>figure 5</target>
        </segment>
      </unit>
      <unit id="490">
        <segment state="initial">
          <source>Figure 5.</source>
          <target>Figure 5.</target>
        </segment>
      </unit>
      <unit id="491">
        <segment state="initial">
          <source>Create a new OU-linked GPO</source>
          <target>Create a new OU-linked GPO</target>
        </segment>
      </unit>
      <unit id="492">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso VBS CI Protection GPO Test</pc>.</source>
          <target>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso VBS CI Protection GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="493">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso VBS CI Protection GPO Test</pc> as the name of the GPO.</source>
          <target>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso VBS CI Protection GPO Test</pc> as the name of the GPO.</target>
        </segment>
      </unit>
      <unit id="494">
        <segment state="initial">
          <source>You can choose any name you prefer for this example.</source>
          <target>You can choose any name you prefer for this example.</target>
        </segment>
      </unit>
      <unit id="495">
        <segment state="initial">
          <source>Ideally, this name would align with your existing GPO naming convention.</source>
          <target>Ideally, this name would align with your existing GPO naming convention.</target>
        </segment>
      </unit>
      <unit id="496">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the Group Policy Management Editor: Right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</source>
          <target>Open the Group Policy Management Editor: Right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="497">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</source>
          <target>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</target>
        </segment>
      </unit>
      <unit id="498">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</source>
          <target>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="499">
        <segment state="initial">
          <source>figure 6</source>
          <target>figure 6</target>
        </segment>
      </unit>
      <unit id="500">
        <segment state="initial">
          <source>Figure 6.</source>
          <target>Figure 6.</target>
        </segment>
      </unit>
      <unit id="501">
        <segment state="initial">
          <source>Enable VBS</source>
          <target>Enable VBS</target>
        </segment>
      </unit>
      <unit id="502">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable Virtualization Based Protection of Code Integrity</pc> check box.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable Virtualization Based Protection of Code Integrity</pc> check box.</target>
        </segment>
      </unit>
      <unit id="503">
        <segment state="initial">
          <source>figure 7</source>
          <target>figure 7</target>
        </segment>
      </unit>
      <unit id="504">
        <segment state="initial">
          <source>Figure 7.</source>
          <target>Figure 7.</target>
        </segment>
      </unit>
      <unit id="505">
        <segment state="initial">
          <source>Enable VBS of KMCI</source>
          <target>Enable VBS of KMCI</target>
        </segment>
      </unit>
      <unit id="506">
        <segment state="initial">
          <source>Close the Group Policy Management Editor, and then restart the Windows 10 test computer.</source>
          <target>Close the Group Policy Management Editor, and then restart the Windows 10 test computer.</target>
        </segment>
      </unit>
      <unit id="507">
        <segment state="initial">
          <source>With this setting configured, the VBS of the KMCI will take effect upon restart.</source>
          <target>With this setting configured, the VBS of the KMCI will take effect upon restart.</target>
        </segment>
      </unit>
      <unit id="508">
        <segment state="initial">
          <source>Check the test client event log for Device Guard GPOs.</source>
          <target>Check the test client event log for Device Guard GPOs.</target>
        </segment>
      </unit>
      <unit id="509">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>Processed Device Guard policies are logged in event viewer under Application and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Windows<ph dataRef="id3" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id4" id="ph4" />Operational.</source>
          <target>Processed Device Guard policies are logged in event viewer under Application and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Windows<ph dataRef="id3" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id4" id="ph4" />Operational.</target>
        </segment>
      </unit>
      <unit id="510">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc> policy has been successfully processed, event ID 7000 is logged, which contains the selected settings within the policy.</source>
          <target>When the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc> policy has been successfully processed, event ID 7000 is logged, which contains the selected settings within the policy.</target>
        </segment>
      </unit>
      <unit id="511">
        <segment state="initial">
          <source>Enable Credential Guard</source>
          <target>Enable Credential Guard</target>
        </segment>
      </unit>
      <unit id="512">
        <segment state="initial">
          <source>Credential Guard provides an additional layer of credential protection specifically for domain users by storing the credentials within the virtualized container, away from both the kernel and user mode operating system.</source>
          <target>Credential Guard provides an additional layer of credential protection specifically for domain users by storing the credentials within the virtualized container, away from both the kernel and user mode operating system.</target>
        </segment>
      </unit>
      <unit id="513">
        <segment state="initial">
          <source>This makes it difficult for even a compromised system to obtain access to the credentials.</source>
          <target>This makes it difficult for even a compromised system to obtain access to the credentials.</target>
        </segment>
      </unit>
      <unit id="514">
        <segment state="initial">
          <source>In addition to the client-side enablement of Credential Guard, you can deploy additional mitigations at both the Certification Authority and domain controller level to prevent credential theft.</source>
          <target>In addition to the client-side enablement of Credential Guard, you can deploy additional mitigations at both the Certification Authority and domain controller level to prevent credential theft.</target>
        </segment>
      </unit>
      <unit id="515">
        <segment state="initial">
          <source>Microsoft will be releasing details about these additional mitigations in the future.</source>
          <target>Microsoft will be releasing details about these additional mitigations in the future.</target>
        </segment>
      </unit>
      <unit id="516">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#hardware)</data>
          <data id="id3">[</data>
          <data id="id4">](#virtualization-based-security-windows-feature-requirements)</data>
        </originalData>
        <segment state="initial">
          <source>Before you begin this process, verify that the desired system meets the hardware requirements for VBS found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, and that you have enabled the Windows features laid out in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Virtualization-based security Windows feature requirements</pc> section.</source>
          <target>Before you begin this process, verify that the desired system meets the hardware requirements for VBS found in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Hardware considerations</pc> section, and that you have enabled the Windows features laid out in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Virtualization-based security Windows feature requirements</pc> section.</target>
        </segment>
      </unit>
      <unit id="517">
        <segment state="initial">
          <source>When validated, you can enable Credential Guard manually, by configuring the appropriate registry subkeys, or through Group Policy deployment.</source>
          <target>When validated, you can enable Credential Guard manually, by configuring the appropriate registry subkeys, or through Group Policy deployment.</target>
        </segment>
      </unit>
      <unit id="518">
        <segment state="initial">
          <source>To configure VBS of Credential Guard manually:</source>
          <target>To configure VBS of Credential Guard manually:</target>
        </segment>
      </unit>
      <unit id="519">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\_</data>
          <data id="id4">\_</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />Lsa</pc> registry subkey.</source>
          <target>Navigate to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">HKEY<ph dataRef="id3" id="ph1" />LOCAL<ph dataRef="id4" id="ph2" />MACHINE<ph dataRef="id5" id="ph3" />SYSTEM<ph dataRef="id6" id="ph4" />CurrentControlSet<ph dataRef="id7" id="ph5" />Control<ph dataRef="id8" id="ph6" />Lsa</pc> registry subkey.</target>
        </segment>
      </unit>
      <unit id="520">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LsaCfgFlags DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</source>
          <target>Set the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">LsaCfgFlags DWORD</pc> value to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">1</pc>.</target>
        </segment>
      </unit>
      <unit id="521">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="522">
        <segment state="initial">
          <source>To avoid spending an unnecessary amount of time in manual deployments, use Group Policy to deploy Credential Guard to your organization.</source>
          <target>To avoid spending an unnecessary amount of time in manual deployments, use Group Policy to deploy Credential Guard to your organization.</target>
        </segment>
      </unit>
      <unit id="523">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example creates a test OU called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>.</source>
          <target>This example creates a test OU called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Enabled PCs</pc>.</target>
        </segment>
      </unit>
      <unit id="524">
        <segment state="initial">
          <source>To enable Credential Guard, you can link to any OU, and then scope the GPO’s application by using security groups.</source>
          <target>To enable Credential Guard, you can link to any OU, and then scope the GPO’s application by using security groups.</target>
        </segment>
      </unit>
      <unit id="525">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you enable Credential Guard before you join a machine to the domain to ensure that all credentials are properly protected.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you enable Credential Guard before you join a machine to the domain to ensure that all credentials are properly protected.</target>
        </segment>
      </unit>
      <unit id="526">
        <segment state="initial">
          <source>Setting the appropriate registry subkeys during your imaging process would be ideal to achieve this protection.</source>
          <target>Setting the appropriate registry subkeys during your imaging process would be ideal to achieve this protection.</target>
        </segment>
      </unit>
      <unit id="527">
        <segment state="initial">
          <source>To use Group Policy to enable Credential Guard:</source>
          <target>To use Group Policy to enable Credential Guard:</target>
        </segment>
      </unit>
      <unit id="528">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a new GPO: right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc> .</source>
          <target>Create a new GPO: right-click the OU to which you want to link the GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc> .</target>
        </segment>
      </unit>
      <unit id="529">
        <segment state="initial">
          <source>figure 8</source>
          <target>figure 8</target>
        </segment>
      </unit>
      <unit id="530">
        <segment state="initial">
          <source>Figure 8.</source>
          <target>Figure 8.</target>
        </segment>
      </unit>
      <unit id="531">
        <segment state="initial">
          <source>Create a new OU-linked GPO</source>
          <target>Create a new OU-linked GPO</target>
        </segment>
      </unit>
      <unit id="532">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Credential Guard GPO Test</pc>.</source>
          <target>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Credential Guard GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="533">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Credential Guard GPO Test</pc> as the name of the GPO.</source>
          <target>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso Credential Guard GPO Test</pc> as the name of the GPO.</target>
        </segment>
      </unit>
      <unit id="534">
        <segment state="initial">
          <source>You can choose any name you prefer for this example.</source>
          <target>You can choose any name you prefer for this example.</target>
        </segment>
      </unit>
      <unit id="535">
        <segment state="initial">
          <source>Ideally, this name would align with your existing GPO naming convention.</source>
          <target>Ideally, this name would align with your existing GPO naming convention.</target>
        </segment>
      </unit>
      <unit id="536">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</source>
          <target>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="537">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</source>
          <target>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</target>
        </segment>
      </unit>
      <unit id="538">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</source>
          <target>Right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Turn On Virtualization Based Security</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="539">
        <segment state="initial">
          <source>figure 9</source>
          <target>figure 9</target>
        </segment>
      </unit>
      <unit id="540">
        <segment state="initial">
          <source>Figure 9.</source>
          <target>Figure 9.</target>
        </segment>
      </unit>
      <unit id="541">
        <segment state="initial">
          <source>Enable VBS</source>
          <target>Enable VBS</target>
        </segment>
      </unit>
      <unit id="542">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable Credential Guard</pc> check box.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enabled</pc> option, and then select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable Credential Guard</pc> check box.</target>
        </segment>
      </unit>
      <unit id="543">
        <segment state="initial">
          <source>figure 10</source>
          <target>figure 10</target>
        </segment>
      </unit>
      <unit id="544">
        <segment state="initial">
          <source>Figure 10.</source>
          <target>Figure 10.</target>
        </segment>
      </unit>
      <unit id="545">
        <segment state="initial">
          <source>Enable Credential Guard</source>
          <target>Enable Credential Guard</target>
        </segment>
      </unit>
      <unit id="546">
        <segment state="initial">
          <source>Close Group Policy Management Editor, and then restart the Windows 10 test computer.</source>
          <target>Close Group Policy Management Editor, and then restart the Windows 10 test computer.</target>
        </segment>
      </unit>
      <unit id="547">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The default platform security level is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The default platform security level is <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Secure Boot</pc>.</target>
        </segment>
      </unit>
      <unit id="548">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>If IOMMUs are available within the protected machines, it is recommended that you select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Secure Boot and DMA Protection</pc> to maximize the mitigations that are available through Credential Guard.</source>
          <target>If IOMMUs are available within the protected machines, it is recommended that you select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Secure Boot and DMA Protection</pc> to maximize the mitigations that are available through Credential Guard.</target>
        </segment>
      </unit>
      <unit id="549">
        <segment state="initial">
          <source>Check the test client event log for Device Guard GPOs.</source>
          <target>Check the test client event log for Device Guard GPOs.</target>
        </segment>
      </unit>
      <unit id="550">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  All processed Device Guard policies are logged in event viewer under Application and Services Logs<ph dataRef="id3" id="ph1" />Microsoft<ph dataRef="id4" id="ph2" />Windows<ph dataRef="id5" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id6" id="ph4" />Operational.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note</pc>  All processed Device Guard policies are logged in event viewer under Application and Services Logs<ph dataRef="id3" id="ph1" />Microsoft<ph dataRef="id4" id="ph2" />Windows<ph dataRef="id5" id="ph3" />DeviceGuard-GPEXT<ph dataRef="id6" id="ph4" />Operational.</target>
        </segment>
      </unit>
      <unit id="551">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://go.microsoft.com/fwlink/p/?LinkId=624529)</data>
        </originalData>
        <segment state="initial">
          <source>For additional information about how Credential Guard works as well as additional configuration options, please refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Credential Guard documentation</pc>.</source>
          <target>For additional information about how Credential Guard works as well as additional configuration options, please refer to the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Credential Guard documentation</pc>.</target>
        </segment>
      </unit>
      <unit id="552">
        <segment state="initial">
          <source>Validate enabled Device Guard hardware-based security features</source>
          <target>Validate enabled Device Guard hardware-based security features</target>
        </segment>
      </unit>
      <unit id="553">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\_</data>
        </originalData>
        <segment state="initial">
          <source>Windows 10 and Windows Server 2016 and later have a WMI class for Device Guard–related properties and features: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Win32<ph dataRef="id3" id="ph1" />DeviceGuard</pc>.</source>
          <target>Windows 10 and Windows Server 2016 and later have a WMI class for Device Guard–related properties and features: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Win32<ph dataRef="id3" id="ph1" />DeviceGuard</pc>.</target>
        </segment>
      </unit>
      <unit id="554">
        <segment state="initial">
          <source>This class can be queried from an elevated Windows PowerShell session by using the following command:</source>
          <target>This class can be queried from an elevated Windows PowerShell session by using the following command:</target>
        </segment>
      </unit>
      <unit id="555">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Win32<ph dataRef="id5" id="ph1" />DeviceGuard</pc> WMI class is only available on the Enterprise edition of Windows 10.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Win32<ph dataRef="id5" id="ph1" />DeviceGuard</pc> WMI class is only available on the Enterprise edition of Windows 10.</target>
        </segment>
      </unit>
      <unit id="556">
        <segment state="initial">
          <source>The output of this command provides details of the available hardware-based security features as well as those features that are currently enabled.</source>
          <target>The output of this command provides details of the available hardware-based security features as well as those features that are currently enabled.</target>
        </segment>
      </unit>
      <unit id="557">
        <segment state="initial">
          <source>For detailed information about what each property means, refer to Table 1.</source>
          <target>For detailed information about what each property means, refer to Table 1.</target>
        </segment>
      </unit>
      <unit id="558">
        <segment state="initial">
          <source>Table 1.</source>
          <target>Table 1.</target>
        </segment>
      </unit>
      <unit id="559">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>Win32<ph dataRef="id1" id="ph1" />DeviceGuard properties</source>
          <target>Win32<ph dataRef="id1" id="ph1" />DeviceGuard properties</target>
        </segment>
      </unit>
      <unit id="560">
        <segment state="initial">
          <source>Properties</source>
          <target>Properties</target>
        </segment>
      </unit>
      <unit id="561">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="562">
        <segment state="initial">
          <source>Valid values</source>
          <target>Valid values</target>
        </segment>
      </unit>
      <unit id="563">
        <segment state="initial">
          <source>AvailableSecurityProperties</source>
          <target>AvailableSecurityProperties</target>
        </segment>
      </unit>
      <unit id="564">
        <segment state="initial">
          <source>This field helps to enumerate and report state on the relevant security properties for Device Guard.</source>
          <target>This field helps to enumerate and report state on the relevant security properties for Device Guard.</target>
        </segment>
      </unit>
      <unit id="565">
        <segment state="initial">
          <source>If present, no relevant properties exist on the device.</source>
          <target>If present, no relevant properties exist on the device.</target>
        </segment>
      </unit>
      <unit id="566">
        <segment state="initial">
          <source>If present, hypervisor support is available.</source>
          <target>If present, hypervisor support is available.</target>
        </segment>
      </unit>
      <unit id="567">
        <segment state="initial">
          <source>If present, Secure Boot is available.</source>
          <target>If present, Secure Boot is available.</target>
        </segment>
      </unit>
      <unit id="568">
        <segment state="initial">
          <source>If present, DMA protection is available.</source>
          <target>If present, DMA protection is available.</target>
        </segment>
      </unit>
      <unit id="569">
        <segment state="initial">
          <source>InstanceIdentifier</source>
          <target>InstanceIdentifier</target>
        </segment>
      </unit>
      <unit id="570">
        <segment state="initial">
          <source>A string that is unique to a particular device.</source>
          <target>A string that is unique to a particular device.</target>
        </segment>
      </unit>
      <unit id="571">
        <segment state="initial">
          <source>Determined by WMI.</source>
          <target>Determined by WMI.</target>
        </segment>
      </unit>
      <unit id="572">
        <segment state="initial">
          <source>RequiredSecurityProperties</source>
          <target>RequiredSecurityProperties</target>
        </segment>
      </unit>
      <unit id="573">
        <segment state="initial">
          <source>This field describes the required security properties to enable virtualization-based security.</source>
          <target>This field describes the required security properties to enable virtualization-based security.</target>
        </segment>
      </unit>
      <unit id="574">
        <segment state="initial">
          <source>Nothing is required.</source>
          <target>Nothing is required.</target>
        </segment>
      </unit>
      <unit id="575">
        <segment state="initial">
          <source>If present, Secure Boot is needed.</source>
          <target>If present, Secure Boot is needed.</target>
        </segment>
      </unit>
      <unit id="576">
        <segment state="initial">
          <source>If present, DMA protection is needed.</source>
          <target>If present, DMA protection is needed.</target>
        </segment>
      </unit>
      <unit id="577">
        <segment state="initial">
          <source>If present, both Secure Boot and DMA protection are needed.</source>
          <target>If present, both Secure Boot and DMA protection are needed.</target>
        </segment>
      </unit>
      <unit id="578">
        <segment state="initial">
          <source>SecurityServicesConfigured</source>
          <target>SecurityServicesConfigured</target>
        </segment>
      </unit>
      <unit id="579">
        <segment state="initial">
          <source>This field indicates whether the Credential Guard or HVCI service has been configured.</source>
          <target>This field indicates whether the Credential Guard or HVCI service has been configured.</target>
        </segment>
      </unit>
      <unit id="580">
        <segment state="initial">
          <source>No services configured.</source>
          <target>No services configured.</target>
        </segment>
      </unit>
      <unit id="581">
        <segment state="initial">
          <source>If present, Credential Guard is configured.</source>
          <target>If present, Credential Guard is configured.</target>
        </segment>
      </unit>
      <unit id="582">
        <segment state="initial">
          <source>If present, HVCI is configured.</source>
          <target>If present, HVCI is configured.</target>
        </segment>
      </unit>
      <unit id="583">
        <segment state="initial">
          <source>SecurityServicesRunning</source>
          <target>SecurityServicesRunning</target>
        </segment>
      </unit>
      <unit id="584">
        <segment state="initial">
          <source>This field indicates whether the Credential Guard or HVCI service is running.</source>
          <target>This field indicates whether the Credential Guard or HVCI service is running.</target>
        </segment>
      </unit>
      <unit id="585">
        <segment state="initial">
          <source>No services running.</source>
          <target>No services running.</target>
        </segment>
      </unit>
      <unit id="586">
        <segment state="initial">
          <source>If present, Credential Guard is running.</source>
          <target>If present, Credential Guard is running.</target>
        </segment>
      </unit>
      <unit id="587">
        <segment state="initial">
          <source>If present, HVCI is running.</source>
          <target>If present, HVCI is running.</target>
        </segment>
      </unit>
      <unit id="588">
        <segment state="initial">
          <source>Version</source>
          <target>Version</target>
        </segment>
      </unit>
      <unit id="589">
        <segment state="initial">
          <source>This field lists the version of this WMI class.</source>
          <target>This field lists the version of this WMI class.</target>
        </segment>
      </unit>
      <unit id="590">
        <originalData>
          <data id="id1">&lt;strong&gt;</data>
          <data id="id2">&lt;/strong&gt;</data>
        </originalData>
        <segment state="initial">
          <source>The only valid value now is <ph dataRef="id1" id="ph1" />1.0<ph dataRef="id2" id="ph2" />.</source>
          <target>The only valid value now is <ph dataRef="id1" id="ph1" />1.0<ph dataRef="id2" id="ph2" />.</target>
        </segment>
      </unit>
      <unit id="591">
        <segment state="initial">
          <source>VirtualizationBasedSecurityStatus</source>
          <target>VirtualizationBasedSecurityStatus</target>
        </segment>
      </unit>
      <unit id="592">
        <segment state="initial">
          <source>This field indicates whether VBS is enabled and running.</source>
          <target>This field indicates whether VBS is enabled and running.</target>
        </segment>
      </unit>
      <unit id="593">
        <segment state="initial">
          <source>VBS is not enabled.</source>
          <target>VBS is not enabled.</target>
        </segment>
      </unit>
      <unit id="594">
        <segment state="initial">
          <source>VBS is enabled but not running.</source>
          <target>VBS is enabled but not running.</target>
        </segment>
      </unit>
      <unit id="595">
        <segment state="initial">
          <source>VBS is enabled and running.</source>
          <target>VBS is enabled and running.</target>
        </segment>
      </unit>
      <unit id="596">
        <segment state="initial">
          <source>PSComputerName</source>
          <target>PSComputerName</target>
        </segment>
      </unit>
      <unit id="597">
        <segment state="initial">
          <source>This field lists the computer name.</source>
          <target>This field lists the computer name.</target>
        </segment>
      </unit>
      <unit id="598">
        <segment state="initial">
          <source>All valid values for computer name.</source>
          <target>All valid values for computer name.</target>
        </segment>
      </unit>
      <unit id="599">
        <segment state="initial">
          <source>Another method to determine the available and enabled Device Guard features is to run msinfo32.exe from an elevated PowerShell session.</source>
          <target>Another method to determine the available and enabled Device Guard features is to run msinfo32.exe from an elevated PowerShell session.</target>
        </segment>
      </unit>
      <unit id="600">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When you run this program, the Device Guard properties are displayed at the bottom of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System Summary</pc> section, as shown in Figure 11.</source>
          <target>When you run this program, the Device Guard properties are displayed at the bottom of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">System Summary</pc> section, as shown in Figure 11.</target>
        </segment>
      </unit>
      <unit id="601">
        <segment state="initial">
          <source>figure 11</source>
          <target>figure 11</target>
        </segment>
      </unit>
      <unit id="602">
        <segment state="initial">
          <source>Figure 11.</source>
          <target>Figure 11.</target>
        </segment>
      </unit>
      <unit id="603">
        <segment state="initial">
          <source>Device Guard properties in the System Summary</source>
          <target>Device Guard properties in the System Summary</target>
        </segment>
      </unit>
      <unit id="604">
        <segment state="initial">
          <source>Catalog files</source>
          <target>Catalog files</target>
        </segment>
      </unit>
      <unit id="605">
        <segment state="initial">
          <source>Enforcement of Device Guard on a system requires that every trusted application have a signature or its binary hashes added to the code integrity policy.</source>
          <target>Enforcement of Device Guard on a system requires that every trusted application have a signature or its binary hashes added to the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="606">
        <segment state="initial">
          <source>For many organizations, this can be an issue when considering unsigned LOB applications.</source>
          <target>For many organizations, this can be an issue when considering unsigned LOB applications.</target>
        </segment>
      </unit>
      <unit id="607">
        <segment state="initial">
          <source>To avoid the requirement that organizations repackage and sign these applications, Windows 10 includes a tool called Package Inspector that monitors an installation process for any deployed and executed binary files.</source>
          <target>To avoid the requirement that organizations repackage and sign these applications, Windows 10 includes a tool called Package Inspector that monitors an installation process for any deployed and executed binary files.</target>
        </segment>
      </unit>
      <unit id="608">
        <segment state="initial">
          <source>If the tool discovers such files, it itemizes them in a catalog file.</source>
          <target>If the tool discovers such files, it itemizes them in a catalog file.</target>
        </segment>
      </unit>
      <unit id="609">
        <segment state="initial">
          <source>These catalog files offer you a way to trust your existing unsigned applications, whether developed in house or by a third party, as well as trust signed applications for which you do not want to trust the signer but rather the specific application.</source>
          <target>These catalog files offer you a way to trust your existing unsigned applications, whether developed in house or by a third party, as well as trust signed applications for which you do not want to trust the signer but rather the specific application.</target>
        </segment>
      </unit>
      <unit id="610">
        <segment state="initial">
          <source>When created, these files can be signed, the signing certificates added to your existing code integrity policies, and the catalog files themselves distributed to the clients.</source>
          <target>When created, these files can be signed, the signing certificates added to your existing code integrity policies, and the catalog files themselves distributed to the clients.</target>
        </segment>
      </unit>
      <unit id="611">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The Enterprise edition of Windows 10 or Windows Server 2016 is required to create and use catalog files.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The Enterprise edition of Windows 10 or Windows Server 2016 is required to create and use catalog files.</target>
        </segment>
      </unit>
      <unit id="612">
        <segment state="initial">
          <source>Create catalog files</source>
          <target>Create catalog files</target>
        </segment>
      </unit>
      <unit id="613">
        <segment state="initial">
          <source>The creation of catalog files is the first step to add an unsigned application to a code integrity policy.</source>
          <target>The creation of catalog files is the first step to add an unsigned application to a code integrity policy.</target>
        </segment>
      </unit>
      <unit id="614">
        <segment state="initial">
          <source>To create a catalog file, copy each of the following commands into an elevated Windows PowerShell session, and then complete the steps:</source>
          <target>To create a catalog file, copy each of the following commands into an elevated Windows PowerShell session, and then complete the steps:</target>
        </segment>
      </unit>
      <unit id="615">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you establish a naming convention it makes it easier to detect deployed catalog files in the future.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you establish a naming convention it makes it easier to detect deployed catalog files in the future.</target>
        </segment>
      </unit>
      <unit id="616">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\*</data>
        </originalData>
        <segment state="initial">
          <source>In this guide, you will use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />-Contoso.cat</pc> as the naming convention.</source>
          <target>In this guide, you will use <pc dataRefEnd="id2" dataRefStart="id1" id="p1"><ph dataRef="id3" id="ph1" />-Contoso.cat</pc> as the naming convention.</target>
        </segment>
      </unit>
      <unit id="617">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#inventory-catalog-files-with-system-center-configuration-manager)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about why this practice is helpful to inventory or detect catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Inventory catalog files with System Center Configuration Manager</pc> section.</source>
          <target>For more information about why this practice is helpful to inventory or detect catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Inventory catalog files with System Center Configuration Manager</pc> section.</target>
        </segment>
      </unit>
      <unit id="618">
        <segment state="initial">
          <source>Be sure that a code integrity policy is currently running in audit mode.</source>
          <target>Be sure that a code integrity policy is currently running in audit mode.</target>
        </segment>
      </unit>
      <unit id="619">
        <segment state="initial">
          <source>Package Inspector does not always detect installation files that have been removed from the machine during the installation process.</source>
          <target>Package Inspector does not always detect installation files that have been removed from the machine during the installation process.</target>
        </segment>
      </unit>
      <unit id="620">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-integrity-policies-from-golden-pcs)</data>
          <data id="id3">[</data>
          <data id="id4">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>To ensure that these binaries are also trusted, the code integrity policy that you created and audited in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Audit code integrity policies</pc> sections should be deployed, in audit mode, to the system on which you are running Package Inspector.</source>
          <target>To ensure that these binaries are also trusted, the code integrity policy that you created and audited in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Audit code integrity policies</pc> sections should be deployed, in audit mode, to the system on which you are running Package Inspector.</target>
        </segment>
      </unit>
      <unit id="621">
        <segment state="initial">
          <source>Note</source>
          <target>Note</target>
        </segment>
      </unit>
      <unit id="622">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This process should <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> be performed on a system running an enforced Device Guard policy, only with a policy running in audit mode.</source>
          <target>This process should <pc dataRefEnd="id2" dataRefStart="id1" id="p1">not</pc> be performed on a system running an enforced Device Guard policy, only with a policy running in audit mode.</target>
        </segment>
      </unit>
      <unit id="623">
        <segment state="initial">
          <source>If a policy is currently being enforced, you will not be able to install and run the application.</source>
          <target>If a policy is currently being enforced, you will not be able to install and run the application.</target>
        </segment>
      </unit>
      <unit id="624">
        <segment state="initial">
          <source>Start Package Inspector, and then scan drive C:</source>
          <target>Start Package Inspector, and then scan drive C:</target>
        </segment>
      </unit>
      <unit id="625">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Package inspector can monitor installations on any local drive.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Package inspector can monitor installations on any local drive.</target>
        </segment>
      </unit>
      <unit id="626">
        <segment state="initial">
          <source>In this example, we install the application on drive C, but any other drive can be used.</source>
          <target>In this example, we install the application on drive C, but any other drive can be used.</target>
        </segment>
      </unit>
      <unit id="627">
        <segment state="initial">
          <source>Copy the installation media to drive C.</source>
          <target>Copy the installation media to drive C.</target>
        </segment>
      </unit>
      <unit id="628">
        <segment state="initial">
          <source>By copying the installation media to drive C, you ensure that Package Inspector detects and catalogs the actual installer.</source>
          <target>By copying the installation media to drive C, you ensure that Package Inspector detects and catalogs the actual installer.</target>
        </segment>
      </unit>
      <unit id="629">
        <segment state="initial">
          <source>If you skip this step, the future code integrity policy may trust the application to run but not be installed.</source>
          <target>If you skip this step, the future code integrity policy may trust the application to run but not be installed.</target>
        </segment>
      </unit>
      <unit id="630">
        <segment state="initial">
          <source>Install and launch the application.</source>
          <target>Install and launch the application.</target>
        </segment>
      </unit>
      <unit id="631">
        <segment state="initial">
          <source>Install the application to drive C. When the installation is finished, launch the application and ensure that any product updates are installed and any downloadable content caught during the scan.</source>
          <target>Install the application to drive C. When the installation is finished, launch the application and ensure that any product updates are installed and any downloadable content caught during the scan.</target>
        </segment>
      </unit>
      <unit id="632">
        <segment state="initial">
          <source>When finished, close and reopen the application once again to ensure that the scan has captured all binaries.</source>
          <target>When finished, close and reopen the application once again to ensure that the scan has captured all binaries.</target>
        </segment>
      </unit>
      <unit id="633">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>      Every binary that is run while Package Inspector is running will be captured in the catalog.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>      Every binary that is run while Package Inspector is running will be captured in the catalog.</target>
        </segment>
      </unit>
      <unit id="634">
        <segment state="initial">
          <source>Therefore, be sure not to run additional installations or updates during the scan to minimize the risk of trusting the incorrect binaries.</source>
          <target>Therefore, be sure not to run additional installations or updates during the scan to minimize the risk of trusting the incorrect binaries.</target>
        </segment>
      </unit>
      <unit id="635">
        <segment state="initial">
          <source>Alternatively, if you want to add multiple applications to a single catalog file, simply repeat the installation and run process while the current scan is running.</source>
          <target>Alternatively, if you want to add multiple applications to a single catalog file, simply repeat the installation and run process while the current scan is running.</target>
        </segment>
      </unit>
      <unit id="636">
        <segment state="initial">
          <source>Stop the scan, and then generate definition and catalog files.</source>
          <target>Stop the scan, and then generate definition and catalog files.</target>
        </segment>
      </unit>
      <unit id="637">
        <segment state="initial">
          <source>When application installation and initial setup are finished, stop the Package Inspector scan and generate the catalog and definition files on your desktop by using the following commands:</source>
          <target>When application installation and initial setup are finished, stop the Package Inspector scan and generate the catalog and definition files on your desktop by using the following commands:</target>
        </segment>
      </unit>
      <unit id="638">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This scan catalogs the hash values for each discovered binary file.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This scan catalogs the hash values for each discovered binary file.</target>
        </segment>
      </unit>
      <unit id="639">
        <segment state="initial">
          <source>If the applications that were scanned are updated, complete this process again to trust the new binaries’ hash values.</source>
          <target>If the applications that were scanned are updated, complete this process again to trust the new binaries’ hash values.</target>
        </segment>
      </unit>
      <unit id="640">
        <segment state="initial">
          <source>When finished, the files will be saved to your desktop.</source>
          <target>When finished, the files will be saved to your desktop.</target>
        </segment>
      </unit>
      <unit id="641">
        <segment state="initial">
          <source>To trust this catalog file within a code integrity policy, the catalog must first be signed.</source>
          <target>To trust this catalog file within a code integrity policy, the catalog must first be signed.</target>
        </segment>
      </unit>
      <unit id="642">
        <segment state="initial">
          <source>Then, the signing certificate can be included in the code integrity policy, and the catalog file can be distributed to the individual client machines.</source>
          <target>Then, the signing certificate can be included in the code integrity policy, and the catalog file can be distributed to the individual client machines.</target>
        </segment>
      </unit>
      <unit id="643">
        <segment state="initial">
          <source>Catalog files can be signed by using a certificate and SignTool.exe, a free tool available in the Windows SDK.</source>
          <target>Catalog files can be signed by using a certificate and SignTool.exe, a free tool available in the Windows SDK.</target>
        </segment>
      </unit>
      <unit id="644">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-signing-with-signtool.exe)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about signing catalog files with SignTool.exe, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog signing with SignTool.exe</pc> section.</source>
          <target>For more information about signing catalog files with SignTool.exe, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog signing with SignTool.exe</pc> section.</target>
        </segment>
      </unit>
      <unit id="645">
        <segment state="initial">
          <source>Catalog signing with SignTool.exe</source>
          <target>Catalog signing with SignTool.exe</target>
        </segment>
      </unit>
      <unit id="646">
        <segment state="initial">
          <source>Device Guard makes it easy for organizations to sign and trust existing unsigned LOB applications.</source>
          <target>Device Guard makes it easy for organizations to sign and trust existing unsigned LOB applications.</target>
        </segment>
      </unit>
      <unit id="647">
        <segment state="initial">
          <source>In this section, you sign a catalog file you generated in a previous section by using PackageInspector.exe.</source>
          <target>In this section, you sign a catalog file you generated in a previous section by using PackageInspector.exe.</target>
        </segment>
      </unit>
      <unit id="648">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to create catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section.</source>
          <target>For information about how to create catalog files, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="649">
        <segment state="initial">
          <source>In this example, you need the following:</source>
          <target>In this example, you need the following:</target>
        </segment>
      </unit>
      <unit id="650">
        <segment state="initial">
          <source>SignTool.exe, found in the Windows software development kit (SDK—Windows 7 or later)</source>
          <target>SignTool.exe, found in the Windows software development kit (SDK—Windows 7 or later)</target>
        </segment>
      </unit>
      <unit id="651">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>The catalog file that you generated in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section, or another catalog file that you have created</source>
          <target>The catalog file that you generated in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section, or another catalog file that you have created</target>
        </segment>
      </unit>
      <unit id="652">
        <segment state="initial">
          <source>Internal certification authority (CA) code signing certificate or purchased code signing certificate</source>
          <target>Internal certification authority (CA) code signing certificate or purchased code signing certificate</target>
        </segment>
      </unit>
      <unit id="653">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-a-device-guard-code-signing-certificate)</data>
        </originalData>
        <segment state="initial">
          <source>If you do not have a code signing certificate, please see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section for a walkthrough of how to create one.</source>
          <target>If you do not have a code signing certificate, please see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section for a walkthrough of how to create one.</target>
        </segment>
      </unit>
      <unit id="654">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>In addition to using the certificate you create in the Create a Device Guard code signing certificate section, this example signs the catalog file that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section.</source>
          <target>In addition to using the certificate you create in the Create a Device Guard code signing certificate section, this example signs the catalog file that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="655">
        <segment state="initial">
          <source>If you are using an alternate certificate or catalog file, update the following steps with the appropriate variables and certificate.</source>
          <target>If you are using an alternate certificate or catalog file, update the following steps with the appropriate variables and certificate.</target>
        </segment>
      </unit>
      <unit id="656">
        <segment state="initial">
          <source>To sign the existing catalog file, copy each of the following commands into an elevated Windows PowerShell session:</source>
          <target>To sign the existing catalog file, copy each of the following commands into an elevated Windows PowerShell session:</target>
        </segment>
      </unit>
      <unit id="657">
        <segment state="initial">
          <source>Initialize the variables that will be used:</source>
          <target>Initialize the variables that will be used:</target>
        </segment>
      </unit>
      <unit id="658">
        <segment state="initial">
          <source>'$ExamplePath=$env:userprofile+"\Desktop"'</source>
          <target>'$ExamplePath=$env:userprofile+"\Desktop"'</target>
        </segment>
      </unit>
      <unit id="659">
        <segment state="initial">
          <source>'$CatFileName=$ExamplePath+"\LOBApp-Contoso.cat"'</source>
          <target>'$CatFileName=$ExamplePath+"\LOBApp-Contoso.cat"'</target>
        </segment>
      </unit>
      <unit id="660">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>     In this example, you use the catalog file you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create catalog files</pc> section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>     In this example, you use the catalog file you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="661">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>If you are signing another catalog file, be sure to update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">$ExamplePath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">$CatFileName</pc> variables with the correct information.</source>
          <target>If you are signing another catalog file, be sure to update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">$ExamplePath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">$CatFileName</pc> variables with the correct information.</target>
        </segment>
      </unit>
      <unit id="662">
        <segment state="initial">
          <source>Import the code signing certificate.</source>
          <target>Import the code signing certificate.</target>
        </segment>
      </unit>
      <unit id="663">
        <segment state="initial">
          <source>Import the code signing certificate that will be used to sign the catalog file to the signing user’s personal store.</source>
          <target>Import the code signing certificate that will be used to sign the catalog file to the signing user’s personal store.</target>
        </segment>
      </unit>
      <unit id="664">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-a-device-guard-code-signing-certificate)</data>
        </originalData>
        <segment state="initial">
          <source>In this example, you use the certificate that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section.</source>
          <target>In this example, you use the certificate that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section.</target>
        </segment>
      </unit>
      <unit id="665">
        <segment state="initial">
          <source>Sign the catalog file with Signtool.exe:</source>
          <target>Sign the catalog file with Signtool.exe:</target>
        </segment>
      </unit>
      <unit id="666">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Path to signtool.exe<ph dataRef="id6" id="ph2" /></pc> variable should be the full path to the Signtool.exe utility.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Path to signtool.exe<ph dataRef="id6" id="ph2" /></pc> variable should be the full path to the Signtool.exe utility.</target>
        </segment>
      </unit>
      <unit id="667">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContosoDGSigningCert</pc> is the subject name of the certificate that you will use to sign the catalog file.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContosoDGSigningCert</pc> is the subject name of the certificate that you will use to sign the catalog file.</target>
        </segment>
      </unit>
      <unit id="668">
        <segment state="initial">
          <source>This certificate should be imported to your personal certificate store on the machine on which you are attempting to sign the catalog file.</source>
          <target>This certificate should be imported to your personal certificate store on the machine on which you are attempting to sign the catalog file.</target>
        </segment>
      </unit>
      <unit id="669">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](http://go.microsoft.com/fwlink/p/?LinkId=624163)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  For additional information about Signtool.exe and all additional switches, visit <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MSDN Sign Tool page</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  For additional information about Signtool.exe and all additional switches, visit <pc dataRefEnd="id4" dataRefStart="id3" id="p2">MSDN Sign Tool page</pc>.</target>
        </segment>
      </unit>
      <unit id="670">
        <segment state="initial">
          <source>Verify the catalog file digital signature.</source>
          <target>Verify the catalog file digital signature.</target>
        </segment>
      </unit>
      <unit id="671">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click the catalog file, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</source>
          <target>Right-click the catalog file, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Properties</pc>.</target>
        </segment>
      </unit>
      <unit id="672">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Digital Signatures</pc> tab, verify that your signing certificate exists with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">sha256</pc> algorithm, as shown in Figure 12.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Digital Signatures</pc> tab, verify that your signing certificate exists with a <pc dataRefEnd="id4" dataRefStart="id3" id="p2">sha256</pc> algorithm, as shown in Figure 12.</target>
        </segment>
      </unit>
      <unit id="673">
        <segment state="initial">
          <source>figure 12</source>
          <target>figure 12</target>
        </segment>
      </unit>
      <unit id="674">
        <segment state="initial">
          <source>Figure 12.</source>
          <target>Figure 12.</target>
        </segment>
      </unit>
      <unit id="675">
        <segment state="initial">
          <source>Verify that the signing certificate exists</source>
          <target>Verify that the signing certificate exists</target>
        </segment>
      </unit>
      <unit id="676">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>Copy the catalog file to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />catroot<ph dataRef="id4" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}.</source>
          <target>Copy the catalog file to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />catroot<ph dataRef="id4" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}.</target>
        </segment>
      </unit>
      <unit id="677">
        <segment state="initial">
          <source>For testing purposes, you can manually copy signed catalog files to their intended folder.</source>
          <target>For testing purposes, you can manually copy signed catalog files to their intended folder.</target>
        </segment>
      </unit>
      <unit id="678">
        <segment state="initial">
          <source>For large-scale implementations, Microsoft recommends that you use Group Policy File Preferences to copy the appropriate catalog files to all desired machines or an enterprise systems management product such as System Center Configuration Manager.</source>
          <target>For large-scale implementations, Microsoft recommends that you use Group Policy File Preferences to copy the appropriate catalog files to all desired machines or an enterprise systems management product such as System Center Configuration Manager.</target>
        </segment>
      </unit>
      <unit id="679">
        <segment state="initial">
          <source>Doing this simplifies the management of catalog versions, as well.</source>
          <target>Doing this simplifies the management of catalog versions, as well.</target>
        </segment>
      </unit>
      <unit id="680">
        <segment state="initial">
          <source>Deploy catalog files with Group Policy</source>
          <target>Deploy catalog files with Group Policy</target>
        </segment>
      </unit>
      <unit id="681">
        <segment state="initial">
          <source>To simplify the management of catalog files, you can use Group Policy preferences to deploy catalog files to the appropriate PCs in your organization.</source>
          <target>To simplify the management of catalog files, you can use Group Policy preferences to deploy catalog files to the appropriate PCs in your organization.</target>
        </segment>
      </unit>
      <unit id="682">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The following process walks you through the deployment of a signed catalog file called LOBApp-Contoso.cat to a test OU called DG Enabled PCs with a GPO called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc>.</source>
          <target>The following process walks you through the deployment of a signed catalog file called LOBApp-Contoso.cat to a test OU called DG Enabled PCs with a GPO called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="683">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This walkthrough requires that you have previously created a signed catalog file and have a Windows 10 client PC on which to test a Group Policy deployment.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This walkthrough requires that you have previously created a signed catalog file and have a Windows 10 client PC on which to test a Group Policy deployment.</target>
        </segment>
      </unit>
      <unit id="684">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to create and sign a catalog file, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</source>
          <target>For more information about how to create and sign a catalog file, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Catalog files</pc> section.</target>
        </segment>
      </unit>
      <unit id="685">
        <segment state="initial">
          <source>To deploy a catalog file with Group Policy:</source>
          <target>To deploy a catalog file with Group Policy:</target>
        </segment>
      </unit>
      <unit id="686">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>From either a domain controller or a client PC that has Remote Server Administration Tools (RSAT) installed, open the Group Policy Management Console (GPMC) by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPMC.MSC</pc> or by searching for Group Policy Management.</source>
          <target>From either a domain controller or a client PC that has Remote Server Administration Tools (RSAT) installed, open the Group Policy Management Console (GPMC) by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPMC.MSC</pc> or by searching for Group Policy Management.</target>
        </segment>
      </unit>
      <unit id="687">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a new GPO: right-click the DG Enabled PCs OU, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>, as shown in Figure 13.</source>
          <target>Create a new GPO: right-click the DG Enabled PCs OU, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>, as shown in Figure 13.</target>
        </segment>
      </unit>
      <unit id="688">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The DG Enabled PCs OU is just an example of where to link the test GPO that you created in this section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The DG Enabled PCs OU is just an example of where to link the test GPO that you created in this section.</target>
        </segment>
      </unit>
      <unit id="689">
        <segment state="initial">
          <source>You can use any OU name.</source>
          <target>You can use any OU name.</target>
        </segment>
      </unit>
      <unit id="690">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#approach-enterprise-code-integrity-deployment)</data>
        </originalData>
        <segment state="initial">
          <source>Also, security group filtering is an option when you consider policy partitioning options based on the strategy discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section.</source>
          <target>Also, security group filtering is an option when you consider policy partitioning options based on the strategy discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section.</target>
        </segment>
      </unit>
      <unit id="691">
        <segment state="initial">
          <source>figure 13</source>
          <target>figure 13</target>
        </segment>
      </unit>
      <unit id="692">
        <segment state="initial">
          <source>Figure 13.</source>
          <target>Figure 13.</target>
        </segment>
      </unit>
      <unit id="693">
        <segment state="initial">
          <source>Create a new GPO</source>
          <target>Create a new GPO</target>
        </segment>
      </unit>
      <unit id="694">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc>.</source>
          <target>Name the new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="695">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc> as the name of the GPO.</source>
          <target>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso DG Catalog File GPO Test</pc> as the name of the GPO.</target>
        </segment>
      </unit>
      <unit id="696">
        <segment state="initial">
          <source>You can choose any name you prefer for this example.</source>
          <target>You can choose any name you prefer for this example.</target>
        </segment>
      </unit>
      <unit id="697">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</source>
          <target>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="698">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Preferences<ph dataRef="id2" id="ph2" />Windows Settings<ph dataRef="id3" id="ph3" />Files.</source>
          <target>Within the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Preferences<ph dataRef="id2" id="ph2" />Windows Settings<ph dataRef="id3" id="ph3" />Files.</target>
        </segment>
      </unit>
      <unit id="699">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Files</pc>, point to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">File</pc>, as shown in Figure 14.</source>
          <target>Right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Files</pc>, point to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">File</pc>, as shown in Figure 14.</target>
        </segment>
      </unit>
      <unit id="700">
        <segment state="initial">
          <source>figure 14</source>
          <target>figure 14</target>
        </segment>
      </unit>
      <unit id="701">
        <segment state="initial">
          <source>Figure 14.</source>
          <target>Figure 14.</target>
        </segment>
      </unit>
      <unit id="702">
        <segment state="initial">
          <source>Create a new file</source>
          <target>Create a new file</target>
        </segment>
      </unit>
      <unit id="703">
        <segment state="initial">
          <source>Configure the catalog file share.</source>
          <target>Configure the catalog file share.</target>
        </segment>
      </unit>
      <unit id="704">
        <segment state="initial">
          <source>To use this setting to provide consistent deployment of LOBApp-Contoso.cat, the source file should be on a share that is accessible to the computer account of every deployed machine.</source>
          <target>To use this setting to provide consistent deployment of LOBApp-Contoso.cat, the source file should be on a share that is accessible to the computer account of every deployed machine.</target>
        </segment>
      </unit>
      <unit id="705">
        <originalData>
          <data id="id1">\\\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>This example uses a share on a Windows 10 client machine called <ph dataRef="id1" id="ph1" />Contoso-Win10<ph dataRef="id2" id="ph2" />Share.</source>
          <target>This example uses a share on a Windows 10 client machine called <ph dataRef="id1" id="ph1" />Contoso-Win10<ph dataRef="id2" id="ph2" />Share.</target>
        </segment>
      </unit>
      <unit id="706">
        <segment state="initial">
          <source>The catalog file being deployed is copied to this share.</source>
          <target>The catalog file being deployed is copied to this share.</target>
        </segment>
      </unit>
      <unit id="707">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>To keep versions consistent, in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New File Properties</pc> dialog box (Figure 15), select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Replace</pc> from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Action</pc> list so that the newest version is always used.</source>
          <target>To keep versions consistent, in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New File Properties</pc> dialog box (Figure 15), select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Replace</pc> from the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Action</pc> list so that the newest version is always used.</target>
        </segment>
      </unit>
      <unit id="708">
        <segment state="initial">
          <source>figure 15</source>
          <target>figure 15</target>
        </segment>
      </unit>
      <unit id="709">
        <segment state="initial">
          <source>Figure 15.</source>
          <target>Figure 15.</target>
        </segment>
      </unit>
      <unit id="710">
        <segment state="initial">
          <source>Set the new file properties</source>
          <target>Set the new file properties</target>
        </segment>
      </unit>
      <unit id="711">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Source file(s)</pc> box, type the name of your accessible share, with the catalog file name included (for example, <ph dataRef="id3" id="ph1" />Contoso-Win10<ph dataRef="id4" id="ph2" />share<ph dataRef="id5" id="ph3" />LOBApp-Contoso.cat).</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Source file(s)</pc> box, type the name of your accessible share, with the catalog file name included (for example, <ph dataRef="id3" id="ph1" />Contoso-Win10<ph dataRef="id4" id="ph2" />share<ph dataRef="id5" id="ph3" />LOBApp-Contoso.cat).</target>
        </segment>
      </unit>
      <unit id="712">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
          <data id="id9">\\</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Destination File</pc> box, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">C:<ph dataRef="id5" id="ph1" />Windows<ph dataRef="id6" id="ph2" />System32<ph dataRef="id7" id="ph3" />catroot<ph dataRef="id8" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}<ph dataRef="id9" id="ph5" />LOBApp-Contoso.cat</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Destination File</pc> box, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">C:<ph dataRef="id5" id="ph1" />Windows<ph dataRef="id6" id="ph2" />System32<ph dataRef="id7" id="ph3" />catroot<ph dataRef="id8" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}<ph dataRef="id9" id="ph5" />LOBApp-Contoso.cat</pc>.</target>
        </segment>
      </unit>
      <unit id="713">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-catalog-files)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  LOBApp-Contoso.cat is not a required catalog name: This name was used in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create catalog files</pc> section, and so it was used here, as well.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  LOBApp-Contoso.cat is not a required catalog name: This name was used in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create catalog files</pc> section, and so it was used here, as well.</target>
        </segment>
      </unit>
      <unit id="714">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common</pc> tab of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New File Properties</pc> dialog box, select the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Remove this item when it is no longer applied</pc> option.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Common</pc> tab of the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New File Properties</pc> dialog box, select the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Remove this item when it is no longer applied</pc> option.</target>
        </segment>
      </unit>
      <unit id="715">
        <segment state="initial">
          <source>Doing this ensures that the catalog file is removed from every system, in case you ever need to stop trusting this application.</source>
          <target>Doing this ensures that the catalog file is removed from every system, in case you ever need to stop trusting this application.</target>
        </segment>
      </unit>
      <unit id="716">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to complete file creation.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to complete file creation.</target>
        </segment>
      </unit>
      <unit id="717">
        <segment state="initial">
          <source>Close the Group Policy Management Editor, and then update the policy on the test Windows 10 machine by running GPUpdate.exe.</source>
          <target>Close the Group Policy Management Editor, and then update the policy on the test Windows 10 machine by running GPUpdate.exe.</target>
        </segment>
      </unit>
      <unit id="718">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>When the policy has been updated, verify that the catalog file exists in C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />catroot<ph dataRef="id4" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE} on the Windows 10 machine.</source>
          <target>When the policy has been updated, verify that the catalog file exists in C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />catroot<ph dataRef="id4" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE} on the Windows 10 machine.</target>
        </segment>
      </unit>
      <unit id="719">
        <segment state="initial">
          <source>Deploy catalog files with System Center Configuration Manager</source>
          <target>Deploy catalog files with System Center Configuration Manager</target>
        </segment>
      </unit>
      <unit id="720">
        <segment state="initial">
          <source>As an alternative to Group Policy, you can use System Center Configuration Manager to deploy catalog files to the managed machines in your environment.</source>
          <target>As an alternative to Group Policy, you can use System Center Configuration Manager to deploy catalog files to the managed machines in your environment.</target>
        </segment>
      </unit>
      <unit id="721">
        <segment state="initial">
          <source>This approach can simplify the deployment and management of multiple catalog files as well as provide reporting around which catalog each client or collection has deployed.</source>
          <target>This approach can simplify the deployment and management of multiple catalog files as well as provide reporting around which catalog each client or collection has deployed.</target>
        </segment>
      </unit>
      <unit id="722">
        <segment state="initial">
          <source>In addition to the deployment of these files, System Center Configuration Manager can also be used to inventory the currently deployed catalog files for reporting and compliance purposes.</source>
          <target>In addition to the deployment of these files, System Center Configuration Manager can also be used to inventory the currently deployed catalog files for reporting and compliance purposes.</target>
        </segment>
      </unit>
      <unit id="723">
        <segment state="initial">
          <source>Complete the following steps to create a new deployment package for catalog files:</source>
          <target>Complete the following steps to create a new deployment package for catalog files:</target>
        </segment>
      </unit>
      <unit id="724">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following example uses a network share named <ph dataRef="id3" id="ph1" />Shares<ph dataRef="id4" id="ph2" />CatalogShare as a source for the catalog files.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following example uses a network share named <ph dataRef="id3" id="ph1" />Shares<ph dataRef="id4" id="ph2" />CatalogShare as a source for the catalog files.</target>
        </segment>
      </unit>
      <unit id="725">
        <segment state="initial">
          <source>If you have collection specific catalog files, or prefer to deploy them individually, use whichever folder structure works best for your organization.</source>
          <target>If you have collection specific catalog files, or prefer to deploy them individually, use whichever folder structure works best for your organization.</target>
        </segment>
      </unit>
      <unit id="726">
        <segment state="initial">
          <source>Open the Configuration Manager console, and select the Software Library workspace.</source>
          <target>Open the Configuration Manager console, and select the Software Library workspace.</target>
        </segment>
      </unit>
      <unit id="727">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to Overview<ph dataRef="id1" id="ph1" />Application Management, right-click <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Packages</pc>, and then click <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Create Package</pc>.</source>
          <target>Navigate to Overview<ph dataRef="id1" id="ph1" />Application Management, right-click <pc dataRefEnd="id3" dataRefStart="id2" id="p1">Packages</pc>, and then click <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Create Package</pc>.</target>
        </segment>
      </unit>
      <unit id="728">
        <segment state="initial">
          <source>Name the package, set your organization as the manufacturer, and select an appropriate version number (Figure 16).</source>
          <target>Name the package, set your organization as the manufacturer, and select an appropriate version number (Figure 16).</target>
        </segment>
      </unit>
      <unit id="729">
        <segment state="initial">
          <source>figure 16</source>
          <target>figure 16</target>
        </segment>
      </unit>
      <unit id="730">
        <segment state="initial">
          <source>Figure 16.</source>
          <target>Figure 16.</target>
        </segment>
      </unit>
      <unit id="731">
        <segment state="initial">
          <source>Specify information about the new package</source>
          <target>Specify information about the new package</target>
        </segment>
      </unit>
      <unit id="732">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Standard program</pc> as the program type.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Standard program</pc> as the program type.</target>
        </segment>
      </unit>
      <unit id="733">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">\\\\</data>
          <data id="id8">\\</data>
          <data id="id9">\\</data>
          <data id="id10">\\</data>
          <data id="id11">\\</data>
          <data id="id12">\\</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Standard Program</pc> page, select a name, and then set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Command Line</pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">XCopy <ph dataRef="id7" id="ph1" />Shares<ph dataRef="id8" id="ph2" />CatalogShare C:<ph dataRef="id9" id="ph3" />Windows<ph dataRef="id10" id="ph4" />System32<ph dataRef="id11" id="ph5" />catroot<ph dataRef="id12" id="ph6" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE} /H /K /E /Y</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Standard Program</pc> page, select a name, and then set the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Command Line</pc> property to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">XCopy <ph dataRef="id7" id="ph1" />Shares<ph dataRef="id8" id="ph2" />CatalogShare C:<ph dataRef="id9" id="ph3" />Windows<ph dataRef="id10" id="ph4" />System32<ph dataRef="id11" id="ph5" />catroot<ph dataRef="id12" id="ph6" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE} /H /K /E /Y</pc>.</target>
        </segment>
      </unit>
      <unit id="734">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Standard Program</pc> page, select the following options (Figure 17):</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Standard Program</pc> page, select the following options (Figure 17):</target>
        </segment>
      </unit>
      <unit id="735">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Contoso Catalog File Copy Program</pc>.</source>
          <target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc>, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Contoso Catalog File Copy Program</pc>.</target>
        </segment>
      </unit>
      <unit id="736">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Command line</pc>, browse to the program location.</source>
          <target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Command line</pc>, browse to the program location.</target>
        </segment>
      </unit>
      <unit id="737">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\\</data>
          <data id="id6">\\</data>
        </originalData>
        <segment state="initial">
          <source>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Startup folder</pc>, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">C:<ph dataRef="id5" id="ph1" />Windows<ph dataRef="id6" id="ph2" />System32</pc>.</source>
          <target>In <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Startup folder</pc>, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2">C:<ph dataRef="id5" id="ph1" />Windows<ph dataRef="id6" id="ph2" />System32</pc>.</target>
        </segment>
      </unit>
      <unit id="738">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hidden</pc>.</source>
          <target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Run</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Hidden</pc>.</target>
        </segment>
      </unit>
      <unit id="739">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Program can run</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Whether or not a user is logged on</pc>.</source>
          <target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Program can run</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Whether or not a user is logged on</pc>.</target>
        </segment>
      </unit>
      <unit id="740">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Drive mode</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Runs with UNC name</pc>.</source>
          <target>From the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Drive mode</pc> list, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Runs with UNC name</pc>.</target>
        </segment>
      </unit>
      <unit id="741">
        <segment state="initial">
          <source>figure 17</source>
          <target>figure 17</target>
        </segment>
      </unit>
      <unit id="742">
        <segment state="initial">
          <source>Figure 17.</source>
          <target>Figure 17.</target>
        </segment>
      </unit>
      <unit id="743">
        <segment state="initial">
          <source>Specify information about the standard program</source>
          <target>Specify information about the standard program</target>
        </segment>
      </unit>
      <unit id="744">
        <segment state="initial">
          <source>Accept the defaults for the rest of the wizard, and then close the wizard.</source>
          <target>Accept the defaults for the rest of the wizard, and then close the wizard.</target>
        </segment>
      </unit>
      <unit id="745">
        <segment state="initial">
          <source>After you create the deployment package, deploy it to a collection so that the clients will receive the catalog files.</source>
          <target>After you create the deployment package, deploy it to a collection so that the clients will receive the catalog files.</target>
        </segment>
      </unit>
      <unit id="746">
        <segment state="initial">
          <source>In this example, you deploy the package you just created to a test collection:</source>
          <target>In this example, you deploy the package you just created to a test collection:</target>
        </segment>
      </unit>
      <unit id="747">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Software Library workspace, navigate to Overview<ph dataRef="id1" id="ph1" />Application Management<ph dataRef="id2" id="ph2" />Packages, right-click the catalog file package, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Deploy</pc>.</source>
          <target>In the Software Library workspace, navigate to Overview<ph dataRef="id1" id="ph1" />Application Management<ph dataRef="id2" id="ph2" />Packages, right-click the catalog file package, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p1">Deploy</pc>.</target>
        </segment>
      </unit>
      <unit id="748">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">General</pc> page, select the test collection to which the catalog files will be deployed, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">General</pc> page, select the test collection to which the catalog files will be deployed, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="749">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> to select the distribution point that will serve content to the selected collection, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Next</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Content</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add</pc> to select the distribution point that will serve content to the selected collection, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="750">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deployment Settings</pc> page, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Required</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Purpose</pc> box.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deployment Settings</pc> page, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Required</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Purpose</pc> box.</target>
        </segment>
      </unit>
      <unit id="751">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scheduling</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scheduling</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>.</target>
        </segment>
      </unit>
      <unit id="752">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assignment Schedule</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Assign immediately after this event</pc>, set the value to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">As soon as possible</pc>, and then click <pc dataRefEnd="id8" dataRefStart="id7" id="p4">OK</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Assignment Schedule</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Assign immediately after this event</pc>, set the value to <pc dataRefEnd="id6" dataRefStart="id5" id="p3">As soon as possible</pc>, and then click <pc dataRefEnd="id8" dataRefStart="id7" id="p4">OK</pc>.</target>
        </segment>
      </unit>
      <unit id="753">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scheduling</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Scheduling</pc> page, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="754">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">User Experience</pc> page (Figure 18), set the following options, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>:</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">User Experience</pc> page (Figure 18), set the following options, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>:</target>
        </segment>
      </unit>
      <unit id="755">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software installation</pc> check box.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software installation</pc> check box.</target>
        </segment>
      </unit>
      <unit id="756">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Commit changes at deadline or during a maintenance window (requires restarts)</pc> check box.</source>
          <target>Select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Commit changes at deadline or during a maintenance window (requires restarts)</pc> check box.</target>
        </segment>
      </unit>
      <unit id="757">
        <segment state="initial">
          <source>figure 18</source>
          <target>figure 18</target>
        </segment>
      </unit>
      <unit id="758">
        <segment state="initial">
          <source>Figure 18.</source>
          <target>Figure 18.</target>
        </segment>
      </unit>
      <unit id="759">
        <segment state="initial">
          <source>Specify the user experience</source>
          <target>Specify the user experience</target>
        </segment>
      </unit>
      <unit id="760">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Distribution Points</pc> page, in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Deployment options</pc> box, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run program from distribution point</pc>, and then click <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Next</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Distribution Points</pc> page, in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Deployment options</pc> box, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Run program from distribution point</pc>, and then click <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="761">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Summary</pc> page, review the selections, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Summary</pc> page, review the selections, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Next</pc>.</target>
        </segment>
      </unit>
      <unit id="762">
        <segment state="initial">
          <source>Close the wizard.</source>
          <target>Close the wizard.</target>
        </segment>
      </unit>
      <unit id="763">
        <segment state="initial">
          <source>Inventory catalog files with System Center Configuration Manager</source>
          <target>Inventory catalog files with System Center Configuration Manager</target>
        </segment>
      </unit>
      <unit id="764">
        <segment state="initial">
          <source>When catalog files have been deployed to the machines within your environment, whether by using Group Policy or System Center Configuration Manager, you can inventory them with the software inventory feature of System Center Configuration Manager.</source>
          <target>When catalog files have been deployed to the machines within your environment, whether by using Group Policy or System Center Configuration Manager, you can inventory them with the software inventory feature of System Center Configuration Manager.</target>
        </segment>
      </unit>
      <unit id="765">
        <segment state="initial">
          <source>The following process walks you through the enablement of software inventory to discover catalog files on your managed systems through the creation and deployment of a new client settings policy.</source>
          <target>The following process walks you through the enablement of software inventory to discover catalog files on your managed systems through the creation and deployment of a new client settings policy.</target>
        </segment>
      </unit>
      <unit id="766">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  A standard naming convention for your catalog files will significantly simplify the catalog file software inventory process.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  A standard naming convention for your catalog files will significantly simplify the catalog file software inventory process.</target>
        </segment>
      </unit>
      <unit id="767">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>In this example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-Contoso</pc> has been added to all catalog file names.</source>
          <target>In this example, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-Contoso</pc> has been added to all catalog file names.</target>
        </segment>
      </unit>
      <unit id="768">
        <segment state="initial">
          <source>Open the Configuration Manager console, and select the Administration workspace.</source>
          <target>Open the Configuration Manager console, and select the Administration workspace.</target>
        </segment>
      </unit>
      <unit id="769">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Overview<ph dataRef="id3" id="ph1" />Client Settings</pc>, right-click <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Client Settings</pc>, and then click <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Create Custom Client Device Settings</pc>.</source>
          <target>Navigate to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Overview<ph dataRef="id3" id="ph1" />Client Settings</pc>, right-click <pc dataRefEnd="id5" dataRefStart="id4" id="p2">Client Settings</pc>, and then click <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Create Custom Client Device Settings</pc>.</target>
        </segment>
      </unit>
      <unit id="770">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Name the new policy, and select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software Inventory</pc> check box from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Select and then configure the custom settings for client devices</pc> list, as shown in Figure 19.</source>
          <target>Name the new policy, and select the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software Inventory</pc> check box from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Select and then configure the custom settings for client devices</pc> list, as shown in Figure 19.</target>
        </segment>
      </unit>
      <unit id="771">
        <segment state="initial">
          <source>figure 19</source>
          <target>figure 19</target>
        </segment>
      </unit>
      <unit id="772">
        <segment state="initial">
          <source>Figure 19.</source>
          <target>Figure 19.</target>
        </segment>
      </unit>
      <unit id="773">
        <segment state="initial">
          <source>Select custom settings</source>
          <target>Select custom settings</target>
        </segment>
      </unit>
      <unit id="774">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the navigation pane, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software Inventory</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set Types</pc>, as shown in Figure 20.</source>
          <target>In the navigation pane, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Software Inventory</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Set Types</pc>, as shown in Figure 20.</target>
        </segment>
      </unit>
      <unit id="775">
        <segment state="initial">
          <source>figure 20</source>
          <target>figure 20</target>
        </segment>
      </unit>
      <unit id="776">
        <segment state="initial">
          <source>Figure 20.</source>
          <target>Figure 20.</target>
        </segment>
      </unit>
      <unit id="777">
        <segment state="initial">
          <source>Set the software inventory</source>
          <target>Set the software inventory</target>
        </segment>
      </unit>
      <unit id="778">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure Client Setting</pc> dialog box, click the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start</pc> button to open the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Inventories File Properties</pc> dialog box.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configure Client Setting</pc> dialog box, click the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Start</pc> button to open the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Inventories File Properties</pc> dialog box.</target>
        </segment>
      </unit>
      <unit id="779">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\*</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> box, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Contoso.cat</pc>, and then click <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Set</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Name</pc> box, type <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Contoso.cat</pc>, and then click <pc dataRefEnd="id7" dataRefStart="id6" id="p3">Set</pc>.</target>
        </segment>
      </unit>
      <unit id="780">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />Contoso.cat</pc> is the naming convention used in this example.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />Contoso.cat</pc> is the naming convention used in this example.</target>
        </segment>
      </unit>
      <unit id="781">
        <segment state="initial">
          <source>This should mimic the naming convention you use for your catalog files.</source>
          <target>This should mimic the naming convention you use for your catalog files.</target>
        </segment>
      </unit>
      <unit id="782">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">\\</data>
          <data id="id8">\\</data>
          <data id="id9">\\</data>
          <data id="id10">\\</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Properties</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Variable or path name</pc>, and then type <pc dataRefEnd="id6" dataRefStart="id5" id="p3">C:<ph dataRef="id7" id="ph1" />Windows<ph dataRef="id8" id="ph2" />System32<ph dataRef="id9" id="ph3" />catroot<ph dataRef="id10" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}</pc> in the box, as shown in Figure 21.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Path Properties</pc> dialog box, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Variable or path name</pc>, and then type <pc dataRefEnd="id6" dataRefStart="id5" id="p3">C:<ph dataRef="id7" id="ph1" />Windows<ph dataRef="id8" id="ph2" />System32<ph dataRef="id9" id="ph3" />catroot<ph dataRef="id10" id="ph4" />{F750E6C3-38EE-11D1-85E5-00C04FC295EE}</pc> in the box, as shown in Figure 21.</target>
        </segment>
      </unit>
      <unit id="783">
        <segment state="initial">
          <source>figure 21</source>
          <target>figure 21</target>
        </segment>
      </unit>
      <unit id="784">
        <segment state="initial">
          <source>Figure 21.</source>
          <target>Figure 21.</target>
        </segment>
      </unit>
      <unit id="785">
        <segment state="initial">
          <source>Set the path properties</source>
          <target>Set the path properties</target>
        </segment>
      </unit>
      <unit id="786">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</target>
        </segment>
      </unit>
      <unit id="787">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Now that you have created the client settings policy, right-click the new policy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy</pc>, and then choose the collection on which you would like to inventory the catalog files.</source>
          <target>Now that you have created the client settings policy, right-click the new policy, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy</pc>, and then choose the collection on which you would like to inventory the catalog files.</target>
        </segment>
      </unit>
      <unit id="788">
        <segment state="initial">
          <source>At the time of the next software inventory cycle, when the targeted clients receive the new client settings policy, you will be able to view the inventoried files in the built-in System Center Configuration Manager reports or Resource Explorer.</source>
          <target>At the time of the next software inventory cycle, when the targeted clients receive the new client settings policy, you will be able to view the inventoried files in the built-in System Center Configuration Manager reports or Resource Explorer.</target>
        </segment>
      </unit>
      <unit id="789">
        <segment state="initial">
          <source>To view the inventoried files on a client within Resource Explorer, complete the following steps:</source>
          <target>To view the inventoried files on a client within Resource Explorer, complete the following steps:</target>
        </segment>
      </unit>
      <unit id="790">
        <segment state="initial">
          <source>Open the Configuration Manager console, and select the Assets and Compliance workspace.</source>
          <target>Open the Configuration Manager console, and select the Assets and Compliance workspace.</target>
        </segment>
      </unit>
      <unit id="791">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to Overview<ph dataRef="id1" id="ph1" />Devices, and search for the device on which you want to view the inventoried files.</source>
          <target>Navigate to Overview<ph dataRef="id1" id="ph1" />Devices, and search for the device on which you want to view the inventoried files.</target>
        </segment>
      </unit>
      <unit id="792">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click the computer, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resource Explorer</pc>.</source>
          <target>Right-click the computer, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Start</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Resource Explorer</pc>.</target>
        </segment>
      </unit>
      <unit id="793">
        <originalData>
          <data id="id1">\\</data>
        </originalData>
        <segment state="initial">
          <source>In Resource Explorer, navigate to Software<ph dataRef="id1" id="ph1" />File Details to view the inventoried catalog files.</source>
          <target>In Resource Explorer, navigate to Software<ph dataRef="id1" id="ph1" />File Details to view the inventoried catalog files.</target>
        </segment>
      </unit>
      <unit id="794">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If nothing is displayed in this view, navigate to Software<ph dataRef="id3" id="ph1" />Last Software Scan in Resource Explorer to verify that the client has recently completed a software inventory scan.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If nothing is displayed in this view, navigate to Software<ph dataRef="id3" id="ph1" />Last Software Scan in Resource Explorer to verify that the client has recently completed a software inventory scan.</target>
        </segment>
      </unit>
      <unit id="795">
        <segment state="initial">
          <source>Code integrity policies</source>
          <target>Code integrity policies</target>
        </segment>
      </unit>
      <unit id="796">
        <segment state="initial">
          <source>Code integrity policies maintain the standards by which a computer running Windows 10 determines whether an application is trustworthy and can be run.</source>
          <target>Code integrity policies maintain the standards by which a computer running Windows 10 determines whether an application is trustworthy and can be run.</target>
        </segment>
      </unit>
      <unit id="797">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#configurable-code-integrity)</data>
        </originalData>
        <segment state="initial">
          <source>For an overview of code integrity, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configurable code integrity</pc> section.</source>
          <target>For an overview of code integrity, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Configurable code integrity</pc> section.</target>
        </segment>
      </unit>
      <unit id="798">
        <segment state="initial">
          <source>A common system imaging practice in today’s IT organization is to establish a “golden” image as a reference for what an ideal system should look like, and then use that image to clone additional company assets.</source>
          <target>A common system imaging practice in today’s IT organization is to establish a “golden” image as a reference for what an ideal system should look like, and then use that image to clone additional company assets.</target>
        </segment>
      </unit>
      <unit id="799">
        <segment state="initial">
          <source>Code integrity policies follow a similar methodology, that begins with the establishment of a golden PC.</source>
          <target>Code integrity policies follow a similar methodology, that begins with the establishment of a golden PC.</target>
        </segment>
      </unit>
      <unit id="800">
        <segment state="initial">
          <source>Like when imaging, you can have multiple golden PCs based on model, department, application set, and so on.</source>
          <target>Like when imaging, you can have multiple golden PCs based on model, department, application set, and so on.</target>
        </segment>
      </unit>
      <unit id="801">
        <segment state="initial">
          <source>Although the thought process around the creation of code integrity policies is similar to imaging, these policies should be maintained independently.</source>
          <target>Although the thought process around the creation of code integrity policies is similar to imaging, these policies should be maintained independently.</target>
        </segment>
      </unit>
      <unit id="802">
        <segment state="initial">
          <source>Assess the necessity of additional code integrity policies based on what should be allowed to be installed and run and for whom.</source>
          <target>Assess the necessity of additional code integrity policies based on what should be allowed to be installed and run and for whom.</target>
        </segment>
      </unit>
      <unit id="803">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Each machine can have only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">one</pc> code integrity policy at a time.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Each machine can have only <pc dataRefEnd="id4" dataRefStart="id3" id="p2">one</pc> code integrity policy at a time.</target>
        </segment>
      </unit>
      <unit id="804">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>Whichever way you deploy this policy, it is renamed to SIPolicy.p7b and copied to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity.</source>
          <target>Whichever way you deploy this policy, it is renamed to SIPolicy.p7b and copied to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity.</target>
        </segment>
      </unit>
      <unit id="805">
        <segment state="initial">
          <source>Keep this in mind when you create your code integrity policies.</source>
          <target>Keep this in mind when you create your code integrity policies.</target>
        </segment>
      </unit>
      <unit id="806">
        <segment state="initial">
          <source>Optionally, code integrity policies can align with your software catalog as well as any IT department–approved applications.</source>
          <target>Optionally, code integrity policies can align with your software catalog as well as any IT department–approved applications.</target>
        </segment>
      </unit>
      <unit id="807">
        <segment state="initial">
          <source>One simple method to implement code integrity policies is to use existing images to create one master code integrity policy.</source>
          <target>One simple method to implement code integrity policies is to use existing images to create one master code integrity policy.</target>
        </segment>
      </unit>
      <unit id="808">
        <segment state="initial">
          <source>You do so by creating a code integrity policy from each image, and then by merging the policies.</source>
          <target>You do so by creating a code integrity policy from each image, and then by merging the policies.</target>
        </segment>
      </unit>
      <unit id="809">
        <segment state="initial">
          <source>This way, what is installed on all of those images will be allowed to run, should the applications be installed on a computer based on a different image.</source>
          <target>This way, what is installed on all of those images will be allowed to run, should the applications be installed on a computer based on a different image.</target>
        </segment>
      </unit>
      <unit id="810">
        <segment state="initial">
          <source>Alternatively, you may choose to create a base applications policy and add policies based on the computer’s role or department.</source>
          <target>Alternatively, you may choose to create a base applications policy and add policies based on the computer’s role or department.</target>
        </segment>
      </unit>
      <unit id="811">
        <segment state="initial">
          <source>Organizations have a choice of how their policies are created, merged or serviced, and managed.</source>
          <target>Organizations have a choice of how their policies are created, merged or serviced, and managed.</target>
        </segment>
      </unit>
      <unit id="812">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following section assumes that you will deploy code integrity policies as part of your Device Guard deployment.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following section assumes that you will deploy code integrity policies as part of your Device Guard deployment.</target>
        </segment>
      </unit>
      <unit id="813">
        <segment state="initial">
          <source>Alternatively, configurable code integrity is available without the enablement of Device Guard.</source>
          <target>Alternatively, configurable code integrity is available without the enablement of Device Guard.</target>
        </segment>
      </unit>
      <unit id="814">
        <segment state="initial">
          <source>Code integrity policy rules</source>
          <target>Code integrity policy rules</target>
        </segment>
      </unit>
      <unit id="815">
        <segment state="initial">
          <source>Code integrity policies consist of several components.</source>
          <target>Code integrity policies consist of several components.</target>
        </segment>
      </unit>
      <unit id="816">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>The two major components, which are configurable, are called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">policy rules</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file rules</pc>, respectively.</source>
          <target>The two major components, which are configurable, are called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">policy rules</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">file rules</pc>, respectively.</target>
        </segment>
      </unit>
      <unit id="817">
        <segment state="initial">
          <source>Code integrity policy rules are options that the code integrity policy creator can specify on the policy.</source>
          <target>Code integrity policy rules are options that the code integrity policy creator can specify on the policy.</target>
        </segment>
      </unit>
      <unit id="818">
        <segment state="initial">
          <source>These options include the enablement of audit mode, UMCI, and so on.</source>
          <target>These options include the enablement of audit mode, UMCI, and so on.</target>
        </segment>
      </unit>
      <unit id="819">
        <segment state="initial">
          <source>You can modify these options in a new or existing code integrity policy.</source>
          <target>You can modify these options in a new or existing code integrity policy.</target>
        </segment>
      </unit>
      <unit id="820">
        <segment state="initial">
          <source>File rules are the level to which the code integrity policy scan ties each binary trust.</source>
          <target>File rules are the level to which the code integrity policy scan ties each binary trust.</target>
        </segment>
      </unit>
      <unit id="821">
        <segment state="initial">
          <source>For example, the hash level is going to itemize each discovered hash on the system within the generated code integrity policy.</source>
          <target>For example, the hash level is going to itemize each discovered hash on the system within the generated code integrity policy.</target>
        </segment>
      </unit>
      <unit id="822">
        <segment state="initial">
          <source>This way, when a binary prepares to run, the code integrity service will validate its hash value against the trusted hashes found in the code integrity policy.</source>
          <target>This way, when a binary prepares to run, the code integrity service will validate its hash value against the trusted hashes found in the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="823">
        <segment state="initial">
          <source>Based on that result, the binary will or will not be allowed to run.</source>
          <target>Based on that result, the binary will or will not be allowed to run.</target>
        </segment>
      </unit>
      <unit id="824">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>To modify the policy rule options of an existing code integrity policy, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set-RuleOption</pc> Windows PowerShell cmdlet.</source>
          <target>To modify the policy rule options of an existing code integrity policy, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Set-RuleOption</pc> Windows PowerShell cmdlet.</target>
        </segment>
      </unit>
      <unit id="825">
        <segment state="initial">
          <source>Note the following examples of how to use this cmdlet to add and remove a rule option on an existing code integrity policy:</source>
          <target>Note the following examples of how to use this cmdlet to add and remove a rule option on an existing code integrity policy:</target>
        </segment>
      </unit>
      <unit id="826">
        <segment state="initial">
          <source>To enable UMCI, add rule option 0 to an existing policy by running the following command:</source>
          <target>To enable UMCI, add rule option 0 to an existing policy by running the following command:</target>
        </segment>
      </unit>
      <unit id="827">
        <segment state="initial">
          <source>To disable UMCI on an existing code integrity policy, remove rule option 0 by running the following command:</source>
          <target>To disable UMCI on an existing code integrity policy, remove rule option 0 by running the following command:</target>
        </segment>
      </unit>
      <unit id="828">
        <segment state="initial">
          <source>You can set several rule options within a code integrity policy.</source>
          <target>You can set several rule options within a code integrity policy.</target>
        </segment>
      </unit>
      <unit id="829">
        <segment state="initial">
          <source>Table 2 lists each rule and its high-level meaning.</source>
          <target>Table 2 lists each rule and its high-level meaning.</target>
        </segment>
      </unit>
      <unit id="830">
        <segment state="initial">
          <source>Table 2.</source>
          <target>Table 2.</target>
        </segment>
      </unit>
      <unit id="831">
        <segment state="initial">
          <source>Code integrity policy - policy rule options</source>
          <target>Code integrity policy - policy rule options</target>
        </segment>
      </unit>
      <unit id="832">
        <segment state="initial">
          <source>Rule option</source>
          <target>Rule option</target>
        </segment>
      </unit>
      <unit id="833">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="834">
        <segment state="initial">
          <source>0 Enabled:UMCI</source>
          <target>0 Enabled:UMCI</target>
        </segment>
      </unit>
      <unit id="835">
        <segment state="initial">
          <source>Code integrity policies restrict both kernel-mode and user-mode binaries.</source>
          <target>Code integrity policies restrict both kernel-mode and user-mode binaries.</target>
        </segment>
      </unit>
      <unit id="836">
        <segment state="initial">
          <source>By default, only kernel-mode binaries are restricted.</source>
          <target>By default, only kernel-mode binaries are restricted.</target>
        </segment>
      </unit>
      <unit id="837">
        <segment state="initial">
          <source>Enabling this rule option validates user mode executables and scripts.</source>
          <target>Enabling this rule option validates user mode executables and scripts.</target>
        </segment>
      </unit>
      <unit id="838">
        <segment state="initial">
          <source>1 Enabled:Boot Menu Protection</source>
          <target>1 Enabled:Boot Menu Protection</target>
        </segment>
      </unit>
      <unit id="839">
        <segment state="initial">
          <source>This option is not currently supported.</source>
          <target>This option is not currently supported.</target>
        </segment>
      </unit>
      <unit id="840">
        <segment state="initial">
          <source>2 Required:WHQL</source>
          <target>2 Required:WHQL</target>
        </segment>
      </unit>
      <unit id="841">
        <segment state="initial">
          <source>By default, legacy drivers that are not Windows Hardware Quality Labs (WHQL) signed are allowed to execute.</source>
          <target>By default, legacy drivers that are not Windows Hardware Quality Labs (WHQL) signed are allowed to execute.</target>
        </segment>
      </unit>
      <unit id="842">
        <segment state="initial">
          <source>Enabling this rule requires that every executed driver is WHQL signed and removes legacy driver support.</source>
          <target>Enabling this rule requires that every executed driver is WHQL signed and removes legacy driver support.</target>
        </segment>
      </unit>
      <unit id="843">
        <segment state="initial">
          <source>Going forward, every new Windows 10–compatible driver must be WHQL certified.</source>
          <target>Going forward, every new Windows 10–compatible driver must be WHQL certified.</target>
        </segment>
      </unit>
      <unit id="844">
        <segment state="initial">
          <source>3 Enabled:Audit Mode (Default)</source>
          <target>3 Enabled:Audit Mode (Default)</target>
        </segment>
      </unit>
      <unit id="845">
        <segment state="initial">
          <source>Enables the execution of binaries outside of the code integrity policy but logs each occurrence in the CodeIntegrity event log, which can be used to update the existing policy before enforcement.</source>
          <target>Enables the execution of binaries outside of the code integrity policy but logs each occurrence in the CodeIntegrity event log, which can be used to update the existing policy before enforcement.</target>
        </segment>
      </unit>
      <unit id="846">
        <segment state="initial">
          <source>To enforce a code integrity policy, remove this option.</source>
          <target>To enforce a code integrity policy, remove this option.</target>
        </segment>
      </unit>
      <unit id="847">
        <segment state="initial">
          <source>4 Disabled:Flight Signing</source>
          <target>4 Disabled:Flight Signing</target>
        </segment>
      </unit>
      <unit id="848">
        <segment state="initial">
          <source>If enabled, code integrity policies will not trust flightroot-signed binaries.</source>
          <target>If enabled, code integrity policies will not trust flightroot-signed binaries.</target>
        </segment>
      </unit>
      <unit id="849">
        <segment state="initial">
          <source>This would be used in the scenario in which organizations only want to run released binaries, not flighted builds.</source>
          <target>This would be used in the scenario in which organizations only want to run released binaries, not flighted builds.</target>
        </segment>
      </unit>
      <unit id="850">
        <segment state="initial">
          <source>5 Enabled:Inherent Default Policy</source>
          <target>5 Enabled:Inherent Default Policy</target>
        </segment>
      </unit>
      <unit id="851">
        <segment state="initial">
          <source>This option is not currently supported.</source>
          <target>This option is not currently supported.</target>
        </segment>
      </unit>
      <unit id="852">
        <segment state="initial">
          <source>6 Enabled:Unsigned System Integrity Policy (Default)</source>
          <target>6 Enabled:Unsigned System Integrity Policy (Default)</target>
        </segment>
      </unit>
      <unit id="853">
        <segment state="initial">
          <source>Allows the policy to remain unsigned.</source>
          <target>Allows the policy to remain unsigned.</target>
        </segment>
      </unit>
      <unit id="854">
        <segment state="initial">
          <source>When this option is removed, the policy must be signed and have UpdatePolicySigners added to the policy to enable future policy modifications.</source>
          <target>When this option is removed, the policy must be signed and have UpdatePolicySigners added to the policy to enable future policy modifications.</target>
        </segment>
      </unit>
      <unit id="855">
        <segment state="initial">
          <source>7 Allowed:Debug Policy Augmented</source>
          <target>7 Allowed:Debug Policy Augmented</target>
        </segment>
      </unit>
      <unit id="856">
        <segment state="initial">
          <source>This option is not currently supported.</source>
          <target>This option is not currently supported.</target>
        </segment>
      </unit>
      <unit id="857">
        <segment state="initial">
          <source>8 Required:EV Signers</source>
          <target>8 Required:EV Signers</target>
        </segment>
      </unit>
      <unit id="858">
        <segment state="initial">
          <source>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate.</source>
          <target>In addition to being WHQL signed, this rule requires that drivers must have been submitted by a partner that has an Extended Verification (EV) certificate.</target>
        </segment>
      </unit>
      <unit id="859">
        <segment state="initial">
          <source>All future Windows 10 and later drivers will meet this requirement.</source>
          <target>All future Windows 10 and later drivers will meet this requirement.</target>
        </segment>
      </unit>
      <unit id="860">
        <segment state="initial">
          <source>9 Enabled:Advanced Boot Options Menu</source>
          <target>9 Enabled:Advanced Boot Options Menu</target>
        </segment>
      </unit>
      <unit id="861">
        <segment state="initial">
          <source>The F8 preboot menu is disabled by default for all code integrity policies.</source>
          <target>The F8 preboot menu is disabled by default for all code integrity policies.</target>
        </segment>
      </unit>
      <unit id="862">
        <segment state="initial">
          <source>Setting this rule option allows the F8 menu to appear to physically present users.</source>
          <target>Setting this rule option allows the F8 menu to appear to physically present users.</target>
        </segment>
      </unit>
      <unit id="863">
        <segment state="initial">
          <source>10 Enabled:Boot Audit on Failure</source>
          <target>10 Enabled:Boot Audit on Failure</target>
        </segment>
      </unit>
      <unit id="864">
        <segment state="initial">
          <source>Used when the code integrity policy is in enforcement mode.</source>
          <target>Used when the code integrity policy is in enforcement mode.</target>
        </segment>
      </unit>
      <unit id="865">
        <segment state="initial">
          <source>When a driver fails during startup, the code integrity policy will be placed in audit mode so that Windows will load.</source>
          <target>When a driver fails during startup, the code integrity policy will be placed in audit mode so that Windows will load.</target>
        </segment>
      </unit>
      <unit id="866">
        <segment state="initial">
          <source>Administrators can validate the reason for the failure in the CodeIntegrity event log.</source>
          <target>Administrators can validate the reason for the failure in the CodeIntegrity event log.</target>
        </segment>
      </unit>
      <unit id="867">
        <segment state="initial">
          <source>File rule levels allow administrators to specify the level at which they want to trust their applications.</source>
          <target>File rule levels allow administrators to specify the level at which they want to trust their applications.</target>
        </segment>
      </unit>
      <unit id="868">
        <segment state="initial">
          <source>This level of trust could be as low as the hash of each binary and as high as a PCA certificate.</source>
          <target>This level of trust could be as low as the hash of each binary and as high as a PCA certificate.</target>
        </segment>
      </unit>
      <unit id="869">
        <segment state="initial">
          <source>File rule levels are specified both when you create a new code integrity policy from a scan and when you create a policy from audit events.</source>
          <target>File rule levels are specified both when you create a new code integrity policy from a scan and when you create a policy from audit events.</target>
        </segment>
      </unit>
      <unit id="870">
        <segment state="initial">
          <source>In addition, to combine rule levels found in multiple policies, you can merge the policies.</source>
          <target>In addition, to combine rule levels found in multiple policies, you can merge the policies.</target>
        </segment>
      </unit>
      <unit id="871">
        <segment state="initial">
          <source>When merged, code integrity policies combine their file rules.</source>
          <target>When merged, code integrity policies combine their file rules.</target>
        </segment>
      </unit>
      <unit id="872">
        <segment state="initial">
          <source>Each file rule level has its benefit and disadvantage.</source>
          <target>Each file rule level has its benefit and disadvantage.</target>
        </segment>
      </unit>
      <unit id="873">
        <segment state="initial">
          <source>Use Table 3 to select the appropriate protection level for your available administrative resources and Device Guard deployment scenario.</source>
          <target>Use Table 3 to select the appropriate protection level for your available administrative resources and Device Guard deployment scenario.</target>
        </segment>
      </unit>
      <unit id="874">
        <segment state="initial">
          <source>Table 3.</source>
          <target>Table 3.</target>
        </segment>
      </unit>
      <unit id="875">
        <segment state="initial">
          <source>Code integrity policy - file rule levels</source>
          <target>Code integrity policy - file rule levels</target>
        </segment>
      </unit>
      <unit id="876">
        <segment state="initial">
          <source>Rule level</source>
          <target>Rule level</target>
        </segment>
      </unit>
      <unit id="877">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="878">
        <segment state="initial">
          <source>Hash</source>
          <target>Hash</target>
        </segment>
      </unit>
      <unit id="879">
        <segment state="initial">
          <source>Specifies individual hash values for each discovered binary.</source>
          <target>Specifies individual hash values for each discovered binary.</target>
        </segment>
      </unit>
      <unit id="880">
        <segment state="initial">
          <source>Although this level is specific, it can cause additional administrative overhead to maintain the current product versions’ hash values.</source>
          <target>Although this level is specific, it can cause additional administrative overhead to maintain the current product versions’ hash values.</target>
        </segment>
      </unit>
      <unit id="881">
        <segment state="initial">
          <source>Each time a binary is updated, the hash value changes, therefore requiring a policy update.</source>
          <target>Each time a binary is updated, the hash value changes, therefore requiring a policy update.</target>
        </segment>
      </unit>
      <unit id="882">
        <segment state="initial">
          <source>FileName</source>
          <target>FileName</target>
        </segment>
      </unit>
      <unit id="883">
        <segment state="initial">
          <source>Specifies individual binary file names.</source>
          <target>Specifies individual binary file names.</target>
        </segment>
      </unit>
      <unit id="884">
        <segment state="initial">
          <source>Although the hash values for an application are modified when updated, the file names are typically not.</source>
          <target>Although the hash values for an application are modified when updated, the file names are typically not.</target>
        </segment>
      </unit>
      <unit id="885">
        <segment state="initial">
          <source>This offers less specific security than the hash level but does not typically require a policy update when any binary is modified.</source>
          <target>This offers less specific security than the hash level but does not typically require a policy update when any binary is modified.</target>
        </segment>
      </unit>
      <unit id="886">
        <segment state="initial">
          <source>SignedVersion</source>
          <target>SignedVersion</target>
        </segment>
      </unit>
      <unit id="887">
        <segment state="initial">
          <source>This combines the publisher rule with a version number.</source>
          <target>This combines the publisher rule with a version number.</target>
        </segment>
      </unit>
      <unit id="888">
        <segment state="initial">
          <source>This option allows anything from the specified publisher, with a version at or above the specified version number, to run.</source>
          <target>This option allows anything from the specified publisher, with a version at or above the specified version number, to run.</target>
        </segment>
      </unit>
      <unit id="889">
        <segment state="initial">
          <source>Publisher</source>
          <target>Publisher</target>
        </segment>
      </unit>
      <unit id="890">
        <segment state="initial">
          <source>This is a combination of the PCA certificate and the common name (CN) on the leaf certificate.</source>
          <target>This is a combination of the PCA certificate and the common name (CN) on the leaf certificate.</target>
        </segment>
      </unit>
      <unit id="891">
        <segment state="initial">
          <source>In the scenario that a PCA certificate is used to sign multiple companies’ applications (such as VeriSign), this rule level allows organizations to trust the PCA certificate but only for the company whose name is on the leaf certificate (for example, Intel for device drivers).</source>
          <target>In the scenario that a PCA certificate is used to sign multiple companies’ applications (such as VeriSign), this rule level allows organizations to trust the PCA certificate but only for the company whose name is on the leaf certificate (for example, Intel for device drivers).</target>
        </segment>
      </unit>
      <unit id="892">
        <segment state="initial">
          <source>This level trusts a certificate with a long validity period but only when combined with a trusted leaf certificate.</source>
          <target>This level trusts a certificate with a long validity period but only when combined with a trusted leaf certificate.</target>
        </segment>
      </unit>
      <unit id="893">
        <segment state="initial">
          <source>FilePublisher</source>
          <target>FilePublisher</target>
        </segment>
      </unit>
      <unit id="894">
        <segment state="initial">
          <source>This is a combination of “FileName” plus “Publisher” (PCA certificate with CN of leaf) plus a minimum version number.</source>
          <target>This is a combination of “FileName” plus “Publisher” (PCA certificate with CN of leaf) plus a minimum version number.</target>
        </segment>
      </unit>
      <unit id="895">
        <segment state="initial">
          <source>This option trusts specific files from the specified publisher, with a version at or above the specified version number.</source>
          <target>This option trusts specific files from the specified publisher, with a version at or above the specified version number.</target>
        </segment>
      </unit>
      <unit id="896">
        <segment state="initial">
          <source>LeafCertificate</source>
          <target>LeafCertificate</target>
        </segment>
      </unit>
      <unit id="897">
        <segment state="initial">
          <source>Adds trusted signers at the individual signing certificate level.</source>
          <target>Adds trusted signers at the individual signing certificate level.</target>
        </segment>
      </unit>
      <unit id="898">
        <segment state="initial">
          <source>The benefit of using this level versus the individual hash level is that new versions of the product will have different hash values but typically the same signing certificate.</source>
          <target>The benefit of using this level versus the individual hash level is that new versions of the product will have different hash values but typically the same signing certificate.</target>
        </segment>
      </unit>
      <unit id="899">
        <segment state="initial">
          <source>Using this level, no policy update would be needed to run the new version of the application.</source>
          <target>Using this level, no policy update would be needed to run the new version of the application.</target>
        </segment>
      </unit>
      <unit id="900">
        <segment state="initial">
          <source>However, leaf certificates have much shorter validity periods than PCA certificates, so additional administrative overhead is associated with updating the code integrity policy when these certificates expire.</source>
          <target>However, leaf certificates have much shorter validity periods than PCA certificates, so additional administrative overhead is associated with updating the code integrity policy when these certificates expire.</target>
        </segment>
      </unit>
      <unit id="901">
        <segment state="initial">
          <source>PcaCertificate</source>
          <target>PcaCertificate</target>
        </segment>
      </unit>
      <unit id="902">
        <segment state="initial">
          <source>Adds the highest certificate in the provided certificate chain to signers.</source>
          <target>Adds the highest certificate in the provided certificate chain to signers.</target>
        </segment>
      </unit>
      <unit id="903">
        <segment state="initial">
          <source>This is typically one certificate below the root certificate, because the scan does not validate anything above the presented signature by going online or checking local root stores.</source>
          <target>This is typically one certificate below the root certificate, because the scan does not validate anything above the presented signature by going online or checking local root stores.</target>
        </segment>
      </unit>
      <unit id="904">
        <segment state="initial">
          <source>RootCertificate</source>
          <target>RootCertificate</target>
        </segment>
      </unit>
      <unit id="905">
        <segment state="initial">
          <source>Currently unsupported.</source>
          <target>Currently unsupported.</target>
        </segment>
      </unit>
      <unit id="906">
        <segment state="initial">
          <source>WHQL</source>
          <target>WHQL</target>
        </segment>
      </unit>
      <unit id="907">
        <segment state="initial">
          <source>Trusts binaries if they have been validated and signed by WHQL.</source>
          <target>Trusts binaries if they have been validated and signed by WHQL.</target>
        </segment>
      </unit>
      <unit id="908">
        <segment state="initial">
          <source>This is primarily for kernel binaries.</source>
          <target>This is primarily for kernel binaries.</target>
        </segment>
      </unit>
      <unit id="909">
        <segment state="initial">
          <source>WHQLPublisher</source>
          <target>WHQLPublisher</target>
        </segment>
      </unit>
      <unit id="910">
        <segment state="initial">
          <source>This is a combination of the WHQL and the CN on the leaf certificate and is primarily for kernel binaries.</source>
          <target>This is a combination of the WHQL and the CN on the leaf certificate and is primarily for kernel binaries.</target>
        </segment>
      </unit>
      <unit id="911">
        <segment state="initial">
          <source>WHQLFilePublisher</source>
          <target>WHQLFilePublisher</target>
        </segment>
      </unit>
      <unit id="912">
        <segment state="initial">
          <source>Specifies that the binaries are validated and signed by WHQL, with a specific publisher (WHQLPublisher), and that the binary is the specified version or newer.</source>
          <target>Specifies that the binaries are validated and signed by WHQL, with a specific publisher (WHQLPublisher), and that the binary is the specified version or newer.</target>
        </segment>
      </unit>
      <unit id="913">
        <segment state="initial">
          <source>This is primarily for kernel binaries.</source>
          <target>This is primarily for kernel binaries.</target>
        </segment>
      </unit>
      <unit id="914">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you create code integrity policies with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New-CIPolicy</pc> cmdlet, you can specify a primary file rule level by including the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–Level</pc> parameter.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you create code integrity policies with the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New-CIPolicy</pc> cmdlet, you can specify a primary file rule level by including the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–Level</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="915">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>For discovered binaries that cannot be trusted based on the primary file rule criteria, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–Fallback</pc> parameter.</source>
          <target>For discovered binaries that cannot be trusted based on the primary file rule criteria, use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–Fallback</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="916">
        <segment state="initial">
          <source>For example, if the primary file rule level is PCACertificate but you would like to trust the unsigned applications as well, using the Hash rule level as a fallback adds the hash values of binaries that did not have a signing certificate.</source>
          <target>For example, if the primary file rule level is PCACertificate but you would like to trust the unsigned applications as well, using the Hash rule level as a fallback adds the hash values of binaries that did not have a signing certificate.</target>
        </segment>
      </unit>
      <unit id="917">
        <segment state="initial">
          <source>Create code integrity policies from golden PCs</source>
          <target>Create code integrity policies from golden PCs</target>
        </segment>
      </unit>
      <unit id="918">
        <segment state="initial">
          <source>The process to create a golden code integrity policy from a reference system is straightforward.</source>
          <target>The process to create a golden code integrity policy from a reference system is straightforward.</target>
        </segment>
      </unit>
      <unit id="919">
        <segment state="initial">
          <source>This section outlines the process that is required to successfully create a code integrity policy with Windows PowerShell.</source>
          <target>This section outlines the process that is required to successfully create a code integrity policy with Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="920">
        <segment state="initial">
          <source>First, for this example, you must initiate variables to be used during the creation process.</source>
          <target>First, for this example, you must initiate variables to be used during the creation process.</target>
        </segment>
      </unit>
      <unit id="921">
        <segment state="initial">
          <source>Rather than using variables, you can simply use the full file paths in the command.</source>
          <target>Rather than using variables, you can simply use the full file paths in the command.</target>
        </segment>
      </unit>
      <unit id="922">
        <segment state="initial">
          <source>Next, you create the code integrity policy by scanning the system for installed applications.</source>
          <target>Next, you create the code integrity policy by scanning the system for installed applications.</target>
        </segment>
      </unit>
      <unit id="923">
        <segment state="initial">
          <source>When created, the policy file is converted to binary format so that Windows can consume its contents.</source>
          <target>When created, the policy file is converted to binary format so that Windows can consume its contents.</target>
        </segment>
      </unit>
      <unit id="924">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Before you begin this procedure, ensure that the reference PC is clean of viruses or malware.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Before you begin this procedure, ensure that the reference PC is clean of viruses or malware.</target>
        </segment>
      </unit>
      <unit id="925">
        <segment state="initial">
          <source>Each piece of installed software should be validated as trustworthy before you create this policy.</source>
          <target>Each piece of installed software should be validated as trustworthy before you create this policy.</target>
        </segment>
      </unit>
      <unit id="926">
        <segment state="initial">
          <source>Also, be sure that any software that you would like to be scanned is installed on the system before you create the code integrity policy.</source>
          <target>Also, be sure that any software that you would like to be scanned is installed on the system before you create the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="927">
        <segment state="initial">
          <source>To create a code integrity policy, copy each of the following commands into an elevated Windows PowerShell session, in order:</source>
          <target>To create a code integrity policy, copy each of the following commands into an elevated Windows PowerShell session, in order:</target>
        </segment>
      </unit>
      <unit id="928">
        <segment state="initial">
          <source>Initialize variables that you will use:</source>
          <target>Initialize variables that you will use:</target>
        </segment>
      </unit>
      <unit id="929">
        <segment state="initial">
          <source>Create a new code integrity policy by scanning the system for installed applications:</source>
          <target>Create a new code integrity policy by scanning the system for installed applications:</target>
        </segment>
      </unit>
      <unit id="930">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  By specifying the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–UserPEs</pc> parameter, rule option <pc dataRefEnd="id6" dataRefStart="id5" id="p3">0 Enabled:UMCI</pc> is automatically added to the code integrity policy.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  By specifying the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–UserPEs</pc> parameter, rule option <pc dataRefEnd="id6" dataRefStart="id5" id="p3">0 Enabled:UMCI</pc> is automatically added to the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="931">
        <segment state="initial">
          <source>If you do not specify this parameter, use the following command to enable UMCI:</source>
          <target>If you do not specify this parameter, use the following command to enable UMCI:</target>
        </segment>
      </unit>
      <unit id="932">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">*</data>
          <data id="id6">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You can add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–Fallback</pc> parameter to catch any applications not discovered using the primary file rule level specified by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–Level</pc> parameter.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You can add the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–Fallback</pc> parameter to catch any applications not discovered using the primary file rule level specified by the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">–Level</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="933">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policy-rules)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about file rule level options, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</source>
          <target>For more information about file rule level options, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</target>
        </segment>
      </unit>
      <unit id="934">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If you would like to specify the code integrity policy scan to look only at a specific drive, you can do so by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–ScanPath</pc> parameter.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If you would like to specify the code integrity policy scan to look only at a specific drive, you can do so by using the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">–ScanPath</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="935">
        <segment state="initial">
          <source>Without this parameter, as shown in the example, the entire system is scanned.</source>
          <target>Without this parameter, as shown in the example, the entire system is scanned.</target>
        </segment>
      </unit>
      <unit id="936">
        <segment state="initial">
          <source>Convert the code integrity policy to a binary format:</source>
          <target>Convert the code integrity policy to a binary format:</target>
        </segment>
      </unit>
      <unit id="937">
        <segment state="initial">
          <source>After you complete these steps, the Device Guard binary file (DeviceGuardPolicy.bin) and original .xml file (IntialScan.xml) will be available on your desktop.</source>
          <target>After you complete these steps, the Device Guard binary file (DeviceGuardPolicy.bin) and original .xml file (IntialScan.xml) will be available on your desktop.</target>
        </segment>
      </unit>
      <unit id="938">
        <segment state="initial">
          <source>You can use the binary version as a code integrity policy or sign it for additional security.</source>
          <target>You can use the binary version as a code integrity policy or sign it for additional security.</target>
        </segment>
      </unit>
      <unit id="939">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you keep the original .xml file of the policy for use when you need to merge the code integrity policy with another policy or update its rule options.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft recommends that you keep the original .xml file of the policy for use when you need to merge the code integrity policy with another policy or update its rule options.</target>
        </segment>
      </unit>
      <unit id="940">
        <segment state="initial">
          <source>Alternatively, you would have to create a new policy from a new scan for servicing.</source>
          <target>Alternatively, you would have to create a new policy from a new scan for servicing.</target>
        </segment>
      </unit>
      <unit id="941">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#merge-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to merge code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Merge code integrity policies</pc> section.</source>
          <target>For more information about how to merge code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Merge code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="942">
        <segment state="initial">
          <source>Microsoft recommends that every code integrity policy be run in audit mode before being enforced.</source>
          <target>Microsoft recommends that every code integrity policy be run in audit mode before being enforced.</target>
        </segment>
      </unit>
      <unit id="943">
        <segment state="initial">
          <source>Doing so allows administrators to discover any issues with the policy without receiving error message dialog boxes.</source>
          <target>Doing so allows administrators to discover any issues with the policy without receiving error message dialog boxes.</target>
        </segment>
      </unit>
      <unit id="944">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to audit a code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</source>
          <target>For information about how to audit a code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="945">
        <segment state="initial">
          <source>Audit code integrity policies</source>
          <target>Audit code integrity policies</target>
        </segment>
      </unit>
      <unit id="946">
        <segment state="initial">
          <source>When code integrity policies are run in audit mode, it allows administrators to discover any applications that were missed during an initial policy scan and to identify any new applications that have been installed and run since the original policy was created.</source>
          <target>When code integrity policies are run in audit mode, it allows administrators to discover any applications that were missed during an initial policy scan and to identify any new applications that have been installed and run since the original policy was created.</target>
        </segment>
      </unit>
      <unit id="947">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>While a code integrity policy is running in audit mode, any binary that runs and would have been denied had the policy been enforced is logged in the Applications and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />CodeIntegrity<ph dataRef="id3" id="ph3" />Operational event log.</source>
          <target>While a code integrity policy is running in audit mode, any binary that runs and would have been denied had the policy been enforced is logged in the Applications and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />CodeIntegrity<ph dataRef="id3" id="ph3" />Operational event log.</target>
        </segment>
      </unit>
      <unit id="948">
        <segment state="initial">
          <source>When these logged binaries have been validated, they can easily be added to a new code integrity policy.</source>
          <target>When these logged binaries have been validated, they can easily be added to a new code integrity policy.</target>
        </segment>
      </unit>
      <unit id="949">
        <segment state="initial">
          <source>When the new exception policy is created, you can merge it with your existing code integrity policies.</source>
          <target>When the new exception policy is created, you can merge it with your existing code integrity policies.</target>
        </segment>
      </unit>
      <unit id="950">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Before you begin this process, you need to create a code integrity policy binary file.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Before you begin this process, you need to create a code integrity policy binary file.</target>
        </segment>
      </unit>
      <unit id="951">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-an-audit-code-integrity-policy)</data>
        </originalData>
        <segment state="initial">
          <source>If you have not already done so, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create an audit code integrity policy</pc> section for a step-by-step walkthrough of the process to create a code integrity policy and convert it to binary format.</source>
          <target>If you have not already done so, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create an audit code integrity policy</pc> section for a step-by-step walkthrough of the process to create a code integrity policy and convert it to binary format.</target>
        </segment>
      </unit>
      <unit id="952">
        <segment state="initial">
          <source>To audit a code integrity policy with local policy:</source>
          <target>To audit a code integrity policy with local policy:</target>
        </segment>
      </unit>
      <unit id="953">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-integrity-policies-from-golden-pcs)</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>Copy the DeviceGuardPolicy.bin file that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section to C:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" />System32<ph dataRef="id5" id="ph3" />CodeIntegrity.</source>
          <target>Copy the DeviceGuardPolicy.bin file that you created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section to C:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" />System32<ph dataRef="id5" id="ph3" />CodeIntegrity.</target>
        </segment>
      </unit>
      <unit id="954">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the system you want to run in audit mode, open the Local Group Policy Editor by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPEdit.msc</pc>.</source>
          <target>On the system you want to run in audit mode, open the Local Group Policy Editor by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPEdit.msc</pc>.</target>
        </segment>
      </unit>
      <unit id="955">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
        </originalData>
        <segment state="initial">
          <source>Navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard, and then select <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Deploy Code Integrity Policy</pc>.</source>
          <target>Navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard, and then select <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Deploy Code Integrity Policy</pc>.</target>
        </segment>
      </unit>
      <unit id="956">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>Enable this setting by using the file path C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity<ph dataRef="id4" id="ph4" />DeviceGuardPolicy.bin, as shown in Figure 22.</source>
          <target>Enable this setting by using the file path C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity<ph dataRef="id4" id="ph4" />DeviceGuardPolicy.bin, as shown in Figure 22.</target>
        </segment>
      </unit>
      <unit id="957">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceGuardPolicy.bin</pc> is not a required policy name.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceGuardPolicy.bin</pc> is not a required policy name.</target>
        </segment>
      </unit>
      <unit id="958">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>This name was simply used in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section and so was used here.</source>
          <target>This name was simply used in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section and so was used here.</target>
        </segment>
      </unit>
      <unit id="959">
        <segment state="initial">
          <source>Also, this policy file does not need to be copied to every system.</source>
          <target>Also, this policy file does not need to be copied to every system.</target>
        </segment>
      </unit>
      <unit id="960">
        <segment state="initial">
          <source>Alternatively, you can copy the code integrity policies to a file share to which all computer accounts have access.</source>
          <target>Alternatively, you can copy the code integrity policies to a file share to which all computer accounts have access.</target>
        </segment>
      </unit>
      <unit id="961">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Any policy you select here is converted to SIPolicy.p7b when it is deployed to the individual computers.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Any policy you select here is converted to SIPolicy.p7b when it is deployed to the individual computers.</target>
        </segment>
      </unit>
      <unit id="962">
        <segment state="initial">
          <source>figure 22</source>
          <target>figure 22</target>
        </segment>
      </unit>
      <unit id="963">
        <segment state="initial">
          <source>Figure 22.</source>
          <target>Figure 22.</target>
        </segment>
      </unit>
      <unit id="964">
        <segment state="initial">
          <source>Deploy your code integrity policy</source>
          <target>Deploy your code integrity policy</target>
        </segment>
      </unit>
      <unit id="965">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>     You may have noticed that the GPO setting references a .p7b file and this policy uses a .bin file.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>     You may have noticed that the GPO setting references a .p7b file and this policy uses a .bin file.</target>
        </segment>
      </unit>
      <unit id="966">
        <segment state="initial">
          <source>Regardless of the type of policy you deploy (.bin, .p7b, or .p7), they are all converted to SIPolicy.p7b when dropped on the Windows 10 computers.</source>
          <target>Regardless of the type of policy you deploy (.bin, .p7b, or .p7), they are all converted to SIPolicy.p7b when dropped on the Windows 10 computers.</target>
        </segment>
      </unit>
      <unit id="967">
        <segment state="initial">
          <source>Microsoft recommends that you make your code integrity policies friendly and allow the system to convert the policy names for you.</source>
          <target>Microsoft recommends that you make your code integrity policies friendly and allow the system to convert the policy names for you.</target>
        </segment>
      </unit>
      <unit id="968">
        <segment state="initial">
          <source>By doing this, it ensures that the policies are easily distinguishable when viewed in a share or any other central repository.</source>
          <target>By doing this, it ensures that the policies are easily distinguishable when viewed in a share or any other central repository.</target>
        </segment>
      </unit>
      <unit id="969">
        <segment state="initial">
          <source>Restart reference system for the code integrity policy to take effect.</source>
          <target>Restart reference system for the code integrity policy to take effect.</target>
        </segment>
      </unit>
      <unit id="970">
        <segment state="initial">
          <source>Monitor the CodeIntegrity event log.</source>
          <target>Monitor the CodeIntegrity event log.</target>
        </segment>
      </unit>
      <unit id="971">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>While in audit mode, any exception to the deployed code integrity policy will be logged in the Applications and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />CodeIntegrity<ph dataRef="id3" id="ph3" />Operational event log, as shown in Figure 23.</source>
          <target>While in audit mode, any exception to the deployed code integrity policy will be logged in the Applications and Services Logs<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />CodeIntegrity<ph dataRef="id3" id="ph3" />Operational event log, as shown in Figure 23.</target>
        </segment>
      </unit>
      <unit id="972">
        <segment state="initial">
          <source>figure 23</source>
          <target>figure 23</target>
        </segment>
      </unit>
      <unit id="973">
        <segment state="initial">
          <source>Figure 23.</source>
          <target>Figure 23.</target>
        </segment>
      </unit>
      <unit id="974">
        <segment state="initial">
          <source>Exceptions to the deployed code integrity policy</source>
          <target>Exceptions to the deployed code integrity policy</target>
        </segment>
      </unit>
      <unit id="975">
        <segment state="initial">
          <source>Validate any code integrity policy exceptions.</source>
          <target>Validate any code integrity policy exceptions.</target>
        </segment>
      </unit>
      <unit id="976">
        <segment state="initial">
          <source>After you run a code integrity policy in audit mode, Microsoft recommends that each logged exception be researched and validated.</source>
          <target>After you run a code integrity policy in audit mode, Microsoft recommends that each logged exception be researched and validated.</target>
        </segment>
      </unit>
      <unit id="977">
        <segment state="initial">
          <source>In addition to discovering which application is causing the exception and ensuring that it should be added to the code integrity policy, be sure to check which file level should be used to trust each application.</source>
          <target>In addition to discovering which application is causing the exception and ensuring that it should be added to the code integrity policy, be sure to check which file level should be used to trust each application.</target>
        </segment>
      </unit>
      <unit id="978">
        <segment state="initial">
          <source>Although the Hash file rule level will catch all of these exceptions, it may not be the best way to trust all of the exceptions.</source>
          <target>Although the Hash file rule level will catch all of these exceptions, it may not be the best way to trust all of the exceptions.</target>
        </segment>
      </unit>
      <unit id="979">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policy-rules)</data>
        </originalData>
        <segment state="initial">
          <source>For information about file rule levels and their purpose, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</source>
          <target>For information about file rule levels and their purpose, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</target>
        </segment>
      </unit>
      <unit id="980">
        <segment state="initial">
          <source>Create code integrity policy from audit events.</source>
          <target>Create code integrity policy from audit events.</target>
        </segment>
      </unit>
      <unit id="981">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to create code integrity policies from audit events, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section.</source>
          <target>For information about how to create code integrity policies from audit events, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="982">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
          <data id="id5">\\</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  An alternative method to test a policy is to rename the test file to SIPolicy.p7b and drop it into C:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" />System32<ph dataRef="id5" id="ph3" />CodeIntegrity, rather than deploy it with the local machine policy.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  An alternative method to test a policy is to rename the test file to SIPolicy.p7b and drop it into C:<ph dataRef="id3" id="ph1" />Windows<ph dataRef="id4" id="ph2" />System32<ph dataRef="id5" id="ph3" />CodeIntegrity, rather than deploy it with the local machine policy.</target>
        </segment>
      </unit>
      <unit id="983">
        <segment state="initial">
          <source>Create an audit code integrity policy</source>
          <target>Create an audit code integrity policy</target>
        </segment>
      </unit>
      <unit id="984">
        <segment state="initial">
          <source>When you run code integrity policies in audit mode, validate any exceptions and determine whether you will need to add them to the code integrity policy you want to audit.</source>
          <target>When you run code integrity policies in audit mode, validate any exceptions and determine whether you will need to add them to the code integrity policy you want to audit.</target>
        </segment>
      </unit>
      <unit id="985">
        <segment state="initial">
          <source>Use the system as you normally would to ensure that any use exceptions are logged.</source>
          <target>Use the system as you normally would to ensure that any use exceptions are logged.</target>
        </segment>
      </unit>
      <unit id="986">
        <segment state="initial">
          <source>When you are ready to create a code integrity policy from the auditing events, complete the following steps in an elevated Windows PowerShell session:</source>
          <target>When you are ready to create a code integrity policy from the auditing events, complete the following steps in an elevated Windows PowerShell session:</target>
        </segment>
      </unit>
      <unit id="987">
        <segment state="initial">
          <source>Initialize the variables that will be used:</source>
          <target>Initialize the variables that will be used:</target>
        </segment>
      </unit>
      <unit id="988">
        <segment state="initial">
          <source>Analyze audit results.</source>
          <target>Analyze audit results.</target>
        </segment>
      </unit>
      <unit id="989">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>Before you create a code integrity policy from audit events, Microsoft recommends that each exception be analyzed, as discussed in steps 5 and 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</source>
          <target>Before you create a code integrity policy from audit events, Microsoft recommends that each exception be analyzed, as discussed in steps 5 and 6 of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="990">
        <segment state="initial">
          <source>Generate a new code integrity policy from logged audit events:</source>
          <target>Generate a new code integrity policy from logged audit events:</target>
        </segment>
      </unit>
      <unit id="991">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you create policies from audit events, you should carefully consider the file rule level that you select to trust.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  When you create policies from audit events, you should carefully consider the file rule level that you select to trust.</target>
        </segment>
      </unit>
      <unit id="992">
        <segment state="initial">
          <source>In this example, you use the Hash rule level, which should be used as a last resort.</source>
          <target>In this example, you use the Hash rule level, which should be used as a last resort.</target>
        </segment>
      </unit>
      <unit id="993">
        <segment state="initial">
          <source>After you complete these steps, the Device Guard audit policy .xml file (DeviceGuardAuditPolicy.xml) will be available on your desktop.</source>
          <target>After you complete these steps, the Device Guard audit policy .xml file (DeviceGuardAuditPolicy.xml) will be available on your desktop.</target>
        </segment>
      </unit>
      <unit id="994">
        <segment state="initial">
          <source>You can now use this file to update the existing code integrity policy that you ran in audit mode by merging the two policies.</source>
          <target>You can now use this file to update the existing code integrity policy that you ran in audit mode by merging the two policies.</target>
        </segment>
      </unit>
      <unit id="995">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#merge-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For instructions on how to merge this audit policy with the existing code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Merge code integrity policies</pc> section.</source>
          <target>For instructions on how to merge this audit policy with the existing code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Merge code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="996">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-code-integrity-policies-from-golden-pcs)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You may have noticed that you did not generate a binary version of this policy as you did in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You may have noticed that you did not generate a binary version of this policy as you did in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="997">
        <segment state="initial">
          <source>This is because code integrity policies created from an audit log are not intended to run as stand-alone policies but rather to update existing code integrity policies.</source>
          <target>This is because code integrity policies created from an audit log are not intended to run as stand-alone policies but rather to update existing code integrity policies.</target>
        </segment>
      </unit>
      <unit id="998">
        <segment state="initial">
          <source>Merge code integrity policies</source>
          <target>Merge code integrity policies</target>
        </segment>
      </unit>
      <unit id="999">
        <segment state="initial">
          <source>When you develop code integrity policies, you will occasionally need to merge two policies.</source>
          <target>When you develop code integrity policies, you will occasionally need to merge two policies.</target>
        </segment>
      </unit>
      <unit id="1000">
        <segment state="initial">
          <source>A common example is when a code integrity policy is initially created and audited.</source>
          <target>A common example is when a code integrity policy is initially created and audited.</target>
        </segment>
      </unit>
      <unit id="1001">
        <segment state="initial">
          <source>Another example is when you create a single master policy by using multiple code integrity policies previously created from golden PCs.</source>
          <target>Another example is when you create a single master policy by using multiple code integrity policies previously created from golden PCs.</target>
        </segment>
      </unit>
      <unit id="1002">
        <segment state="initial">
          <source>Because each Windows 10 machine can have only one code integrity policy, it is important to properly maintain these policies.</source>
          <target>Because each Windows 10 machine can have only one code integrity policy, it is important to properly maintain these policies.</target>
        </segment>
      </unit>
      <unit id="1003">
        <segment state="initial">
          <source>In this example, audit events have been saved into a secondary code integrity policy that you then merge with the initial code integrity policy.</source>
          <target>In this example, audit events have been saved into a secondary code integrity policy that you then merge with the initial code integrity policy.</target>
        </segment>
      </unit>
      <unit id="1004">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-code-integrity-policies-from-golden-pcs)</data>
          <data id="id5">[</data>
          <data id="id6">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following example uses the code integrity policy .xml files that you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Audit code integrity policies</pc> sections.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The following example uses the code integrity policy .xml files that you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Audit code integrity policies</pc> sections.</target>
        </segment>
      </unit>
      <unit id="1005">
        <segment state="initial">
          <source>You can follow this process, however, with any two code integrity policies you would like to combine.</source>
          <target>You can follow this process, however, with any two code integrity policies you would like to combine.</target>
        </segment>
      </unit>
      <unit id="1006">
        <segment state="initial">
          <source>To merge two code integrity policies, complete the following steps in an elevated Windows PowerShell session:</source>
          <target>To merge two code integrity policies, complete the following steps in an elevated Windows PowerShell session:</target>
        </segment>
      </unit>
      <unit id="1007">
        <segment state="initial">
          <source>Initialize the variables that will be used:</source>
          <target>Initialize the variables that will be used:</target>
        </segment>
      </unit>
      <unit id="1008">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The variables in this section specifically expect to find an initial policy on your desktop called InitialScan.xml and an audit code integrity policy called DeviceGuardAuditPolicy.xml.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The variables in this section specifically expect to find an initial policy on your desktop called InitialScan.xml and an audit code integrity policy called DeviceGuardAuditPolicy.xml.</target>
        </segment>
      </unit>
      <unit id="1009">
        <segment state="initial">
          <source>If you want to merge other code integrity policies, update the variables accordingly.</source>
          <target>If you want to merge other code integrity policies, update the variables accordingly.</target>
        </segment>
      </unit>
      <unit id="1010">
        <segment state="initial">
          <source>Merge two policies to create a new code integrity policy:</source>
          <target>Merge two policies to create a new code integrity policy:</target>
        </segment>
      </unit>
      <unit id="1011">
        <segment state="initial">
          <source>Convert the merged code integrity policy to binary format:</source>
          <target>Convert the merged code integrity policy to binary format:</target>
        </segment>
      </unit>
      <unit id="1012">
        <segment state="initial">
          <source>Now that you have created a new code integrity policy called NewDeviceGuardPolicy.bin, you can deploy the policy to systems manually or by using Group Policy or Microsoft client management solutions.</source>
          <target>Now that you have created a new code integrity policy called NewDeviceGuardPolicy.bin, you can deploy the policy to systems manually or by using Group Policy or Microsoft client management solutions.</target>
        </segment>
      </unit>
      <unit id="1013">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#deploy-manage-code-gp)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to deploy this new policy with Group Policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section.</source>
          <target>For information about how to deploy this new policy with Group Policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section.</target>
        </segment>
      </unit>
      <unit id="1014">
        <segment state="initial">
          <source>Enforce code integrity policies</source>
          <target>Enforce code integrity policies</target>
        </segment>
      </unit>
      <unit id="1015">
        <segment state="initial">
          <source>Every code integrity policy is created with audit mode enabled.</source>
          <target>Every code integrity policy is created with audit mode enabled.</target>
        </segment>
      </unit>
      <unit id="1016">
        <segment state="initial">
          <source>After you have successfully deployed and tested a code integrity policy in audit mode and are ready to test the policy in enforced mode, complete the following steps in an elevated Windows PowerShell session:</source>
          <target>After you have successfully deployed and tested a code integrity policy in audit mode and are ready to test the policy in enforced mode, complete the following steps in an elevated Windows PowerShell session:</target>
        </segment>
      </unit>
      <unit id="1017">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Every code integrity policy should be tested in audit mode first.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Every code integrity policy should be tested in audit mode first.</target>
        </segment>
      </unit>
      <unit id="1018">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</source>
          <target>For information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="1019">
        <segment state="initial">
          <source>Initialize the variables that will be used:</source>
          <target>Initialize the variables that will be used:</target>
        </segment>
      </unit>
      <unit id="1020">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The initial code integrity policy that this section referenced was created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity polices from golden PCs</pc> section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The initial code integrity policy that this section referenced was created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity polices from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="1021">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you are using a different code integrity policy, update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CIPolicyPath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">InitialCIPolicy</pc> variables.</source>
          <target>If you are using a different code integrity policy, update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CIPolicyPath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">InitialCIPolicy</pc> variables.</target>
        </segment>
      </unit>
      <unit id="1022">
        <segment state="initial">
          <source>Copy the initial file to maintain an original copy:</source>
          <target>Copy the initial file to maintain an original copy:</target>
        </segment>
      </unit>
      <unit id="1023">
        <segment state="initial">
          <source>Remove the audit mode rule option:</source>
          <target>Remove the audit mode rule option:</target>
        </segment>
      </unit>
      <unit id="1024">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Rather than adding an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enforced</pc> option, code integrity policies are implicitly enforced if no <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Audit Mode Enabled</pc> option is present.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Rather than adding an <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enforced</pc> option, code integrity policies are implicitly enforced if no <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Audit Mode Enabled</pc> option is present.</target>
        </segment>
      </unit>
      <unit id="1025">
        <segment state="initial">
          <source>Convert the new code integrity policy to binary format:</source>
          <target>Convert the new code integrity policy to binary format:</target>
        </segment>
      </unit>
      <unit id="1026">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft strongly recommends that you enable rule options 9 and 10 before you run any enforced policy for the first time.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Microsoft strongly recommends that you enable rule options 9 and 10 before you run any enforced policy for the first time.</target>
        </segment>
      </unit>
      <unit id="1027">
        <segment state="initial">
          <source>If already present in the policy, do not remove it.</source>
          <target>If already present in the policy, do not remove it.</target>
        </segment>
      </unit>
      <unit id="1028">
        <segment state="initial">
          <source>Doing so allows Windows to start if the code integrity policy blocks a kernel-mode driver from running and provides administrators with a pre-boot command prompt.</source>
          <target>Doing so allows Windows to start if the code integrity policy blocks a kernel-mode driver from running and provides administrators with a pre-boot command prompt.</target>
        </segment>
      </unit>
      <unit id="1029">
        <segment state="initial">
          <source>When ready for enterprise deployment, you can remove these options.</source>
          <target>When ready for enterprise deployment, you can remove these options.</target>
        </segment>
      </unit>
      <unit id="1030">
        <segment state="initial">
          <source>Now that this policy has been enforced, you can deploy it to your test machines.</source>
          <target>Now that this policy has been enforced, you can deploy it to your test machines.</target>
        </segment>
      </unit>
      <unit id="1031">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">[</data>
          <data id="id5">](#deploy-and-manage-code-integrity-policies-with-group-policy)</data>
        </originalData>
        <segment state="initial">
          <source>Rename the policy to SIPolicy.p7b and copy it to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity for testing, or deploy the policy through Group Policy by following the instructions in the <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section, or through client management software by following the instructions in the section “Deploying and managing code integrity policies by using Microsoft client management solutions.”</source>
          <target>Rename the policy to SIPolicy.p7b and copy it to C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity for testing, or deploy the policy through Group Policy by following the instructions in the <pc dataRefEnd="id5" dataRefStart="id4" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section, or through client management software by following the instructions in the section “Deploying and managing code integrity policies by using Microsoft client management solutions.”</target>
        </segment>
      </unit>
      <unit id="1032">
        <segment state="initial">
          <source>Signing code integrity policies with SignTool.exe</source>
          <target>Signing code integrity policies with SignTool.exe</target>
        </segment>
      </unit>
      <unit id="1033">
        <segment state="initial">
          <source>Signed code integrity policies give organizations the highest level of malware protection available in Windows 10.</source>
          <target>Signed code integrity policies give organizations the highest level of malware protection available in Windows 10.</target>
        </segment>
      </unit>
      <unit id="1034">
        <segment state="initial">
          <source>In addition to their enforced policy rules, signed policies cannot be modified or deleted by a user or administrator on the machine.</source>
          <target>In addition to their enforced policy rules, signed policies cannot be modified or deleted by a user or administrator on the machine.</target>
        </segment>
      </unit>
      <unit id="1035">
        <segment state="initial">
          <source>These policies are designed to prevent administrative tampering and kernel mode exploit access.</source>
          <target>These policies are designed to prevent administrative tampering and kernel mode exploit access.</target>
        </segment>
      </unit>
      <unit id="1036">
        <segment state="initial">
          <source>With this in mind, it is much more difficult to remove signed code integrity policies than unsigned ones.</source>
          <target>With this in mind, it is much more difficult to remove signed code integrity policies than unsigned ones.</target>
        </segment>
      </unit>
      <unit id="1037">
        <segment state="initial">
          <source>Before you sign and deploy a signed code integrity policy, Microsoft recommends that you audit the policy to discover any blocked applications that should be allowed to run.</source>
          <target>Before you sign and deploy a signed code integrity policy, Microsoft recommends that you audit the policy to discover any blocked applications that should be allowed to run.</target>
        </segment>
      </unit>
      <unit id="1038">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</source>
          <target>For more information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc> section.</target>
        </segment>
      </unit>
      <unit id="1039">
        <segment state="initial">
          <source>Signing code integrity policies by using an on-premises CA-generated certificate or a purchased code signing certificate is straightforward.</source>
          <target>Signing code integrity policies by using an on-premises CA-generated certificate or a purchased code signing certificate is straightforward.</target>
        </segment>
      </unit>
      <unit id="1040">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-a-device-guard-code-signing-certificate)</data>
        </originalData>
        <segment state="initial">
          <source>If you do not currently have a code signing certificate exported in .pfx format (containing private keys, extensions, and root certificates), see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> to create one with your on-premises CA.</source>
          <target>If you do not currently have a code signing certificate exported in .pfx format (containing private keys, extensions, and root certificates), see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> to create one with your on-premises CA.</target>
        </segment>
      </unit>
      <unit id="1041">
        <segment state="initial">
          <source>Before signing code integrity policies for the first time, be sure to enable rule options 9 and 10 to leave troubleshooting options available to test administrators.</source>
          <target>Before signing code integrity policies for the first time, be sure to enable rule options 9 and 10 to leave troubleshooting options available to test administrators.</target>
        </segment>
      </unit>
      <unit id="1042">
        <segment state="initial">
          <source>When validated and ready for enterprise deployment, you can remove these options.</source>
          <target>When validated and ready for enterprise deployment, you can remove these options.</target>
        </segment>
      </unit>
      <unit id="1043">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#code-integrity-policy-rules)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to add rule options, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</source>
          <target>For information about how to add rule options, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Code integrity policy rules</pc> section.</target>
        </segment>
      </unit>
      <unit id="1044">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Signing code integrity policies is the last step in a code integrity deployment.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Signing code integrity policies is the last step in a code integrity deployment.</target>
        </segment>
      </unit>
      <unit id="1045">
        <segment state="initial">
          <source>It is much more difficult to remove a signed code integrity policy than an unsigned one.</source>
          <target>It is much more difficult to remove a signed code integrity policy than an unsigned one.</target>
        </segment>
      </unit>
      <unit id="1046">
        <segment state="initial">
          <source>Before you deploy a signed code integrity policy to deployed client computers, be sure to test its effect on a subset of machines.</source>
          <target>Before you deploy a signed code integrity policy to deployed client computers, be sure to test its effect on a subset of machines.</target>
        </segment>
      </unit>
      <unit id="1047">
        <segment state="initial">
          <source>To sign a code integrity policy with SignTool.exe, you need the following components:</source>
          <target>To sign a code integrity policy with SignTool.exe, you need the following components:</target>
        </segment>
      </unit>
      <unit id="1048">
        <segment state="initial">
          <source>SignTool.exe, found in the Windows SDK (Windows 7 or later)</source>
          <target>SignTool.exe, found in the Windows SDK (Windows 7 or later)</target>
        </segment>
      </unit>
      <unit id="1049">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>The binary format of the code integrity policy that you generated in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section or another code integrity policy that you have created</source>
          <target>The binary format of the code integrity policy that you generated in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity policies from golden PCs</pc> section or another code integrity policy that you have created</target>
        </segment>
      </unit>
      <unit id="1050">
        <segment state="initial">
          <source>An internal CA code signing certificate or a purchased code signing certificate</source>
          <target>An internal CA code signing certificate or a purchased code signing certificate</target>
        </segment>
      </unit>
      <unit id="1051">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-dg-code)</data>
        </originalData>
        <segment state="initial">
          <source>If you do not have a code signing certificate, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section for instructions on how to create one.</source>
          <target>If you do not have a code signing certificate, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section for instructions on how to create one.</target>
        </segment>
      </unit>
      <unit id="1052">
        <segment state="initial">
          <source>If you use an alternate certificate or code integrity policy, be sure to update the following steps with the appropriate variables and certificate so that the commands will function properly.</source>
          <target>If you use an alternate certificate or code integrity policy, be sure to update the following steps with the appropriate variables and certificate so that the commands will function properly.</target>
        </segment>
      </unit>
      <unit id="1053">
        <segment state="initial">
          <source>To sign the existing code integrity policy, copy each of the following commands into an elevated Windows PowerShell session:</source>
          <target>To sign the existing code integrity policy, copy each of the following commands into an elevated Windows PowerShell session:</target>
        </segment>
      </unit>
      <unit id="1054">
        <segment state="initial">
          <source>Initialize the variables that will be used:</source>
          <target>Initialize the variables that will be used:</target>
        </segment>
      </unit>
      <unit id="1055">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">[</data>
          <data id="id4">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This example uses the code integrity policy that you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This example uses the code integrity policy that you created in the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Create code integrity policies from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="1056">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If you are signing another policy, be sure to update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">$CIPolicyPath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">$CIPolicyBin</pc> variables with the correct information.</source>
          <target>If you are signing another policy, be sure to update the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">$CIPolicyPath</pc> and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">$CIPolicyBin</pc> variables with the correct information.</target>
        </segment>
      </unit>
      <unit id="1057">
        <segment state="initial">
          <source>Import the .pfx code signing certificate.</source>
          <target>Import the .pfx code signing certificate.</target>
        </segment>
      </unit>
      <unit id="1058">
        <segment state="initial">
          <source>Import the code signing certificate that you will use to sign the code integrity policy into the signing user’s personal store on the machine that will be doing the signing.</source>
          <target>Import the code signing certificate that you will use to sign the code integrity policy into the signing user’s personal store on the machine that will be doing the signing.</target>
        </segment>
      </unit>
      <unit id="1059">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-dg-code)</data>
        </originalData>
        <segment state="initial">
          <source>In this example, you use the certificate that was created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section.</source>
          <target>In this example, you use the certificate that was created in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a Device Guard code signing certificate</pc> section.</target>
        </segment>
      </unit>
      <unit id="1060">
        <segment state="initial">
          <source>Export the .cer code signing certificate.</source>
          <target>Export the .cer code signing certificate.</target>
        </segment>
      </unit>
      <unit id="1061">
        <segment state="initial">
          <source>After the code signing certificate has been imported, export the .cer version to your desktop.</source>
          <target>After the code signing certificate has been imported, export the .cer version to your desktop.</target>
        </segment>
      </unit>
      <unit id="1062">
        <segment state="initial">
          <source>This version will be added to the policy so that it can be updated later.</source>
          <target>This version will be added to the policy so that it can be updated later.</target>
        </segment>
      </unit>
      <unit id="1063">
        <segment state="initial">
          <source>Navigate to your desktop as the working directory:</source>
          <target>Navigate to your desktop as the working directory:</target>
        </segment>
      </unit>
      <unit id="1064">
        <segment state="initial">
          <source>Add an update signer certificate to the code integrity policy:</source>
          <target>Add an update signer certificate to the code integrity policy:</target>
        </segment>
      </unit>
      <unit id="1065">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />Path to exported .cer certificate<ph dataRef="id6" id="ph2" /></pc> should be the full path to the certificate that you exported in step 3.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">
              <ph dataRef="id5" id="ph1" />Path to exported .cer certificate<ph dataRef="id6" id="ph2" /></pc> should be the full path to the certificate that you exported in step 3.</target>
        </segment>
      </unit>
      <unit id="1066">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Adding update signers is crucial to being able to modify or disable this policy in the future.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Adding update signers is crucial to being able to modify or disable this policy in the future.</target>
        </segment>
      </unit>
      <unit id="1067">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#disable-signed-code)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to disable signed code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable signed code integrity policies within Windows</pc> section.</source>
          <target>For more information about how to disable signed code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable signed code integrity policies within Windows</pc> section.</target>
        </segment>
      </unit>
      <unit id="1068">
        <segment state="initial">
          <source>Remove the unsigned policy rule option:</source>
          <target>Remove the unsigned policy rule option:</target>
        </segment>
      </unit>
      <unit id="1069">
        <segment state="initial">
          <source>Convert the policy to binary format:</source>
          <target>Convert the policy to binary format:</target>
        </segment>
      </unit>
      <unit id="1070">
        <segment state="initial">
          <source>Sign the code integrity policy by using SignTool.exe:</source>
          <target>Sign the code integrity policy by using SignTool.exe:</target>
        </segment>
      </unit>
      <unit id="1071">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">&amp;lt;</data>
          <data id="id6">&amp;gt;</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Path to signtool.exe<ph dataRef="id6" id="ph2" /></pc> variable should be the full path to the SignTool.exe utility.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The <pc dataRefEnd="id4" dataRefStart="id3" id="p2"><ph dataRef="id5" id="ph1" />Path to signtool.exe<ph dataRef="id6" id="ph2" /></pc> variable should be the full path to the SignTool.exe utility.</target>
        </segment>
      </unit>
      <unit id="1072">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContosoDGSigningCert</pc> is the subject name of the certificate that will be used to sign the code integrity policy.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">ContosoDGSigningCert</pc> is the subject name of the certificate that will be used to sign the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="1073">
        <segment state="initial">
          <source>You should import this certificate to your personal certificate store on the machine you use to sign the policy.</source>
          <target>You should import this certificate to your personal certificate store on the machine you use to sign the policy.</target>
        </segment>
      </unit>
      <unit id="1074">
        <segment state="initial">
          <source>Validate the signed file.</source>
          <target>Validate the signed file.</target>
        </segment>
      </unit>
      <unit id="1075">
        <segment state="initial">
          <source>When complete, the commands should output a signed policy file called DeviceGuardPolicy.bin.p7 to your desktop.</source>
          <target>When complete, the commands should output a signed policy file called DeviceGuardPolicy.bin.p7 to your desktop.</target>
        </segment>
      </unit>
      <unit id="1076">
        <segment state="initial">
          <source>You can deploy this file the same way you deploy an enforced or non-enforced policy.</source>
          <target>You can deploy this file the same way you deploy an enforced or non-enforced policy.</target>
        </segment>
      </unit>
      <unit id="1077">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#deploy-and-manage-code-integrity-policies-with-group-policy)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section.</source>
          <target>For information about how to deploy code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy and manage code integrity policies with Group Policy</pc> section.</target>
        </segment>
      </unit>
      <unit id="1078">
        <segment state="initial">
          <source>Disable unsigned code integrity policies</source>
          <target>Disable unsigned code integrity policies</target>
        </segment>
      </unit>
      <unit id="1079">
        <segment state="initial">
          <source>There may come a time when an administrator wants to disable a code integrity policy.</source>
          <target>There may come a time when an administrator wants to disable a code integrity policy.</target>
        </segment>
      </unit>
      <unit id="1080">
        <segment state="initial">
          <source>For unsigned code integrity policies, this process is simple.</source>
          <target>For unsigned code integrity policies, this process is simple.</target>
        </segment>
      </unit>
      <unit id="1081">
        <segment state="initial">
          <source>Depending on how the code integrity policy was deployed, unsigned policies can be disabled in one of two ways.</source>
          <target>Depending on how the code integrity policy was deployed, unsigned policies can be disabled in one of two ways.</target>
        </segment>
      </unit>
      <unit id="1082">
        <segment state="initial">
          <source>If a code integrity policy was manually enabled and copied to the code integrity folder location, simply delete the file and restart the machine.</source>
          <target>If a code integrity policy was manually enabled and copied to the code integrity folder location, simply delete the file and restart the machine.</target>
        </segment>
      </unit>
      <unit id="1083">
        <segment state="initial">
          <source>The following locations can contain executing code integrity policies:</source>
          <target>The following locations can contain executing code integrity policies:</target>
        </segment>
      </unit>
      <unit id="1084">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</source>
          <target>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</target>
        </segment>
      </unit>
      <unit id="1085">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</source>
          <target>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</target>
        </segment>
      </unit>
      <unit id="1086">
        <segment state="initial">
          <source>If the code integrity policy was deployed by using Group Policy, the GPO that is currently enabling and deploying the policy must be set to disabled.</source>
          <target>If the code integrity policy was deployed by using Group Policy, the GPO that is currently enabling and deploying the policy must be set to disabled.</target>
        </segment>
      </unit>
      <unit id="1087">
        <segment state="initial">
          <source>Then, the code integrity policy will be disabled on the next computer restart.</source>
          <target>Then, the code integrity policy will be disabled on the next computer restart.</target>
        </segment>
      </unit>
      <unit id="1088">
        <segment state="initial">
          <source>Disable signed code integrity policies within Windows</source>
          <target>Disable signed code integrity policies within Windows</target>
        </segment>
      </unit>
      <unit id="1089">
        <segment state="initial">
          <source>Signed policies protect Windows from administrative manipulation as well as malware that has gained administrative-level access to the system.</source>
          <target>Signed policies protect Windows from administrative manipulation as well as malware that has gained administrative-level access to the system.</target>
        </segment>
      </unit>
      <unit id="1090">
        <segment state="initial">
          <source>For this reason, signed code integrity policies are intentionally more difficult to remove than unsigned policies.</source>
          <target>For this reason, signed code integrity policies are intentionally more difficult to remove than unsigned policies.</target>
        </segment>
      </unit>
      <unit id="1091">
        <segment state="initial">
          <source>They inherently protect themselves from modification or removal and therefore are difficult even for administrators to remove successfully.</source>
          <target>They inherently protect themselves from modification or removal and therefore are difficult even for administrators to remove successfully.</target>
        </segment>
      </unit>
      <unit id="1092">
        <segment state="initial">
          <source>If the signed code integrity policy is manually enabled and copied to the CodeIntegrity folder, to remove the policy, you must complete the following steps:</source>
          <target>If the signed code integrity policy is manually enabled and copied to the CodeIntegrity folder, to remove the policy, you must complete the following steps:</target>
        </segment>
      </unit>
      <unit id="1093">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  For reference, signed code integrity policies should be replaced and removed from the following locations:</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  For reference, signed code integrity policies should be replaced and removed from the following locations:</target>
        </segment>
      </unit>
      <unit id="1094">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</source>
          <target>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</target>
        </segment>
      </unit>
      <unit id="1095">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</source>
          <target>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</target>
        </segment>
      </unit>
      <unit id="1096">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Replace the existing policy with another signed policy that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">6 Enabled: Unsigned System Integrity Policy</pc> rule option enabled.</source>
          <target>Replace the existing policy with another signed policy that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">6 Enabled: Unsigned System Integrity Policy</pc> rule option enabled.</target>
        </segment>
      </unit>
      <unit id="1097">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  To take effect, this policy must be signed with a certificate previously added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UpdatePolicySigners</pc> section of the original signed policy you want to replace.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  To take effect, this policy must be signed with a certificate previously added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UpdatePolicySigners</pc> section of the original signed policy you want to replace.</target>
        </segment>
      </unit>
      <unit id="1098">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="1099">
        <segment state="initial">
          <source>Verify that the new signed policy exists on the client.</source>
          <target>Verify that the new signed policy exists on the client.</target>
        </segment>
      </unit>
      <unit id="1100">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If the signed policy that contains rule option 6 has not been processed on the client, the addition of an unsigned policy may cause boot failures.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If the signed policy that contains rule option 6 has not been processed on the client, the addition of an unsigned policy may cause boot failures.</target>
        </segment>
      </unit>
      <unit id="1101">
        <segment state="initial">
          <source>Delete the new policy.</source>
          <target>Delete the new policy.</target>
        </segment>
      </unit>
      <unit id="1102">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="1103">
        <segment state="initial">
          <source>If the signed code integrity policy has been deployed using by using Group Policy, you must complete the following steps:</source>
          <target>If the signed code integrity policy has been deployed using by using Group Policy, you must complete the following steps:</target>
        </segment>
      </unit>
      <unit id="1104">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Replace the existing policy in the GPO with another signed policy that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">6 Enabled: Unsigned System Integrity Policy</pc> rule option enabled.</source>
          <target>Replace the existing policy in the GPO with another signed policy that has the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">6 Enabled: Unsigned System Integrity Policy</pc> rule option enabled.</target>
        </segment>
      </unit>
      <unit id="1105">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  To take effect, this policy must be signed with a certificate previously added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UpdatePolicySigners</pc> section of the original signed policy you want to replace.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  To take effect, this policy must be signed with a certificate previously added to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">UpdatePolicySigners</pc> section of the original signed policy you want to replace.</target>
        </segment>
      </unit>
      <unit id="1106">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="1107">
        <segment state="initial">
          <source>Verify that the new signed policy exists on the client.</source>
          <target>Verify that the new signed policy exists on the client.</target>
        </segment>
      </unit>
      <unit id="1108">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If the signed policy that contains rule option 6 has not been processed on the client, the addition of an unsigned policy may cause boot failures.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If the signed policy that contains rule option 6 has not been processed on the client, the addition of an unsigned policy may cause boot failures.</target>
        </segment>
      </unit>
      <unit id="1109">
        <segment state="initial">
          <source>Set the GPO to disabled.</source>
          <target>Set the GPO to disabled.</target>
        </segment>
      </unit>
      <unit id="1110">
        <segment state="initial">
          <source>Delete the new policy.</source>
          <target>Delete the new policy.</target>
        </segment>
      </unit>
      <unit id="1111">
        <segment state="initial">
          <source>Restart the client computer.</source>
          <target>Restart the client computer.</target>
        </segment>
      </unit>
      <unit id="1112">
        <segment state="initial">
          <source>Disable signed code integrity policies within the BIOS</source>
          <target>Disable signed code integrity policies within the BIOS</target>
        </segment>
      </unit>
      <unit id="1113">
        <segment state="initial">
          <source>There may be a time when signed code integrity policies cause a boot failure.</source>
          <target>There may be a time when signed code integrity policies cause a boot failure.</target>
        </segment>
      </unit>
      <unit id="1114">
        <segment state="initial">
          <source>Because code integrity policies enforce kernel mode drivers, it is important that they be thoroughly tested on each software and hardware configuration before being enforced and signed.</source>
          <target>Because code integrity policies enforce kernel mode drivers, it is important that they be thoroughly tested on each software and hardware configuration before being enforced and signed.</target>
        </segment>
      </unit>
      <unit id="1115">
        <segment state="initial">
          <source>Signed code integrity policies are validated in the pre-boot sequence by using Secure Boot.</source>
          <target>Signed code integrity policies are validated in the pre-boot sequence by using Secure Boot.</target>
        </segment>
      </unit>
      <unit id="1116">
        <segment state="initial">
          <source>When you disable the Secure Boot feature in the BIOS, and then delete the file from the following locations on the operating system disk, it allows the system to boot into Windows:</source>
          <target>When you disable the Secure Boot feature in the BIOS, and then delete the file from the following locations on the operating system disk, it allows the system to boot into Windows:</target>
        </segment>
      </unit>
      <unit id="1117">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
        </originalData>
        <segment state="initial">
          <source>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</source>
          <target>EFI System Partition<ph dataRef="id1" id="ph1" />Microsoft<ph dataRef="id2" id="ph2" />Boot</target>
        </segment>
      </unit>
      <unit id="1118">
        <originalData>
          <data id="id1">&amp;gt;\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</source>
          <target>OS Volume<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity</target>
        </segment>
      </unit>
      <unit id="1119">
        <segment state="initial">
          <source>Deploy and manage code integrity policies with Group Policy</source>
          <target>Deploy and manage code integrity policies with Group Policy</target>
        </segment>
      </unit>
      <unit id="1120">
        <segment state="initial">
          <source>Code integrity policies can easily be deployed and managed with Group Policy.</source>
          <target>Code integrity policies can easily be deployed and managed with Group Policy.</target>
        </segment>
      </unit>
      <unit id="1121">
        <segment state="initial">
          <source>A Device Guard administrative template will be available in Windows Server 2016 that allows you to simplify deployment of Device Guard hardware-based security features and code integrity policies.</source>
          <target>A Device Guard administrative template will be available in Windows Server 2016 that allows you to simplify deployment of Device Guard hardware-based security features and code integrity policies.</target>
        </segment>
      </unit>
      <unit id="1122">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>The following procedure walks you through how to deploy a code integrity policy called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceGuardPolicy.bin</pc> to a test OU called <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DG Enabled PCs</pc> by using a GPO called <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Contoso GPO Test</pc>.</source>
          <target>The following procedure walks you through how to deploy a code integrity policy called <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DeviceGuardPolicy.bin</pc> to a test OU called <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DG Enabled PCs</pc> by using a GPO called <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Contoso GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="1123">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This walkthrough requires that you have previously created a code integrity policy and have a Windows 10 client PC on which to test a Group Policy deployment.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  This walkthrough requires that you have previously created a code integrity policy and have a Windows 10 client PC on which to test a Group Policy deployment.</target>
        </segment>
      </unit>
      <unit id="1124">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#create-code-integrity-polices-from-golden-pcs)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to create a code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity polices from golden PCs</pc> section.</source>
          <target>For more information about how to create a code integrity policy, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create code integrity polices from golden PCs</pc> section.</target>
        </segment>
      </unit>
      <unit id="1125">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Signed code integrity policies can cause boot failures when deployed.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  Signed code integrity policies can cause boot failures when deployed.</target>
        </segment>
      </unit>
      <unit id="1126">
        <segment state="initial">
          <source>Microsoft recommends that signed code integrity policies be thoroughly tested on each hardware platform before enterprise deployment.</source>
          <target>Microsoft recommends that signed code integrity policies be thoroughly tested on each hardware platform before enterprise deployment.</target>
        </segment>
      </unit>
      <unit id="1127">
        <segment state="initial">
          <source>To deploy and manage a code integrity policy with Group Policy:</source>
          <target>To deploy and manage a code integrity policy with Group Policy:</target>
        </segment>
      </unit>
      <unit id="1128">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On a domain controller on a client computer on which RSAT is installed, open the GPMC by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPMC.MSC</pc> or searching for “Group Policy Management” in Windows Search.</source>
          <target>On a domain controller on a client computer on which RSAT is installed, open the GPMC by running <pc dataRefEnd="id2" dataRefStart="id1" id="p1">GPMC.MSC</pc> or searching for “Group Policy Management” in Windows Search.</target>
        </segment>
      </unit>
      <unit id="1129">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Create a new GPO: right-click the DG Enabled PCs OU, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>, as shown in Figure 24.</source>
          <target>Create a new GPO: right-click the DG Enabled PCs OU, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Create a GPO in this domain, and Link it here</pc>, as shown in Figure 24.</target>
        </segment>
      </unit>
      <unit id="1130">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The DG Enabled PCs OU is just an example of where to link the test GPO created in this section.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  The DG Enabled PCs OU is just an example of where to link the test GPO created in this section.</target>
        </segment>
      </unit>
      <unit id="1131">
        <segment state="initial">
          <source>Any OU name can be used.</source>
          <target>Any OU name can be used.</target>
        </segment>
      </unit>
      <unit id="1132">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#approach-enterprise)</data>
        </originalData>
        <segment state="initial">
          <source>Also, security group filtering is an option when considering policy partitioning options based on the strategy discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section.</source>
          <target>Also, security group filtering is an option when considering policy partitioning options based on the strategy discussed in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Approach enterprise code integrity deployment</pc> section.</target>
        </segment>
      </unit>
      <unit id="1133">
        <segment state="initial">
          <source>figure 24</source>
          <target>figure 24</target>
        </segment>
      </unit>
      <unit id="1134">
        <segment state="initial">
          <source>Figure 24.</source>
          <target>Figure 24.</target>
        </segment>
      </unit>
      <unit id="1135">
        <segment state="initial">
          <source>Create a GPO</source>
          <target>Create a GPO</target>
        </segment>
      </unit>
      <unit id="1136">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Name new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso GPO Test</pc>.</source>
          <target>Name new GPO <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Contoso GPO Test</pc>.</target>
        </segment>
      </unit>
      <unit id="1137">
        <segment state="initial">
          <source>This example uses Contoso GPO Test as the name of the GPO.</source>
          <target>This example uses Contoso GPO Test as the name of the GPO.</target>
        </segment>
      </unit>
      <unit id="1138">
        <segment state="initial">
          <source>You can choose any name that you prefer for this example.</source>
          <target>You can choose any name that you prefer for this example.</target>
        </segment>
      </unit>
      <unit id="1139">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</source>
          <target>Open the Group Policy Management Editor: right-click the new GPO, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="1140">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>In the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</source>
          <target>In the selected GPO, navigate to Computer Configuration<ph dataRef="id1" id="ph1" />Administrative Templates<ph dataRef="id2" id="ph2" />System<ph dataRef="id3" id="ph3" />Device Guard.</target>
        </segment>
      </unit>
      <unit id="1141">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy Code Integrity Policy</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</source>
          <target>Then, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deploy Code Integrity Policy</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="1142">
        <segment state="initial">
          <source>figure 25</source>
          <target>figure 25</target>
        </segment>
      </unit>
      <unit id="1143">
        <segment state="initial">
          <source>Figure 25.</source>
          <target>Figure 25.</target>
        </segment>
      </unit>
      <unit id="1144">
        <segment state="initial">
          <source>Edit the code integration policy</source>
          <target>Edit the code integration policy</target>
        </segment>
      </unit>
      <unit id="1145">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Display Code Integrity Policy</pc> dialog box, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enabled</pc> option, and then specify the code integrity policy deployment path.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Display Code Integrity Policy</pc> dialog box, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enabled</pc> option, and then specify the code integrity policy deployment path.</target>
        </segment>
      </unit>
      <unit id="1146">
        <segment state="initial">
          <source>In this policy setting, you specify either the local path in which the policy will exist on the client computer or a Universal Naming Convention (UNC) path that the client computers will look to retrieve the latest version of the policy.</source>
          <target>In this policy setting, you specify either the local path in which the policy will exist on the client computer or a Universal Naming Convention (UNC) path that the client computers will look to retrieve the latest version of the policy.</target>
        </segment>
      </unit>
      <unit id="1147">
        <originalData>
          <data id="id1">\\</data>
          <data id="id2">\\</data>
          <data id="id3">\\</data>
          <data id="id4">\\</data>
        </originalData>
        <segment state="initial">
          <source>This example copied the DeviceGuardPolicy.bin file onto the test machine and will enable this setting and use the file path C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity<ph dataRef="id4" id="ph4" />DeviceGuardPolicy.bin, as shown in Figure 26.</source>
          <target>This example copied the DeviceGuardPolicy.bin file onto the test machine and will enable this setting and use the file path C:<ph dataRef="id1" id="ph1" />Windows<ph dataRef="id2" id="ph2" />System32<ph dataRef="id3" id="ph3" />CodeIntegrity<ph dataRef="id4" id="ph4" />DeviceGuardPolicy.bin, as shown in Figure 26.</target>
        </segment>
      </unit>
      <unit id="1148">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">*</data>
          <data id="id4">*</data>
          <data id="id5">[</data>
          <data id="id6">](#create-code-golden)</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceGuardPolicy.bin</pc> is not a required policy name: It was simply used in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Create code integrity policies from golden PCs</pc> section and so is used here, as well.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>
            <pc dataRefEnd="id4" dataRefStart="id3" id="p2">DeviceGuardPolicy.bin</pc> is not a required policy name: It was simply used in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Create code integrity policies from golden PCs</pc> section and so is used here, as well.</target>
        </segment>
      </unit>
      <unit id="1149">
        <segment state="initial">
          <source>Also, this policy file does not need to be copied to every computer.</source>
          <target>Also, this policy file does not need to be copied to every computer.</target>
        </segment>
      </unit>
      <unit id="1150">
        <segment state="initial">
          <source>Alternatively, you can copy the code integrity policies to a file share to which the computer accounts have access.</source>
          <target>Alternatively, you can copy the code integrity policies to a file share to which the computer accounts have access.</target>
        </segment>
      </unit>
      <unit id="1151">
        <segment state="initial">
          <source>Any policy selected here is converted to SIPolicy.p7b when it is deployed to the individual client computers.</source>
          <target>Any policy selected here is converted to SIPolicy.p7b when it is deployed to the individual client computers.</target>
        </segment>
      </unit>
      <unit id="1152">
        <segment state="initial">
          <source>figure 26</source>
          <target>figure 26</target>
        </segment>
      </unit>
      <unit id="1153">
        <segment state="initial">
          <source>Figure 26.</source>
          <target>Figure 26.</target>
        </segment>
      </unit>
      <unit id="1154">
        <segment state="initial">
          <source>Enable the code integrity policy</source>
          <target>Enable the code integrity policy</target>
        </segment>
      </unit>
      <unit id="1155">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You may have noticed that the GPO setting references a .p7b file and this example uses a .bin file for the policy.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  You may have noticed that the GPO setting references a .p7b file and this example uses a .bin file for the policy.</target>
        </segment>
      </unit>
      <unit id="1156">
        <segment state="initial">
          <source>Regardless of the type of policy you deploy (.bin, .p7b, or .p7), they are all converted to SIPolicy.p7b when dropped on the Windows 10 client computers.</source>
          <target>Regardless of the type of policy you deploy (.bin, .p7b, or .p7), they are all converted to SIPolicy.p7b when dropped on the Windows 10 client computers.</target>
        </segment>
      </unit>
      <unit id="1157">
        <segment state="initial">
          <source>Make your code integrity policies friendly and allow the system to convert the policy names for you to ensure that the policies are easily distinguishable when viewed in a share or any other central repository.</source>
          <target>Make your code integrity policies friendly and allow the system to convert the policy names for you to ensure that the policies are easily distinguishable when viewed in a share or any other central repository.</target>
        </segment>
      </unit>
      <unit id="1158">
        <segment state="initial">
          <source>Close the Group Policy Management Editor, and then restart the Windows 10 test machine.</source>
          <target>Close the Group Policy Management Editor, and then restart the Windows 10 test machine.</target>
        </segment>
      </unit>
      <unit id="1159">
        <segment state="initial">
          <source>Restarting the client computer updates the code integrity policy.</source>
          <target>Restarting the client computer updates the code integrity policy.</target>
        </segment>
      </unit>
      <unit id="1160">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#audit-code-integrity-policies)</data>
        </originalData>
        <segment state="initial">
          <source>For information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc>section.</source>
          <target>For information about how to audit code integrity policies, see the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Audit code integrity policies</pc>section.</target>
        </segment>
      </unit>
      <unit id="1161">
        <segment state="initial">
          <source>Create a Device Guard code signing certificate</source>
          <target>Create a Device Guard code signing certificate</target>
        </segment>
      </unit>
      <unit id="1162">
        <segment state="initial">
          <source>To sign catalog files or code integrity policies internally, you will either need a publicly issued code signing certificate or an internal CA.</source>
          <target>To sign catalog files or code integrity policies internally, you will either need a publicly issued code signing certificate or an internal CA.</target>
        </segment>
      </unit>
      <unit id="1163">
        <segment state="initial">
          <source>If you have purchased a code signing certificate, you can skip these steps and proceed to the sections that outline the steps to sign catalog files and code integrity policies.</source>
          <target>If you have purchased a code signing certificate, you can skip these steps and proceed to the sections that outline the steps to sign catalog files and code integrity policies.</target>
        </segment>
      </unit>
      <unit id="1164">
        <segment state="initial">
          <source>If you have not purchased a certificate but have an internal CA, complete these steps to create a code signing certificate:</source>
          <target>If you have not purchased a certificate but have an internal CA, complete these steps to create a code signing certificate:</target>
        </segment>
      </unit>
      <unit id="1165">
        <segment state="initial">
          <source>Open the Certification Authority Microsoft Management Console (MMC) snap-in, and then select your issuing CA.</source>
          <target>Open the Certification Authority Microsoft Management Console (MMC) snap-in, and then select your issuing CA.</target>
        </segment>
      </unit>
      <unit id="1166">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>When connected, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificate Templates</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Manage</pc> to open the Certification Templates Console.</source>
          <target>When connected, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificate Templates</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Manage</pc> to open the Certification Templates Console.</target>
        </segment>
      </unit>
      <unit id="1167">
        <segment state="initial">
          <source>figure 27</source>
          <target>figure 27</target>
        </segment>
      </unit>
      <unit id="1168">
        <segment state="initial">
          <source>Figure 27.</source>
          <target>Figure 27.</target>
        </segment>
      </unit>
      <unit id="1169">
        <segment state="initial">
          <source>Manage the certificate templates</source>
          <target>Manage the certificate templates</target>
        </segment>
      </unit>
      <unit id="1170">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the navigation pane, right-click the Code Signing certificate, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Duplicate Template</pc>.</source>
          <target>In the navigation pane, right-click the Code Signing certificate, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Duplicate Template</pc>.</target>
        </segment>
      </unit>
      <unit id="1171">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Compatibility</pc> tab, clear the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show resulting changes</pc> check box.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Compatibility</pc> tab, clear the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Show resulting changes</pc> check box.</target>
        </segment>
      </unit>
      <unit id="1172">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">**</data>
          <data id="id8">**</data>
        </originalData>
        <segment state="initial">
          <source>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Server 2012</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Certification Authority</pc> list, and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows 8 / Windows Server 2012</pc> from the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Certificate recipient</pc> list.</source>
          <target>Select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Server 2012</pc> from the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Certification Authority</pc> list, and then select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Windows 8 / Windows Server 2012</pc> from the <pc dataRefEnd="id8" dataRefStart="id7" id="p4">Certificate recipient</pc> list.</target>
        </segment>
      </unit>
      <unit id="1173">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">General</pc> tab, specify the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Template display name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Template name</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">General</pc> tab, specify the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Template display name</pc> and <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Template name</pc>.</target>
        </segment>
      </unit>
      <unit id="1174">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Catalog Signing Certificate</pc>.</source>
          <target>This example uses <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DG Catalog Signing Certificate</pc>.</target>
        </segment>
      </unit>
      <unit id="1175">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Request Handling</pc> tab, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Allow private key to be exported</pc> check box.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Request Handling</pc> tab, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Allow private key to be exported</pc> check box.</target>
        </segment>
      </unit>
      <unit id="1176">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extensions</pc> tab, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Basic Constraints</pc> check box, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Edit</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Extensions</pc> tab, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Basic Constraints</pc> check box, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Edit</pc>.</target>
        </segment>
      </unit>
      <unit id="1177">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit Basic Constraints Extension</pc> dialog box, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable the extension</pc> check box, as shown in Figure 28.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Edit Basic Constraints Extension</pc> dialog box, select the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Enable the extension</pc> check box, as shown in Figure 28.</target>
        </segment>
      </unit>
      <unit id="1178">
        <segment state="initial">
          <source>figure 28</source>
          <target>figure 28</target>
        </segment>
      </unit>
      <unit id="1179">
        <segment state="initial">
          <source>Figure 28.</source>
          <target>Figure 28.</target>
        </segment>
      </unit>
      <unit id="1180">
        <segment state="initial">
          <source>Enable constraints on the new template</source>
          <target>Enable constraints on the new template</target>
        </segment>
      </unit>
      <unit id="1181">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>If a certificate manager is required to approve any issued certificates, on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Issuance Requirements</pc> tab, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CA certificate manager approval</pc>.</source>
          <target>If a certificate manager is required to approve any issued certificates, on the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Issuance Requirements</pc> tab, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">CA certificate manager approval</pc>.</target>
        </segment>
      </unit>
      <unit id="1182">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Subject Name</pc> tab, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supply in the request</pc>.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Subject Name</pc> tab, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Supply in the request</pc>.</target>
        </segment>
      </unit>
      <unit id="1183">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Security</pc> tab, verify that whatever account will be used to request the certificate has the right to enroll the certificate.</source>
          <target>On the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Security</pc> tab, verify that whatever account will be used to request the certificate has the right to enroll the certificate.</target>
        </segment>
      </unit>
      <unit id="1184">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the template, and then close the Certificate Template Console.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc> to create the template, and then close the Certificate Template Console.</target>
        </segment>
      </unit>
      <unit id="1185">
        <segment state="initial">
          <source>When this certificate template has been created, you must publish it to the CA published template store.</source>
          <target>When this certificate template has been created, you must publish it to the CA published template store.</target>
        </segment>
      </unit>
      <unit id="1186">
        <segment state="initial">
          <source>To do so, complete the following steps:</source>
          <target>To do so, complete the following steps:</target>
        </segment>
      </unit>
      <unit id="1187">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Certification Authority MMC snap-in, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certification Templates</pc>, point to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Certificate Template to Issue</pc>, as shown in Figure 29.</source>
          <target>In the Certification Authority MMC snap-in, right-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certification Templates</pc>, point to <pc dataRefEnd="id4" dataRefStart="id3" id="p2">New</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Certificate Template to Issue</pc>, as shown in Figure 29.</target>
        </segment>
      </unit>
      <unit id="1188">
        <segment state="initial">
          <source>A list of available templates to issue appears, including the template you just created.</source>
          <target>A list of available templates to issue appears, including the template you just created.</target>
        </segment>
      </unit>
      <unit id="1189">
        <segment state="initial">
          <source>figure 29</source>
          <target>figure 29</target>
        </segment>
      </unit>
      <unit id="1190">
        <segment state="initial">
          <source>Figure 29.</source>
          <target>Figure 29.</target>
        </segment>
      </unit>
      <unit id="1191">
        <segment state="initial">
          <source>Select the new certificate template to issue</source>
          <target>Select the new certificate template to issue</target>
        </segment>
      </unit>
      <unit id="1192">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Select the DG Catalog signing certificate, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</source>
          <target>Select the DG Catalog signing certificate, and then click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK</pc>.</target>
        </segment>
      </unit>
      <unit id="1193">
        <segment state="initial">
          <source>Now that the template is available to be issued, you must request one from the Windows 10 computer that you use to create and sign catalog files.</source>
          <target>Now that the template is available to be issued, you must request one from the Windows 10 computer that you use to create and sign catalog files.</target>
        </segment>
      </unit>
      <unit id="1194">
        <segment state="initial">
          <source>To begin, open the MMC, and then complete the following steps:</source>
          <target>To begin, open the MMC, and then complete the following steps:</target>
        </segment>
      </unit>
      <unit id="1195">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In MMC, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add/Remove Snap-in</pc>.</source>
          <target>In MMC, from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">File</pc> menu, click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Add/Remove Snap-in</pc>.</target>
        </segment>
      </unit>
      <unit id="1196">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Double-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificates</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">My user account</pc>.</source>
          <target>Double-click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificates</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">My user account</pc>.</target>
        </segment>
      </unit>
      <unit id="1197">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>In the Certificates snap-in, right-click the Personal store folder, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">All Tasks</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Request New Certificate</pc>.</source>
          <target>In the Certificates snap-in, right-click the Personal store folder, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">All Tasks</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Request New Certificate</pc>.</target>
        </segment>
      </unit>
      <unit id="1198">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc> twice to get to the certificate selection list.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc> twice to get to the certificate selection list.</target>
        </segment>
      </unit>
      <unit id="1199">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Request Certificate</pc> list, select your newly created code signing certificate, and then select the blue text that requests additional information, as shown in Figure 30.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Request Certificate</pc> list, select your newly created code signing certificate, and then select the blue text that requests additional information, as shown in Figure 30.</target>
        </segment>
      </unit>
      <unit id="1200">
        <segment state="initial">
          <source>figure 30</source>
          <target>figure 30</target>
        </segment>
      </unit>
      <unit id="1201">
        <segment state="initial">
          <source>Figure 30.</source>
          <target>Figure 30.</target>
        </segment>
      </unit>
      <unit id="1202">
        <segment state="initial">
          <source>Get more information for your code signing certificate</source>
          <target>Get more information for your code signing certificate</target>
        </segment>
      </unit>
      <unit id="1203">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificate Properties</pc> dialog box, for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc>, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Common name</pc>.</source>
          <target>In the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Certificate Properties</pc> dialog box, for <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Type</pc>, select <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Common name</pc>.</target>
        </segment>
      </unit>
      <unit id="1204">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>For <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc>, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContosoDGSigningCert</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</source>
          <target>For <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Value</pc>, select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">ContosoDGSigningCert</pc>, and then click <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Add</pc>.</target>
        </segment>
      </unit>
      <unit id="1205">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When added, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK.</pc></source>
          <target>When added, click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">OK.</pc></target>
        </segment>
      </unit>
      <unit id="1206">
        <segment state="initial">
          <source>Enroll and finish.</source>
          <target>Enroll and finish.</target>
        </segment>
      </unit>
      <unit id="1207">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If a certificate manager is required to approve any issued certificates and you selected to require management approval on the template, the request will need to be approved in the CA before it will be issued to the client.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Note:</pc>  If a certificate manager is required to approve any issued certificates and you selected to require management approval on the template, the request will need to be approved in the CA before it will be issued to the client.</target>
        </segment>
      </unit>
      <unit id="1208">
        <segment state="initial">
          <source>This certificate must be installed in the user’s personal store on the computer that will be signing the catalog files and code integrity policies.</source>
          <target>This certificate must be installed in the user’s personal store on the computer that will be signing the catalog files and code integrity policies.</target>
        </segment>
      </unit>
      <unit id="1209">
        <segment state="initial">
          <source>If the signing is going to be taking place on the machine on which you just requested the certificate, exporting the certificate to a .pfx file will not be required because it already exists in your personal store.</source>
          <target>If the signing is going to be taking place on the machine on which you just requested the certificate, exporting the certificate to a .pfx file will not be required because it already exists in your personal store.</target>
        </segment>
      </unit>
      <unit id="1210">
        <segment state="initial">
          <source>If you are signing on another computer, you will need to export the .pfx certificate with the necessary keys and properties.</source>
          <target>If you are signing on another computer, you will need to export the .pfx certificate with the necessary keys and properties.</target>
        </segment>
      </unit>
      <unit id="1211">
        <segment state="initial">
          <source>To do so, complete the following steps:</source>
          <target>To do so, complete the following steps:</target>
        </segment>
      </unit>
      <unit id="1212">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Right-click the certificate, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">All Tasks</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Export</pc>.</source>
          <target>Right-click the certificate, point to <pc dataRefEnd="id2" dataRefStart="id1" id="p1">All Tasks</pc>, and then click <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Export</pc>.</target>
        </segment>
      </unit>
      <unit id="1213">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
        </originalData>
        <segment state="initial">
          <source>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Yes, export the private key</pc>.</source>
          <target>Click <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Next</pc>, and then select <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Yes, export the private key</pc>.</target>
        </segment>
      </unit>
      <unit id="1214">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Choose the default settings, and then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Export all extended properties</pc>.</source>
          <target>Choose the default settings, and then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Export all extended properties</pc>.</target>
        </segment>
      </unit>
      <unit id="1215">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>Set a password, select an export path, and then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DGCatSigningCert.pfx</pc> as the file name.</source>
          <target>Set a password, select an export path, and then select <pc dataRefEnd="id2" dataRefStart="id1" id="p1">DGCatSigningCert.pfx</pc> as the file name.</target>
        </segment>
      </unit>
      <unit id="1216">
        <segment state="initial">
          <source>When the certificate has been exported, import it into the personal store for the user who will be signing the catalog files or code integrity policies on the specific computer that will be signing them.</source>
          <target>When the certificate has been exported, import it into the personal store for the user who will be signing the catalog files or code integrity policies on the specific computer that will be signing them.</target>
        </segment>
      </unit>
      <unit id="1217">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="1218">
        <segment state="initial">
          <source>AppLocker overview</source>
          <target>AppLocker overview</target>
        </segment>
      </unit>
      <unit id="1219">
        <segment state="initial">
          <source>Code integrity</source>
          <target>Code integrity</target>
        </segment>
      </unit>
      <unit id="1220">
        <segment state="initial">
          <source>Credential guard</source>
          <target>Credential guard</target>
        </segment>
      </unit>
      <unit id="1221">
        <segment state="initial">
          <source>Driver compatibility with Device Guard in Windows 10</source>
          <target>Driver compatibility with Device Guard in Windows 10</target>
        </segment>
      </unit>
      <unit id="1222">
        <segment state="initial">
          <source>Dropping the Hammer Down on Malware Threats with Windows 10’s Device Guard</source>
          <target>Dropping the Hammer Down on Malware Threats with Windows 10’s Device Guard</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>