<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\keep-secure\windows-firewall-with-advanced-security-administration-with-windows-powershell.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">6e49d76320f7cf39a90c0702a8e6b3ead6df83db</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Windows Firewall with Advanced Security Administration with Windows PowerShell (Windows 10)</source>
          <target>Windows Firewall with Advanced Security Administration with Windows PowerShell (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>Windows Firewall with Advanced Security Administration with Windows PowerShell</source>
          <target>Windows Firewall with Advanced Security Administration with Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Windows Firewall with Advanced Security Administration with Windows PowerShell</source>
          <target>Windows Firewall with Advanced Security Administration with Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Applies to</source>
          <target>Applies to</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Windows 10</source>
          <target>Windows 10</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>Windows Server 2016 Technical Preview</source>
          <target>Windows Server 2016 Technical Preview</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>The Windows Firewall with Advanced Security Administration with Windows PowerShell Guide provides essential scriptlets for automating Windows Firewall with Advanced Security management.</source>
          <target>The Windows Firewall with Advanced Security Administration with Windows PowerShell Guide provides essential scriptlets for automating Windows Firewall with Advanced Security management.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>It is designed for IT pros, system administrators, IT managers, and others who use and need to automate Windows Firewall with Advanced Security management in Windows.</source>
          <target>It is designed for IT pros, system administrators, IT managers, and others who use and need to automate Windows Firewall with Advanced Security management in Windows.</target>
        </segment>
      </unit>
      <unit id="109">
        <segment state="initial">
          <source>You can use Windows PowerShell to manage your firewall and IPsec deployments.</source>
          <target>You can use Windows PowerShell to manage your firewall and IPsec deployments.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>This object-oriented scripting environment will make it easier for you to manage policies and monitor network conditions than was possible in netsh.</source>
          <target>This object-oriented scripting environment will make it easier for you to manage policies and monitor network conditions than was possible in netsh.</target>
        </segment>
      </unit>
      <unit id="111">
        <segment state="initial">
          <source>Windows PowerShell allows network settings to be self-discoverable through the syntax and parameters in each of the cmdlets.</source>
          <target>Windows PowerShell allows network settings to be self-discoverable through the syntax and parameters in each of the cmdlets.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>This guide demonstrates how common tasks were performed in netsh and how you can use Windows PowerShell to accomplish them.</source>
          <target>This guide demonstrates how common tasks were performed in netsh and how you can use Windows PowerShell to accomplish them.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>In future versions of Windows, Microsoft might remove the netsh functionality for Windows Firewall with Advanced Security.</source>
          <target>In future versions of Windows, Microsoft might remove the netsh functionality for Windows Firewall with Advanced Security.</target>
        </segment>
      </unit>
      <unit id="114">
        <segment state="initial">
          <source>Microsoft recommends that you transition to Windows PowerShell if you currently use netsh to configure and manage Windows Firewall with Advanced Security.</source>
          <target>Microsoft recommends that you transition to Windows PowerShell if you currently use netsh to configure and manage Windows Firewall with Advanced Security.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>Windows PowerShell and netsh command references are at the following locations.</source>
          <target>Windows PowerShell and netsh command references are at the following locations.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>Netsh Commands for Windows Firewall with Advanced Security</source>
          <target>Netsh Commands for Windows Firewall with Advanced Security</target>
        </segment>
      </unit>
      <unit id="117">
        <segment state="initial">
          <source>Scope</source>
          <target>Scope</target>
        </segment>
      </unit>
      <unit id="118">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](windows-firewall-with-advanced-security.md)</data>
        </originalData>
        <segment state="initial">
          <source>This guide does not teach you the fundamentals of Windows Firewall with Advanced Security, which can be found in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Firewall with Advanced Security</pc>.</source>
          <target>This guide does not teach you the fundamentals of Windows Firewall with Advanced Security, which can be found in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Windows Firewall with Advanced Security</pc>.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>It does not teach the fundamentals of Windows PowerShell, and it assumes that you are familiar with the Windows PowerShell language and the basic concepts of Windows PowerShell.</source>
          <target>It does not teach the fundamentals of Windows PowerShell, and it assumes that you are familiar with the Windows PowerShell language and the basic concepts of Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="120">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](#additional-resources)</data>
        </originalData>
        <segment state="initial">
          <source>For more info about Windows PowerShell concepts and usage, see the reference topics in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Additional resources</pc> section of this guide.</source>
          <target>For more info about Windows PowerShell concepts and usage, see the reference topics in the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Additional resources</pc> section of this guide.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Audience and user requirements</source>
          <target>Audience and user requirements</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>This guide is intended for IT pros, system administrators, and IT managers, and it assumes that you are familiar with Windows Firewall with Advanced Security, the Windows PowerShell language, and the basic concepts of Windows PowerShell.</source>
          <target>This guide is intended for IT pros, system administrators, and IT managers, and it assumes that you are familiar with Windows Firewall with Advanced Security, the Windows PowerShell language, and the basic concepts of Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="123">
        <segment state="initial">
          <source>In this topic</source>
          <target>In this topic</target>
        </segment>
      </unit>
      <unit id="124">
        <segment state="initial">
          <source>Section</source>
          <target>Section</target>
        </segment>
      </unit>
      <unit id="125">
        <segment state="initial">
          <source>Description</source>
          <target>Description</target>
        </segment>
      </unit>
      <unit id="126">
        <segment state="initial">
          <source>Set profile global defaults</source>
          <target>Set profile global defaults</target>
        </segment>
      </unit>
      <unit id="127">
        <segment state="initial">
          <source>Enable and control firewall behavior</source>
          <target>Enable and control firewall behavior</target>
        </segment>
      </unit>
      <unit id="128">
        <segment state="initial">
          <source>Deploy basic firewall rules</source>
          <target>Deploy basic firewall rules</target>
        </segment>
      </unit>
      <unit id="129">
        <segment state="initial">
          <source>How to create, modify, and delete firewall rules</source>
          <target>How to create, modify, and delete firewall rules</target>
        </segment>
      </unit>
      <unit id="130">
        <segment state="initial">
          <source>Manage Remotely</source>
          <target>Manage Remotely</target>
        </segment>
      </unit>
      <unit id="131">
        <segment state="initial">
          <source>Remote management by using</source>
          <target>Remote management by using</target>
        </segment>
      </unit>
      <unit id="132">
        <segment state="initial">
          <source>Deploy basic IPsec rule settings</source>
          <target>Deploy basic IPsec rule settings</target>
        </segment>
      </unit>
      <unit id="133">
        <segment state="initial">
          <source>IPsec rules and associated parameters</source>
          <target>IPsec rules and associated parameters</target>
        </segment>
      </unit>
      <unit id="134">
        <segment state="initial">
          <source>Deploy secure firewall rules with IPsec</source>
          <target>Deploy secure firewall rules with IPsec</target>
        </segment>
      </unit>
      <unit id="135">
        <segment state="initial">
          <source>Domain and server isolation</source>
          <target>Domain and server isolation</target>
        </segment>
      </unit>
      <unit id="136">
        <segment state="initial">
          <source>Additional resources</source>
          <target>Additional resources</target>
        </segment>
      </unit>
      <unit id="137">
        <segment state="initial">
          <source>More information about Windows PowerShell</source>
          <target>More information about Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="138">
        <segment state="initial">
          <source>Set profile global defaults</source>
          <target>Set profile global defaults</target>
        </segment>
      </unit>
      <unit id="139">
        <segment state="initial">
          <source>Global defaults set the device behavior in a per-profile basis.</source>
          <target>Global defaults set the device behavior in a per-profile basis.</target>
        </segment>
      </unit>
      <unit id="140">
        <segment state="initial">
          <source>Windows Firewall with Advanced Security supports Domain, Private, and Public profiles.</source>
          <target>Windows Firewall with Advanced Security supports Domain, Private, and Public profiles.</target>
        </segment>
      </unit>
      <unit id="141">
        <segment state="initial">
          <source>Enable Windows Firewall</source>
          <target>Enable Windows Firewall</target>
        </segment>
      </unit>
      <unit id="142">
        <segment state="initial">
          <source>Windows Firewall drops traffic that does not correspond to allowed unsolicited traffic, or traffic that is sent in response to a request by the  device.</source>
          <target>Windows Firewall drops traffic that does not correspond to allowed unsolicited traffic, or traffic that is sent in response to a request by the  device.</target>
        </segment>
      </unit>
      <unit id="143">
        <segment state="initial">
          <source>If you find that the rules you create are not being enforced, you may need to enable Windows Firewall.</source>
          <target>If you find that the rules you create are not being enforced, you may need to enable Windows Firewall.</target>
        </segment>
      </unit>
      <unit id="144">
        <segment state="initial">
          <source>Here is how to do this on a local domain  device:</source>
          <target>Here is how to do this on a local domain  device:</target>
        </segment>
      </unit>
      <unit id="145">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="146">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="147">
        <segment state="initial">
          <source>Control firewall behavior</source>
          <target>Control firewall behavior</target>
        </segment>
      </unit>
      <unit id="148">
        <segment state="initial">
          <source>The global default settings can be defined through the command-line interface.</source>
          <target>The global default settings can be defined through the command-line interface.</target>
        </segment>
      </unit>
      <unit id="149">
        <segment state="initial">
          <source>These modifications are also available through the Windows Firewall with Advanced Security console.</source>
          <target>These modifications are also available through the Windows Firewall with Advanced Security console.</target>
        </segment>
      </unit>
      <unit id="150">
        <segment state="initial">
          <source>The following scriptlets set the default inbound and outbound actions, specifies protected network connections, and allows notifications to be displayed to the user when a program is blocked from receiving inbound connections.</source>
          <target>The following scriptlets set the default inbound and outbound actions, specifies protected network connections, and allows notifications to be displayed to the user when a program is blocked from receiving inbound connections.</target>
        </segment>
      </unit>
      <unit id="151">
        <segment state="initial">
          <source>It allows unicast response to multicast or broadcast network traffic, and it specifies logging settings for troubleshooting.</source>
          <target>It allows unicast response to multicast or broadcast network traffic, and it specifies logging settings for troubleshooting.</target>
        </segment>
      </unit>
      <unit id="152">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="153">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="154">
        <segment state="initial">
          <source>Deploy basic firewall rules</source>
          <target>Deploy basic firewall rules</target>
        </segment>
      </unit>
      <unit id="155">
        <segment state="initial">
          <source>This section provides scriptlet examples for creating, modifying, and deleting firewall rules.</source>
          <target>This section provides scriptlet examples for creating, modifying, and deleting firewall rules.</target>
        </segment>
      </unit>
      <unit id="156">
        <segment state="initial">
          <source>Create firewall rules</source>
          <target>Create firewall rules</target>
        </segment>
      </unit>
      <unit id="157">
        <segment state="initial">
          <source>Adding a firewall rule in Windows PowerShell looks a lot like it did in Netsh, but the parameters and values are specified differently.</source>
          <target>Adding a firewall rule in Windows PowerShell looks a lot like it did in Netsh, but the parameters and values are specified differently.</target>
        </segment>
      </unit>
      <unit id="158">
        <segment state="initial">
          <source>Here is an example of how to allow the Telnet application to listen on the network.</source>
          <target>Here is an example of how to allow the Telnet application to listen on the network.</target>
        </segment>
      </unit>
      <unit id="159">
        <segment state="initial">
          <source>This firewall rule is scoped to the local subnet by using a keyword instead of an IP address.</source>
          <target>This firewall rule is scoped to the local subnet by using a keyword instead of an IP address.</target>
        </segment>
      </unit>
      <unit id="160">
        <segment state="initial">
          <source>Just like in Netsh, the rule is created on the local  device, and it becomes effective immediately.</source>
          <target>Just like in Netsh, the rule is created on the local  device, and it becomes effective immediately.</target>
        </segment>
      </unit>
      <unit id="161">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="162">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="163">
        <segment state="initial">
          <source>The following scriptlet shows how to add a basic firewall rule that blocks outbound traffic from a specific application and local port to a Group Policy Object (GPO) in Active Directory.</source>
          <target>The following scriptlet shows how to add a basic firewall rule that blocks outbound traffic from a specific application and local port to a Group Policy Object (GPO) in Active Directory.</target>
        </segment>
      </unit>
      <unit id="164">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In Windows PowerShell, the policy store is specified as a parameter within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New-NetFirewall</pc> cmdlet.</source>
          <target>In Windows PowerShell, the policy store is specified as a parameter within the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">New-NetFirewall</pc> cmdlet.</target>
        </segment>
      </unit>
      <unit id="165">
        <segment state="initial">
          <source>In Netsh, you must first specify the GPO that the commands in a Netsh session should modify.</source>
          <target>In Netsh, you must first specify the GPO that the commands in a Netsh session should modify.</target>
        </segment>
      </unit>
      <unit id="166">
        <segment state="initial">
          <source>The commands you enter are run against the contents of the GPO, and this remains in effect until the Netsh session is ended or until another set store command is executed.</source>
          <target>The commands you enter are run against the contents of the GPO, and this remains in effect until the Netsh session is ended or until another set store command is executed.</target>
        </segment>
      </unit>
      <unit id="167">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">\_</data>
        </originalData>
        <segment state="initial">
          <source>Here, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">domain.contoso.com</pc> is the name of your Active Directory Domain Services (AD DS), and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">gpo<ph dataRef="id5" id="ph1" />name</pc> is the name of the GPO that you want to modify.</source>
          <target>Here, <pc dataRefEnd="id2" dataRefStart="id1" id="p1">domain.contoso.com</pc> is the name of your Active Directory Domain Services (AD DS), and <pc dataRefEnd="id4" dataRefStart="id3" id="p2">gpo<ph dataRef="id5" id="ph1" />name</pc> is the name of the GPO that you want to modify.</target>
        </segment>
      </unit>
      <unit id="168">
        <segment state="initial">
          <source>Quotation marks are required if there are any spaces in the GPO name.</source>
          <target>Quotation marks are required if there are any spaces in the GPO name.</target>
        </segment>
      </unit>
      <unit id="169">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="170">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="171">
        <segment state="initial">
          <source>GPO Caching</source>
          <target>GPO Caching</target>
        </segment>
      </unit>
      <unit id="172">
        <segment state="initial">
          <source>To reduce the burden on busy domain controllers, Windows PowerShell allows you to load a GPO to your local session, make all your changes in that session, and then save it back at all once.</source>
          <target>To reduce the burden on busy domain controllers, Windows PowerShell allows you to load a GPO to your local session, make all your changes in that session, and then save it back at all once.</target>
        </segment>
      </unit>
      <unit id="173">
        <segment state="initial">
          <source>The following performs the same actions as the previous example (by adding a Telnet rule to a GPO), but we do so leveraging GPO caching in PowerShell.</source>
          <target>The following performs the same actions as the previous example (by adding a Telnet rule to a GPO), but we do so leveraging GPO caching in PowerShell.</target>
        </segment>
      </unit>
      <unit id="174">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>Changing the GPO by loading it onto your local session and using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-GPOSession</pc> parameter are not supported in Netsh</source>
          <target>Changing the GPO by loading it onto your local session and using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-GPOSession</pc> parameter are not supported in Netsh</target>
        </segment>
      </unit>
      <unit id="175">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="176">
        <segment state="initial">
          <source>Note that this does not batch your individual changes, it loads and saves the entire GPO at once.</source>
          <target>Note that this does not batch your individual changes, it loads and saves the entire GPO at once.</target>
        </segment>
      </unit>
      <unit id="177">
        <segment state="initial">
          <source>So if any other changes are made by other administrators, or in a different Windows PowerShell window, saving the GPO overwrites those changes.</source>
          <target>So if any other changes are made by other administrators, or in a different Windows PowerShell window, saving the GPO overwrites those changes.</target>
        </segment>
      </unit>
      <unit id="178">
        <segment state="initial">
          <source>Modify an existing firewall rule</source>
          <target>Modify an existing firewall rule</target>
        </segment>
      </unit>
      <unit id="179">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>When a rule is created, Netsh and Windows PowerShell allow you to change rule properties and influence, but the rule maintains its unique identifier (in Windows PowerShell this is specified with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-Name</pc> parameter).</source>
          <target>When a rule is created, Netsh and Windows PowerShell allow you to change rule properties and influence, but the rule maintains its unique identifier (in Windows PowerShell this is specified with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">-Name</pc> parameter).</target>
        </segment>
      </unit>
      <unit id="180">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>For example, you could have a rule <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow Web 80</pc> that enables TCP port 80 for inbound unsolicited traffic.</source>
          <target>For example, you could have a rule <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow Web 80</pc> that enables TCP port 80 for inbound unsolicited traffic.</target>
        </segment>
      </unit>
      <unit id="181">
        <segment state="initial">
          <source>You can change the rule to match a different remote IP address of a Web server whose traffic will be allowed by specifying the human-readable, localized name of the rule.</source>
          <target>You can change the rule to match a different remote IP address of a Web server whose traffic will be allowed by specifying the human-readable, localized name of the rule.</target>
        </segment>
      </unit>
      <unit id="182">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="183">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="184">
        <segment state="initial">
          <source>Netsh requires you to provide the name of the rule for it to be changed and we do not have an alternate way of getting the firewall rule.</source>
          <target>Netsh requires you to provide the name of the rule for it to be changed and we do not have an alternate way of getting the firewall rule.</target>
        </segment>
      </unit>
      <unit id="185">
        <segment state="initial">
          <source>In Windows PowerShell, you can query for the rule using its known properties.</source>
          <target>In Windows PowerShell, you can query for the rule using its known properties.</target>
        </segment>
      </unit>
      <unit id="186">
        <originalData>
          <data id="id1">`Get-NetFirewallRule`</data>
        </originalData>
        <segment state="initial">
          <source>When you run <ph dataRef="id1" id="ph1" />, you may notice that common conditions like addresses and ports do not appear.</source>
          <target>When you run <ph dataRef="id1" id="ph1" />, you may notice that common conditions like addresses and ports do not appear.</target>
        </segment>
      </unit>
      <unit id="187">
        <segment state="initial">
          <source>These conditions are represented in separate objects called Filters.</source>
          <target>These conditions are represented in separate objects called Filters.</target>
        </segment>
      </unit>
      <unit id="188">
        <segment state="initial">
          <source>As shown before, you can set all the conditions in New-NetFirewallRule and Set-NetFirewallRule.</source>
          <target>As shown before, you can set all the conditions in New-NetFirewallRule and Set-NetFirewallRule.</target>
        </segment>
      </unit>
      <unit id="189">
        <segment state="initial">
          <source>If you want to query for firewall rules based on these fields (ports, addresses, security, interfaces, services), you will need to get the filter objects themselves.</source>
          <target>If you want to query for firewall rules based on these fields (ports, addresses, security, interfaces, services), you will need to get the filter objects themselves.</target>
        </segment>
      </unit>
      <unit id="190">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>You can change the remote endpoint of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow Web 80</pc> rule (as done previously) using filter objects.</source>
          <target>You can change the remote endpoint of the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow Web 80</pc> rule (as done previously) using filter objects.</target>
        </segment>
      </unit>
      <unit id="191">
        <segment state="initial">
          <source>Using Windows PowerShell you query by port using the port filter, then assuming additional rules exist affecting the local port, you build with further queries until your desired rule is retrieved.</source>
          <target>Using Windows PowerShell you query by port using the port filter, then assuming additional rules exist affecting the local port, you build with further queries until your desired rule is retrieved.</target>
        </segment>
      </unit>
      <unit id="192">
        <originalData>
          <data id="id1">`Set-NetFirewallRule`</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, we assume the query returns a single firewall rule, which is then piped to the <ph dataRef="id1" id="ph1" /> cmdlet utilizing Windows PowerShell’s ability to pipeline inputs.</source>
          <target>In the following example, we assume the query returns a single firewall rule, which is then piped to the <ph dataRef="id1" id="ph1" /> cmdlet utilizing Windows PowerShell’s ability to pipeline inputs.</target>
        </segment>
      </unit>
      <unit id="193">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="194">
        <segment state="initial">
          <source>You can also query for rules using the wildcard character.</source>
          <target>You can also query for rules using the wildcard character.</target>
        </segment>
      </unit>
      <unit id="195">
        <segment state="initial">
          <source>The following example returns an array of firewall rules associated with a particular program.</source>
          <target>The following example returns an array of firewall rules associated with a particular program.</target>
        </segment>
      </unit>
      <unit id="196">
        <originalData>
          <data id="id1">`Set-NetFirewallRule`</data>
        </originalData>
        <segment state="initial">
          <source>The elements of the array can be modified in subsequent <ph dataRef="id1" id="ph1" /> cmdlets.</source>
          <target>The elements of the array can be modified in subsequent <ph dataRef="id1" id="ph1" /> cmdlets.</target>
        </segment>
      </unit>
      <unit id="197">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="198">
        <segment state="initial">
          <source>Multiple rules in a group can be simultaneously modified when the associated group name is specified in a Set command.</source>
          <target>Multiple rules in a group can be simultaneously modified when the associated group name is specified in a Set command.</target>
        </segment>
      </unit>
      <unit id="199">
        <segment state="initial">
          <source>You can add firewall rules to specified management groups in order to manage multiple rules that share the same influences.</source>
          <target>You can add firewall rules to specified management groups in order to manage multiple rules that share the same influences.</target>
        </segment>
      </unit>
      <unit id="200">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In the following example, we add both inbound and outbound Telnet firewall rules to the group <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Telnet Management</pc>.</source>
          <target>In the following example, we add both inbound and outbound Telnet firewall rules to the group <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Telnet Management</pc>.</target>
        </segment>
      </unit>
      <unit id="201">
        <segment state="initial">
          <source>In Windows PowerShell, group membership is specified when the rules are first created so we re-create the previous example rules.</source>
          <target>In Windows PowerShell, group membership is specified when the rules are first created so we re-create the previous example rules.</target>
        </segment>
      </unit>
      <unit id="202">
        <segment state="initial">
          <source>Adding rules to a custom rule group is not possible in Netsh.</source>
          <target>Adding rules to a custom rule group is not possible in Netsh.</target>
        </segment>
      </unit>
      <unit id="203">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="204">
        <segment state="initial">
          <source>If the group is not specified at rule creation time, the rule can be added to the rule group using dot notation in Windows PowerShell.</source>
          <target>If the group is not specified at rule creation time, the rule can be added to the rule group using dot notation in Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="205">
        <originalData>
          <data id="id1">`Set-NetFirewallRule`</data>
        </originalData>
        <segment state="initial">
          <source>You cannot specify the group using <ph dataRef="id1" id="ph1" /> since the command allows querying by rule group.</source>
          <target>You cannot specify the group using <ph dataRef="id1" id="ph1" /> since the command allows querying by rule group.</target>
        </segment>
      </unit>
      <unit id="206">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="207">
        <originalData>
          <data id="id1">`Set`</data>
        </originalData>
        <segment state="initial">
          <source>Using the <ph dataRef="id1" id="ph1" /> command, if the rule group name is specified, the group membership is not modified but rather all rules of the group receive the same modifications indicated by the given parameters.</source>
          <target>Using the <ph dataRef="id1" id="ph1" /> command, if the rule group name is specified, the group membership is not modified but rather all rules of the group receive the same modifications indicated by the given parameters.</target>
        </segment>
      </unit>
      <unit id="208">
        <segment state="initial">
          <source>The following scriptlet enables all rules in a predefined group containing remote management influencing firewall rules.</source>
          <target>The following scriptlet enables all rules in a predefined group containing remote management influencing firewall rules.</target>
        </segment>
      </unit>
      <unit id="209">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="210">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="211">
        <originalData>
          <data id="id1">`Enable-NetFirewallRule`</data>
        </originalData>
        <segment state="initial">
          <source>There is also a separate <ph dataRef="id1" id="ph1" /> cmdlet for enabling rules by group or by other properties of the rule.</source>
          <target>There is also a separate <ph dataRef="id1" id="ph1" /> cmdlet for enabling rules by group or by other properties of the rule.</target>
        </segment>
      </unit>
      <unit id="212">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="213">
        <segment state="initial">
          <source>Delete a firewall rule</source>
          <target>Delete a firewall rule</target>
        </segment>
      </unit>
      <unit id="214">
        <segment state="initial">
          <source>Rule objects can be disabled so that they are no longer active.</source>
          <target>Rule objects can be disabled so that they are no longer active.</target>
        </segment>
      </unit>
      <unit id="215">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>In Windows PowerShell, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable-NetFirewallRule</pc> cmdlet will leave the rule on the system, but put it in a disabled state so the rule no longer is applied and impacts traffic.</source>
          <target>In Windows PowerShell, the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Disable-NetFirewallRule</pc> cmdlet will leave the rule on the system, but put it in a disabled state so the rule no longer is applied and impacts traffic.</target>
        </segment>
      </unit>
      <unit id="216">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>A disabled firewall rule can be re-enabled by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable-NetFirewallRule</pc>.</source>
          <target>A disabled firewall rule can be re-enabled by <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Enable-NetFirewallRule</pc>.</target>
        </segment>
      </unit>
      <unit id="217">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This is different from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove-NetFirewallRule</pc>, which permanently removes the rule definition from the device.</source>
          <target>This is different from the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove-NetFirewallRule</pc>, which permanently removes the rule definition from the device.</target>
        </segment>
      </unit>
      <unit id="218">
        <segment state="initial">
          <source>The following cmdlet deletes the specified existing firewall rule from the local policy store.</source>
          <target>The following cmdlet deletes the specified existing firewall rule from the local policy store.</target>
        </segment>
      </unit>
      <unit id="219">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="220">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="221">
        <segment state="initial">
          <source>Like with other cmdlets, you can also query for rules to be removed.</source>
          <target>Like with other cmdlets, you can also query for rules to be removed.</target>
        </segment>
      </unit>
      <unit id="222">
        <segment state="initial">
          <source>Here, all blocking firewall rules are deleted from the device.</source>
          <target>Here, all blocking firewall rules are deleted from the device.</target>
        </segment>
      </unit>
      <unit id="223">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="224">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
        </originalData>
        <segment state="initial">
          <source>Note that it may be safer to query the rules with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc> command and save it in a variable, observe the rules to be affected, then pipe them to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Remove</pc> command, just as we did for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Set</pc> commands.</source>
          <target>Note that it may be safer to query the rules with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Get</pc> command and save it in a variable, observe the rules to be affected, then pipe them to the <pc dataRefEnd="id4" dataRefStart="id3" id="p2">Remove</pc> command, just as we did for the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Set</pc> commands.</target>
        </segment>
      </unit>
      <unit id="225">
        <segment state="initial">
          <source>The following example shows how you can view all the blocking firewall rules, and then delete the first four rules.</source>
          <target>The following example shows how you can view all the blocking firewall rules, and then delete the first four rules.</target>
        </segment>
      </unit>
      <unit id="226">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="227">
        <segment state="initial">
          <source>Manage remotely</source>
          <target>Manage remotely</target>
        </segment>
      </unit>
      <unit id="228">
        <segment state="initial">
          <source>Remote management using WinRM is enabled by default.</source>
          <target>Remote management using WinRM is enabled by default.</target>
        </segment>
      </unit>
      <unit id="229">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>The cmdlets that support the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CimSession</pc> parameter use WinRM and can be managed remotely by default.</source>
          <target>The cmdlets that support the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">CimSession</pc> parameter use WinRM and can be managed remotely by default.</target>
        </segment>
      </unit>
      <unit id="230">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>The following example returns all firewall rules of the persistent store on a device named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RemoteDevice</pc>.</source>
          <target>The following example returns all firewall rules of the persistent store on a device named <pc dataRefEnd="id2" dataRefStart="id1" id="p1">RemoteDevice</pc>.</target>
        </segment>
      </unit>
      <unit id="231">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="232">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>We can perform any modifications or view rules on remote  devices by simply using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–CimSession</pc> parameter.</source>
          <target>We can perform any modifications or view rules on remote  devices by simply using the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–CimSession</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="233">
        <segment state="initial">
          <source>Here we remove a specific firewall rule from a remote device.</source>
          <target>Here we remove a specific firewall rule from a remote device.</target>
        </segment>
      </unit>
      <unit id="234">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="235">
        <segment state="initial">
          <source>Deploy basic IPsec rule settings</source>
          <target>Deploy basic IPsec rule settings</target>
        </segment>
      </unit>
      <unit id="236">
        <segment state="initial">
          <source>An Internet Protocol security (IPsec) policy consists of rules that determine IPsec behavior.</source>
          <target>An Internet Protocol security (IPsec) policy consists of rules that determine IPsec behavior.</target>
        </segment>
      </unit>
      <unit id="237">
        <segment state="initial">
          <source>IPsec supports network-level peer authentication, data origin authentication, data integrity, data confidentiality (encryption), and replay protection.</source>
          <target>IPsec supports network-level peer authentication, data origin authentication, data integrity, data confidentiality (encryption), and replay protection.</target>
        </segment>
      </unit>
      <unit id="238">
        <segment state="initial">
          <source>Windows PowerShell can create powerful, complex IPsec policies like in Netsh and the Windows Firewall with Advanced Security console.</source>
          <target>Windows PowerShell can create powerful, complex IPsec policies like in Netsh and the Windows Firewall with Advanced Security console.</target>
        </segment>
      </unit>
      <unit id="239">
        <segment state="initial">
          <source>However, because Windows PowerShell is object-based rather than string token-based, configuration in Windows PowerShell offers greater control and flexibility.</source>
          <target>However, because Windows PowerShell is object-based rather than string token-based, configuration in Windows PowerShell offers greater control and flexibility.</target>
        </segment>
      </unit>
      <unit id="240">
        <segment state="initial">
          <source>In Netsh, the authentication and cryptographic sets were specified as a list of comma-separated tokens in a specific format.</source>
          <target>In Netsh, the authentication and cryptographic sets were specified as a list of comma-separated tokens in a specific format.</target>
        </segment>
      </unit>
      <unit id="241">
        <segment state="initial">
          <source>In Windows PowerShell, rather than using default settings, you first create your desired authentication or cryptographic proposal objects and bundle them into lists in your preferred order.</source>
          <target>In Windows PowerShell, rather than using default settings, you first create your desired authentication or cryptographic proposal objects and bundle them into lists in your preferred order.</target>
        </segment>
      </unit>
      <unit id="242">
        <segment state="initial">
          <source>Then, you create one or more IPsec rules that reference these sets.</source>
          <target>Then, you create one or more IPsec rules that reference these sets.</target>
        </segment>
      </unit>
      <unit id="243">
        <segment state="initial">
          <source>The benefit of this model is that programmatic access to the information in the rules is much easier.</source>
          <target>The benefit of this model is that programmatic access to the information in the rules is much easier.</target>
        </segment>
      </unit>
      <unit id="244">
        <segment state="initial">
          <source>See the following sections for clarifying examples.</source>
          <target>See the following sections for clarifying examples.</target>
        </segment>
      </unit>
      <unit id="245">
        <segment state="initial">
          <source>object model for creating a single ipsec rule</source>
          <target>object model for creating a single ipsec rule</target>
        </segment>
      </unit>
      <unit id="246">
        <segment state="initial">
          <source>Create IPsec rules</source>
          <target>Create IPsec rules</target>
        </segment>
      </unit>
      <unit id="247">
        <segment state="initial">
          <source>The following cmdlet creates basic IPsec transport mode rule in a Group Policy Object.</source>
          <target>The following cmdlet creates basic IPsec transport mode rule in a Group Policy Object.</target>
        </segment>
      </unit>
      <unit id="248">
        <segment state="initial">
          <source>An IPsec rule is simple to create; all that is required is the display name, and the remaining properties use default values.</source>
          <target>An IPsec rule is simple to create; all that is required is the display name, and the remaining properties use default values.</target>
        </segment>
      </unit>
      <unit id="249">
        <segment state="initial">
          <source>Inbound traffic is authenticated and integrity checked using the default quick mode and main mode settings.</source>
          <target>Inbound traffic is authenticated and integrity checked using the default quick mode and main mode settings.</target>
        </segment>
      </unit>
      <unit id="250">
        <segment state="initial">
          <source>These default settings can be found in the console under Customize IPsec Defaults.</source>
          <target>These default settings can be found in the console under Customize IPsec Defaults.</target>
        </segment>
      </unit>
      <unit id="251">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="252">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="253">
        <segment state="initial">
          <source>Add custom authentication methods to an IPsec rule</source>
          <target>Add custom authentication methods to an IPsec rule</target>
        </segment>
      </unit>
      <unit id="254">
        <segment state="initial">
          <source>If you want to create a custom set of quick-mode proposals that includes both AH and ESP in an IPsec rule object, you create the associated objects separately and link their associations.</source>
          <target>If you want to create a custom set of quick-mode proposals that includes both AH and ESP in an IPsec rule object, you create the associated objects separately and link their associations.</target>
        </segment>
      </unit>
      <unit id="255">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://technet.microsoft.com/library/cc757847(WS.10).aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about authentication methods, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choosing the IPsec Protocol</pc> .</source>
          <target>For more information about authentication methods, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Choosing the IPsec Protocol</pc> .</target>
        </segment>
      </unit>
      <unit id="256">
        <segment state="initial">
          <source>You can then use the newly created custom quick-mode policies when you create IPsec rules.</source>
          <target>You can then use the newly created custom quick-mode policies when you create IPsec rules.</target>
        </segment>
      </unit>
      <unit id="257">
        <segment state="initial">
          <source>The cryptography set object is linked to an IPsec rule object.</source>
          <target>The cryptography set object is linked to an IPsec rule object.</target>
        </segment>
      </unit>
      <unit id="258">
        <segment state="initial">
          <source>crypto set object</source>
          <target>crypto set object</target>
        </segment>
      </unit>
      <unit id="259">
        <segment state="initial">
          <source>In this example, we build on the previously created IPsec rule by specifying a custom quick-mode crypto set.</source>
          <target>In this example, we build on the previously created IPsec rule by specifying a custom quick-mode crypto set.</target>
        </segment>
      </unit>
      <unit id="260">
        <segment state="initial">
          <source>The final IPsec rule requires outbound traffic to be authenticated by the specified cryptography method.</source>
          <target>The final IPsec rule requires outbound traffic to be authenticated by the specified cryptography method.</target>
        </segment>
      </unit>
      <unit id="261">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="262">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="263">
        <segment state="initial">
          <source>IKEv2 IPsec transport rules</source>
          <target>IKEv2 IPsec transport rules</target>
        </segment>
      </unit>
      <unit id="264">
        <segment state="initial">
          <source>A corporate network may need to secure communications with another agency.</source>
          <target>A corporate network may need to secure communications with another agency.</target>
        </segment>
      </unit>
      <unit id="265">
        <segment state="initial">
          <source>But, you discover the agency runs non-Windows operating systems and requires the use of the Internet Key Exchange Version 2 (IKEv2) standard.</source>
          <target>But, you discover the agency runs non-Windows operating systems and requires the use of the Internet Key Exchange Version 2 (IKEv2) standard.</target>
        </segment>
      </unit>
      <unit id="266">
        <segment state="initial">
          <source>You can leverage IKEv2 capabilities in Windows Server 2012 by simply specifying IKEv2 as the key module in an IPsec rule.</source>
          <target>You can leverage IKEv2 capabilities in Windows Server 2012 by simply specifying IKEv2 as the key module in an IPsec rule.</target>
        </segment>
      </unit>
      <unit id="267">
        <segment state="initial">
          <source>This can only be done using computer certificate authentication and cannot be used with phase 2 authentication.</source>
          <target>This can only be done using computer certificate authentication and cannot be used with phase 2 authentication.</target>
        </segment>
      </unit>
      <unit id="268">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="269">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](securing-end-to-end-ipsec-connections-by-using-ikev2.md)</data>
        </originalData>
        <segment state="initial">
          <source>For more info about IKEv2, including scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Securing End-to-End IPsec Connections by Using IKEv2</pc>.</source>
          <target>For more info about IKEv2, including scenarios, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Securing End-to-End IPsec Connections by Using IKEv2</pc>.</target>
        </segment>
      </unit>
      <unit id="270">
        <segment state="initial">
          <source>Copy an IPsec rule from one policy to another</source>
          <target>Copy an IPsec rule from one policy to another</target>
        </segment>
      </unit>
      <unit id="271">
        <segment state="initial">
          <source>Firewall and IPsec rules with the same rule properties can be duplicated to simplify the task of re-creating them within different policy stores.</source>
          <target>Firewall and IPsec rules with the same rule properties can be duplicated to simplify the task of re-creating them within different policy stores.</target>
        </segment>
      </unit>
      <unit id="272">
        <segment state="initial">
          <source>To copy the previously created rule from one policy store to another, the associated objects must be also be copied separately.</source>
          <target>To copy the previously created rule from one policy store to another, the associated objects must be also be copied separately.</target>
        </segment>
      </unit>
      <unit id="273">
        <segment state="initial">
          <source>Note that there is no need to copy associated firewall filters.</source>
          <target>Note that there is no need to copy associated firewall filters.</target>
        </segment>
      </unit>
      <unit id="274">
        <segment state="initial">
          <source>You can query rules to be copied in the same way as other cmdlets.</source>
          <target>You can query rules to be copied in the same way as other cmdlets.</target>
        </segment>
      </unit>
      <unit id="275">
        <segment state="initial">
          <source>Copying individual rules is a task that is not possible through the Netsh interface.</source>
          <target>Copying individual rules is a task that is not possible through the Netsh interface.</target>
        </segment>
      </unit>
      <unit id="276">
        <segment state="initial">
          <source>Here is how you can accomplish it with Windows PowerShell.</source>
          <target>Here is how you can accomplish it with Windows PowerShell.</target>
        </segment>
      </unit>
      <unit id="277">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="278">
        <segment state="initial">
          <source>Handling Windows PowerShell errors</source>
          <target>Handling Windows PowerShell errors</target>
        </segment>
      </unit>
      <unit id="279">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>To handle errors in your Windows PowerShell scripts, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–ErrorAction</pc> parameter.</source>
          <target>To handle errors in your Windows PowerShell scripts, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–ErrorAction</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="280">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>This is especially useful with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove</pc> cmdlets.</source>
          <target>This is especially useful with the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Remove</pc> cmdlets.</target>
        </segment>
      </unit>
      <unit id="281">
        <segment state="initial">
          <source>If you want to remove a particular rule, you will notice that it fails if the rule is not found.</source>
          <target>If you want to remove a particular rule, you will notice that it fails if the rule is not found.</target>
        </segment>
      </unit>
      <unit id="282">
        <segment state="initial">
          <source>When removing rules, if the rule isn’t already there, it is generally acceptable to ignore that error.</source>
          <target>When removing rules, if the rule isn’t already there, it is generally acceptable to ignore that error.</target>
        </segment>
      </unit>
      <unit id="283">
        <segment state="initial">
          <source>In this case, you can do the following to suppress any “rule not found” errors during the remove operation.</source>
          <target>In this case, you can do the following to suppress any “rule not found” errors during the remove operation.</target>
        </segment>
      </unit>
      <unit id="284">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="285">
        <segment state="initial">
          <source>Note that the use of wildcards can also suppress errors, but they could potentially match rules that you did not intend to remove.</source>
          <target>Note that the use of wildcards can also suppress errors, but they could potentially match rules that you did not intend to remove.</target>
        </segment>
      </unit>
      <unit id="286">
        <segment state="initial">
          <source>This can be a useful shortcut, but should only be used if you know there aren’t any extra rules that will be accidentally deleted.</source>
          <target>This can be a useful shortcut, but should only be used if you know there aren’t any extra rules that will be accidentally deleted.</target>
        </segment>
      </unit>
      <unit id="287">
        <segment state="initial">
          <source>So the following cmdlet will also remove the rule, suppressing any “not found” errors.</source>
          <target>So the following cmdlet will also remove the rule, suppressing any “not found” errors.</target>
        </segment>
      </unit>
      <unit id="288">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="289">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>When using wildcards, if you want to double-check the set of rules that is matched, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–WhatIf</pc> parameter.</source>
          <target>When using wildcards, if you want to double-check the set of rules that is matched, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–WhatIf</pc> parameter.</target>
        </segment>
      </unit>
      <unit id="290">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="291">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
        </originalData>
        <segment state="initial">
          <source>If you only want to delete some of the matched rules, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–Confirm</pc> parameter to get a rule-by-rule confirmation prompt.</source>
          <target>If you only want to delete some of the matched rules, you can use the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–Confirm</pc> parameter to get a rule-by-rule confirmation prompt.</target>
        </segment>
      </unit>
      <unit id="292">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="293">
        <segment state="initial">
          <source>You can also just perform the whole operation, displaying the name of each rule as the operation is performed.</source>
          <target>You can also just perform the whole operation, displaying the name of each rule as the operation is performed.</target>
        </segment>
      </unit>
      <unit id="294">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="295">
        <segment state="initial">
          <source>Monitor</source>
          <target>Monitor</target>
        </segment>
      </unit>
      <unit id="296">
        <segment state="initial">
          <source>The following Windows PowerShell commands are useful in the update cycle of a deployment phase.</source>
          <target>The following Windows PowerShell commands are useful in the update cycle of a deployment phase.</target>
        </segment>
      </unit>
      <unit id="297">
        <segment state="initial">
          <source>To allow you to view all the IPsec rules in a particular store, you can use the following commands.</source>
          <target>To allow you to view all the IPsec rules in a particular store, you can use the following commands.</target>
        </segment>
      </unit>
      <unit id="298">
        <segment state="initial">
          <source>In Netsh, this command does not show rules where profile=domain,public or profile=domain,private.</source>
          <target>In Netsh, this command does not show rules where profile=domain,public or profile=domain,private.</target>
        </segment>
      </unit>
      <unit id="299">
        <segment state="initial">
          <source>It only shows rules that have the single entry domain that is included in the rule.</source>
          <target>It only shows rules that have the single entry domain that is included in the rule.</target>
        </segment>
      </unit>
      <unit id="300">
        <segment state="initial">
          <source>The following command examples will show the IPsec rules in all profiles.</source>
          <target>The following command examples will show the IPsec rules in all profiles.</target>
        </segment>
      </unit>
      <unit id="301">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="302">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="303">
        <segment state="initial">
          <source>You can monitor main mode security associations for information such as which peers are currently connected to the device and which protection suite is used to form the security associations.</source>
          <target>You can monitor main mode security associations for information such as which peers are currently connected to the device and which protection suite is used to form the security associations.</target>
        </segment>
      </unit>
      <unit id="304">
        <segment state="initial">
          <source>Use the following cmdlet to view existing main mode rules and their security associations:</source>
          <target>Use the following cmdlet to view existing main mode rules and their security associations:</target>
        </segment>
      </unit>
      <unit id="305">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="306">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="307">
        <segment state="initial">
          <source>Find the source GPO of a rule</source>
          <target>Find the source GPO of a rule</target>
        </segment>
      </unit>
      <unit id="308">
        <segment state="initial">
          <source>To view the properties of a particular rule or group of rules, you query for the rule.</source>
          <target>To view the properties of a particular rule or group of rules, you query for the rule.</target>
        </segment>
      </unit>
      <unit id="309">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>When a query returns fields that are specified as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NotConfigured</pc>, you can to determine which policy store a rule originates from.</source>
          <target>When a query returns fields that are specified as <pc dataRefEnd="id2" dataRefStart="id1" id="p1">NotConfigured</pc>, you can to determine which policy store a rule originates from.</target>
        </segment>
      </unit>
      <unit id="310">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">**</data>
          <data id="id4">**</data>
          <data id="id5">**</data>
          <data id="id6">**</data>
          <data id="id7">*</data>
          <data id="id8">*</data>
          <data id="id9">**</data>
          <data id="id10">**</data>
        </originalData>
        <segment state="initial">
          <source>For objects that come from a GPO (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–PolicyStoreSourceType</pc> parameter is specified as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GroupPolicy</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Show</pc> command), if <pc dataRefEnd="id8" dataRefStart="id7" id="p4">–TracePolicyStore</pc> is passed, the name of the GPO is found and returned in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">PolicyStoreSource</pc> field.</source>
          <target>For objects that come from a GPO (the <pc dataRefEnd="id2" dataRefStart="id1" id="p1">–PolicyStoreSourceType</pc> parameter is specified as <pc dataRefEnd="id4" dataRefStart="id3" id="p2">GroupPolicy</pc> in the <pc dataRefEnd="id6" dataRefStart="id5" id="p3">Show</pc> command), if <pc dataRefEnd="id8" dataRefStart="id7" id="p4">–TracePolicyStore</pc> is passed, the name of the GPO is found and returned in the <pc dataRefEnd="id10" dataRefStart="id9" id="p5">PolicyStoreSource</pc> field.</target>
        </segment>
      </unit>
      <unit id="311">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="312">
        <segment state="initial">
          <source>It is important to note that the revealed sources do not contain a domain name.</source>
          <target>It is important to note that the revealed sources do not contain a domain name.</target>
        </segment>
      </unit>
      <unit id="313">
        <segment state="initial">
          <source>Deploy a basic domain isolation policy</source>
          <target>Deploy a basic domain isolation policy</target>
        </segment>
      </unit>
      <unit id="314">
        <segment state="initial">
          <source>IPsec can be used to isolate domain members from non-domain members.</source>
          <target>IPsec can be used to isolate domain members from non-domain members.</target>
        </segment>
      </unit>
      <unit id="315">
        <segment state="initial">
          <source>Domain isolation uses IPsec authentication to require that the domain-joined devices positively establish the identities of the communicating devices to improve security of an organization.</source>
          <target>Domain isolation uses IPsec authentication to require that the domain-joined devices positively establish the identities of the communicating devices to improve security of an organization.</target>
        </segment>
      </unit>
      <unit id="316">
        <segment state="initial">
          <source>One or more features of IPsec can be used to secure traffic with an IPsec rule object.</source>
          <target>One or more features of IPsec can be used to secure traffic with an IPsec rule object.</target>
        </segment>
      </unit>
      <unit id="317">
        <segment state="initial">
          <source>To implement domain isolation on your network, the devices in the domain receive IPsec rules that block unsolicited inbound network traffic that is not protected by IPsec.</source>
          <target>To implement domain isolation on your network, the devices in the domain receive IPsec rules that block unsolicited inbound network traffic that is not protected by IPsec.</target>
        </segment>
      </unit>
      <unit id="318">
        <segment state="initial">
          <source>Here we create an IPsec rule that requires authentication by domain members.</source>
          <target>Here we create an IPsec rule that requires authentication by domain members.</target>
        </segment>
      </unit>
      <unit id="319">
        <segment state="initial">
          <source>Through this, you can isolate domain-joined devices from devices that are not joined to a domain.</source>
          <target>Through this, you can isolate domain-joined devices from devices that are not joined to a domain.</target>
        </segment>
      </unit>
      <unit id="320">
        <segment state="initial">
          <source>In the following examples, Kerberos authentication is required for inbound traffic and requested for outbound traffic.</source>
          <target>In the following examples, Kerberos authentication is required for inbound traffic and requested for outbound traffic.</target>
        </segment>
      </unit>
      <unit id="321">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="322">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="323">
        <segment state="initial">
          <source>Configure IPsec tunnel mode</source>
          <target>Configure IPsec tunnel mode</target>
        </segment>
      </unit>
      <unit id="324">
        <segment state="initial">
          <source>The following command creates an IPsec tunnel that routes traffic from a private network (192.168.0.0/16) through an interface on the local device (1.1.1.1) attached to a public network to a second device through its public interface (2.2.2.2) to another private network (192.157.0.0/16).</source>
          <target>The following command creates an IPsec tunnel that routes traffic from a private network (192.168.0.0/16) through an interface on the local device (1.1.1.1) attached to a public network to a second device through its public interface (2.2.2.2) to another private network (192.157.0.0/16).</target>
        </segment>
      </unit>
      <unit id="325">
        <segment state="initial">
          <source>All traffic through the tunnel is checked for integrity by using ESP/SHA1, and it is encrypted by using ESP/DES3.</source>
          <target>All traffic through the tunnel is checked for integrity by using ESP/SHA1, and it is encrypted by using ESP/DES3.</target>
        </segment>
      </unit>
      <unit id="326">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="327">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="328">
        <segment state="initial">
          <source>Deploy secure firewall rules with IPsec</source>
          <target>Deploy secure firewall rules with IPsec</target>
        </segment>
      </unit>
      <unit id="329">
        <segment state="initial">
          <source>In situations where only secure traffic can be allowed through the Windows Firewall, a combination of manually configured firewall and IPsec rules are necessary.</source>
          <target>In situations where only secure traffic can be allowed through the Windows Firewall, a combination of manually configured firewall and IPsec rules are necessary.</target>
        </segment>
      </unit>
      <unit id="330">
        <segment state="initial">
          <source>The firewall rules determine the level of security for allowed packets, and the underlying IPsec rules secure the traffic.</source>
          <target>The firewall rules determine the level of security for allowed packets, and the underlying IPsec rules secure the traffic.</target>
        </segment>
      </unit>
      <unit id="331">
        <segment state="initial">
          <source>The scenarios can be accomplished in Windows PowerShell and in Netsh, with many similarities in deployment.</source>
          <target>The scenarios can be accomplished in Windows PowerShell and in Netsh, with many similarities in deployment.</target>
        </segment>
      </unit>
      <unit id="332">
        <segment state="initial">
          <source>Create a secure firewall rule (allow if secure)</source>
          <target>Create a secure firewall rule (allow if secure)</target>
        </segment>
      </unit>
      <unit id="333">
        <segment state="initial">
          <source>Configuring firewalls rule to allow connections if they are secure requires the corresponding traffic to be authenticated and integrity protected, and then optionally encrypted by IPsec.</source>
          <target>Configuring firewalls rule to allow connections if they are secure requires the corresponding traffic to be authenticated and integrity protected, and then optionally encrypted by IPsec.</target>
        </segment>
      </unit>
      <unit id="334">
        <segment state="initial">
          <source>The following example creates a firewall rule that requires traffic to be authenticated.</source>
          <target>The following example creates a firewall rule that requires traffic to be authenticated.</target>
        </segment>
      </unit>
      <unit id="335">
        <segment state="initial">
          <source>The command permits inbound Telnet network traffic only if the connection from the remote device is authenticated by using a separate IPsec rule.</source>
          <target>The command permits inbound Telnet network traffic only if the connection from the remote device is authenticated by using a separate IPsec rule.</target>
        </segment>
      </unit>
      <unit id="336">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="337">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="338">
        <segment state="initial">
          <source>The following command creates an IPsec rule that requires a first (computer) authentication and then attempts an optional second (user) authentication.</source>
          <target>The following command creates an IPsec rule that requires a first (computer) authentication and then attempts an optional second (user) authentication.</target>
        </segment>
      </unit>
      <unit id="339">
        <segment state="initial">
          <source>Creating this rule secures and allows the traffic through the firewall rule requirements for the messenger program.</source>
          <target>Creating this rule secures and allows the traffic through the firewall rule requirements for the messenger program.</target>
        </segment>
      </unit>
      <unit id="340">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="341">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="342">
        <segment state="initial">
          <source>Isolate a server by requiring encryption and group membership</source>
          <target>Isolate a server by requiring encryption and group membership</target>
        </segment>
      </unit>
      <unit id="343">
        <segment state="initial">
          <source>To improve the security of the  devices in an organization, you can deploy domain isolation in which domain-members are restricted.</source>
          <target>To improve the security of the  devices in an organization, you can deploy domain isolation in which domain-members are restricted.</target>
        </segment>
      </unit>
      <unit id="344">
        <segment state="initial">
          <source>They require authentication when communicating among each other and reject non-authenticated inbound connections.</source>
          <target>They require authentication when communicating among each other and reject non-authenticated inbound connections.</target>
        </segment>
      </unit>
      <unit id="345">
        <segment state="initial">
          <source>To improve the security of servers with sensitive data, this data must be protected by allowing access only to a subset of devices within the enterprise domain.</source>
          <target>To improve the security of servers with sensitive data, this data must be protected by allowing access only to a subset of devices within the enterprise domain.</target>
        </segment>
      </unit>
      <unit id="346">
        <segment state="initial">
          <source>IPsec can provide this additional layer of protection by isolating the server.</source>
          <target>IPsec can provide this additional layer of protection by isolating the server.</target>
        </segment>
      </unit>
      <unit id="347">
        <segment state="initial">
          <source>In server isolation, sensitive data access is restricted to users and devices with legitimate business need, and the data is additionally encrypted to prevent eavesdropping.</source>
          <target>In server isolation, sensitive data access is restricted to users and devices with legitimate business need, and the data is additionally encrypted to prevent eavesdropping.</target>
        </segment>
      </unit>
      <unit id="348">
        <segment state="initial">
          <source>Create a firewall rule that requires group membership and encryption</source>
          <target>Create a firewall rule that requires group membership and encryption</target>
        </segment>
      </unit>
      <unit id="349">
        <segment state="initial">
          <source>To deploy server isolation, we layer a firewall rule that restricts traffic to authorized users or devices on the IPsec rule that enforces authentication.</source>
          <target>To deploy server isolation, we layer a firewall rule that restricts traffic to authorized users or devices on the IPsec rule that enforces authentication.</target>
        </segment>
      </unit>
      <unit id="350">
        <segment state="initial">
          <source>The following firewall rule allows Telnet traffic from user accounts that are members of a custom group called “Authorized to Access Server.”</source>
          <target>The following firewall rule allows Telnet traffic from user accounts that are members of a custom group called “Authorized to Access Server.”</target>
        </segment>
      </unit>
      <unit id="351">
        <segment state="initial">
          <source>This access can additionally be restricted based on the  device, user, or both by specifying the restriction parameters.</source>
          <target>This access can additionally be restricted based on the  device, user, or both by specifying the restriction parameters.</target>
        </segment>
      </unit>
      <unit id="352">
        <segment state="initial">
          <source>A Security Descriptor Definition Language (SDDL) string is created by extending a user or group’s security identifier (SID).</source>
          <target>A Security Descriptor Definition Language (SDDL) string is created by extending a user or group’s security identifier (SID).</target>
        </segment>
      </unit>
      <unit id="353">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://technet.microsoft.com/library/cc753463(WS.10).aspx#bkmk_FINDSID)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about finding a group’s SID, see: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Finding the SID for a group account</pc>.</source>
          <target>For more information about finding a group’s SID, see: <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Finding the SID for a group account</pc>.</target>
        </segment>
      </unit>
      <unit id="354">
        <segment state="initial">
          <source>Restricting access to a group allows administrations to extend strong authentication support through Windows Firewall/and or IPsec policies.</source>
          <target>Restricting access to a group allows administrations to extend strong authentication support through Windows Firewall/and or IPsec policies.</target>
        </segment>
      </unit>
      <unit id="355">
        <segment state="initial">
          <source>The following example shows you how to create an SDDL string that represents security groups.</source>
          <target>The following example shows you how to create an SDDL string that represents security groups.</target>
        </segment>
      </unit>
      <unit id="356">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="357">
        <segment state="initial">
          <source>By using the previous scriptlet, you can also get the SDDL string for a secure computer group as shown here:</source>
          <target>By using the previous scriptlet, you can also get the SDDL string for a secure computer group as shown here:</target>
        </segment>
      </unit>
      <unit id="358">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="359">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://technet.microsoft.com/library/ff730940.aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information about how to create security groups or how to determine the SDDL string, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Working with SIDs</pc>.</source>
          <target>For more information about how to create security groups or how to determine the SDDL string, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Working with SIDs</pc>.</target>
        </segment>
      </unit>
      <unit id="360">
        <segment state="initial">
          <source>Telnet is an application that does not provide encryption.</source>
          <target>Telnet is an application that does not provide encryption.</target>
        </segment>
      </unit>
      <unit id="361">
        <segment state="initial">
          <source>This application can send data, such as names and passwords, over the network.</source>
          <target>This application can send data, such as names and passwords, over the network.</target>
        </segment>
      </unit>
      <unit id="362">
        <segment state="initial">
          <source>This data can be intercepted by malicious users.</source>
          <target>This data can be intercepted by malicious users.</target>
        </segment>
      </unit>
      <unit id="363">
        <segment state="initial">
          <source>If an administrator would like to allow the use of Telnet, but protect the traffic, a firewall rule that requires IPsec encryption can be created.</source>
          <target>If an administrator would like to allow the use of Telnet, but protect the traffic, a firewall rule that requires IPsec encryption can be created.</target>
        </segment>
      </unit>
      <unit id="364">
        <segment state="initial">
          <source>This is necessary so that the administrator can be certain that when this application is used, all of the traffic sent or received by this port is encrypted.</source>
          <target>This is necessary so that the administrator can be certain that when this application is used, all of the traffic sent or received by this port is encrypted.</target>
        </segment>
      </unit>
      <unit id="365">
        <segment state="initial">
          <source>If IPsec fails to authorize the connection, no traffic is allowed from this application.</source>
          <target>If IPsec fails to authorize the connection, no traffic is allowed from this application.</target>
        </segment>
      </unit>
      <unit id="366">
        <segment state="initial">
          <source>In this example, we allow only authenticated and encrypted inbound Telnet traffic from a specified secure user group through the creation of the following firewall rule.</source>
          <target>In this example, we allow only authenticated and encrypted inbound Telnet traffic from a specified secure user group through the creation of the following firewall rule.</target>
        </segment>
      </unit>
      <unit id="367">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="368">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="369">
        <segment state="initial">
          <source>Endpoint security enforcement</source>
          <target>Endpoint security enforcement</target>
        </segment>
      </unit>
      <unit id="370">
        <segment state="initial">
          <source>The previous example showed end to end security for a particular application.</source>
          <target>The previous example showed end to end security for a particular application.</target>
        </segment>
      </unit>
      <unit id="371">
        <segment state="initial">
          <source>In situations where endpoint security is required for many applications, having a firewall rule per application can be cumbersome and difficult to manage.</source>
          <target>In situations where endpoint security is required for many applications, having a firewall rule per application can be cumbersome and difficult to manage.</target>
        </segment>
      </unit>
      <unit id="372">
        <segment state="initial">
          <source>Authorization can override the per-rule basis and be done at the IPsec layer.</source>
          <target>Authorization can override the per-rule basis and be done at the IPsec layer.</target>
        </segment>
      </unit>
      <unit id="373">
        <segment state="initial">
          <source>In this example, we set the global IPsec setting to only allow transport mode traffic to come from an authorized user group with the following cmdlet.</source>
          <target>In this example, we set the global IPsec setting to only allow transport mode traffic to come from an authorized user group with the following cmdlet.</target>
        </segment>
      </unit>
      <unit id="374">
        <segment state="initial">
          <source>Consult the previous examples for working with security groups.</source>
          <target>Consult the previous examples for working with security groups.</target>
        </segment>
      </unit>
      <unit id="375">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="376">
        <segment state="initial">
          <source>Create firewall rules that allow IPsec-protected network traffic (authenticated bypass)</source>
          <target>Create firewall rules that allow IPsec-protected network traffic (authenticated bypass)</target>
        </segment>
      </unit>
      <unit id="377">
        <segment state="initial">
          <source>Authenticated bypass allows traffic from a specified trusted  device or user to override firewall block rules.</source>
          <target>Authenticated bypass allows traffic from a specified trusted  device or user to override firewall block rules.</target>
        </segment>
      </unit>
      <unit id="378">
        <segment state="initial">
          <source>This is helpful when an administrator wants to use scanning servers to monitor and update  devices without the need to use port-level exceptions.</source>
          <target>This is helpful when an administrator wants to use scanning servers to monitor and update  devices without the need to use port-level exceptions.</target>
        </segment>
      </unit>
      <unit id="379">
        <originalData>
          <data id="id1">[</data>
          <data id="id2">](http://technet.microsoft.com/library/cc753463(WS.10).aspx)</data>
        </originalData>
        <segment state="initial">
          <source>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to enable authenticated firewall bypass</pc>.</source>
          <target>For more information, see <pc dataRefEnd="id2" dataRefStart="id1" id="p1">How to enable authenticated firewall bypass</pc>.</target>
        </segment>
      </unit>
      <unit id="380">
        <segment state="initial">
          <source>In this example, we assume that a blocking firewall rule exists.</source>
          <target>In this example, we assume that a blocking firewall rule exists.</target>
        </segment>
      </unit>
      <unit id="381">
        <segment state="initial">
          <source>This example permits any network traffic on any port from any IP address to override the block rule, if the traffic is authenticated as originating from a  device or user account that is a member of the specified  device or user security group.</source>
          <target>This example permits any network traffic on any port from any IP address to override the block rule, if the traffic is authenticated as originating from a  device or user account that is a member of the specified  device or user security group.</target>
        </segment>
      </unit>
      <unit id="382">
        <segment state="initial">
          <source>Netsh</source>
          <target>Netsh</target>
        </segment>
      </unit>
      <unit id="383">
        <segment state="initial">
          <source>Windows PowerShell</source>
          <target>Windows PowerShell</target>
        </segment>
      </unit>
      <unit id="384">
        <segment state="initial">
          <source>Additional resources</source>
          <target>Additional resources</target>
        </segment>
      </unit>
      <unit id="385">
        <segment state="initial">
          <source>For more information about Windows PowerShell concepts, see the following topics.</source>
          <target>For more information about Windows PowerShell concepts, see the following topics.</target>
        </segment>
      </unit>
      <unit id="386">
        <segment state="initial">
          <source>Windows PowerShell Getting Started Guide</source>
          <target>Windows PowerShell Getting Started Guide</target>
        </segment>
      </unit>
      <unit id="387">
        <segment state="initial">
          <source>Windows PowerShell User Guide</source>
          <target>Windows PowerShell User Guide</target>
        </segment>
      </unit>
      <unit id="388">
        <segment state="initial">
          <source>Windows PowerShell About Help Topics</source>
          <target>Windows PowerShell About Help Topics</target>
        </segment>
      </unit>
      <unit id="389">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Functions</source>
          <target>about<ph dataRef="id1" id="ph1" />Functions</target>
        </segment>
      </unit>
      <unit id="390">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Functions<ph dataRef="id2" id="ph2" />Advanced</source>
          <target>about<ph dataRef="id1" id="ph1" />Functions<ph dataRef="id2" id="ph2" />Advanced</target>
        </segment>
      </unit>
      <unit id="391">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Execution<ph dataRef="id2" id="ph2" />Policies</source>
          <target>about<ph dataRef="id1" id="ph1" />Execution<ph dataRef="id2" id="ph2" />Policies</target>
        </segment>
      </unit>
      <unit id="392">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Foreach</source>
          <target>about<ph dataRef="id1" id="ph1" />Foreach</target>
        </segment>
      </unit>
      <unit id="393">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Objects</source>
          <target>about<ph dataRef="id1" id="ph1" />Objects</target>
        </segment>
      </unit>
      <unit id="394">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Properties</source>
          <target>about<ph dataRef="id1" id="ph1" />Properties</target>
        </segment>
      </unit>
      <unit id="395">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />While</source>
          <target>about<ph dataRef="id1" id="ph1" />While</target>
        </segment>
      </unit>
      <unit id="396">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Scripts</source>
          <target>about<ph dataRef="id1" id="ph1" />Scripts</target>
        </segment>
      </unit>
      <unit id="397">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Signing</source>
          <target>about<ph dataRef="id1" id="ph1" />Signing</target>
        </segment>
      </unit>
      <unit id="398">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Throw</source>
          <target>about<ph dataRef="id1" id="ph1" />Throw</target>
        </segment>
      </unit>
      <unit id="399">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />PSSessions</source>
          <target>about<ph dataRef="id1" id="ph1" />PSSessions</target>
        </segment>
      </unit>
      <unit id="400">
        <originalData>
          <data id="id1">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Modules</source>
          <target>about<ph dataRef="id1" id="ph1" />Modules</target>
        </segment>
      </unit>
      <unit id="401">
        <originalData>
          <data id="id1">\_</data>
          <data id="id2">\_</data>
        </originalData>
        <segment state="initial">
          <source>about<ph dataRef="id1" id="ph1" />Command<ph dataRef="id2" id="ph2" />Precedence</source>
          <target>about<ph dataRef="id1" id="ph1" />Command<ph dataRef="id2" id="ph2" />Precedence</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>