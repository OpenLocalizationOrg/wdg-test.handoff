<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns:mda="urn:oasis:names:tc:xliff:metadata:2.0" srcLang="en-US" trgLang="en-us" version="2.0" xml:space="default" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1">
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationtype">Human Translation</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="oltranslationpriority">
        </mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilepath">windows\keep-secure\understanding-applocker-rule-behavior.md</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="olfilehash">dd9d2f35fc8bfb5eb015de26328425488166d8cb</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <mda:metadata>
      <mda:metaGroup>
        <mda:meta type="tool-id">mdxliff</mda:meta>
        <mda:meta type="tool-name">mdxliff</mda:meta>
        <mda:meta type="tool-version">1.0-48076a9</mda:meta>
        <mda:meta type="tool-company">Microsoft</mda:meta>
      </mda:metaGroup>
    </mda:metadata>
    <group id="content">
      <unit id="101">
        <segment state="initial">
          <source>Understanding AppLocker rule behavior (Windows 10)</source>
          <target>Understanding AppLocker rule behavior (Windows 10)</target>
        </segment>
      </unit>
      <unit id="102">
        <segment state="initial">
          <source>This topic describes how AppLocker rules are enforced by using the allow and deny options in AppLocker.</source>
          <target>This topic describes how AppLocker rules are enforced by using the allow and deny options in AppLocker.</target>
        </segment>
      </unit>
      <unit id="103">
        <segment state="initial">
          <source>Understanding AppLocker rule behavior</source>
          <target>Understanding AppLocker rule behavior</target>
        </segment>
      </unit>
      <unit id="104">
        <segment state="initial">
          <source>Applies to</source>
          <target>Applies to</target>
        </segment>
      </unit>
      <unit id="105">
        <segment state="initial">
          <source>Windows 10</source>
          <target>Windows 10</target>
        </segment>
      </unit>
      <unit id="106">
        <segment state="initial">
          <source>This topic describes how AppLocker rules are enforced by using the allow and deny options in AppLocker.</source>
          <target>This topic describes how AppLocker rules are enforced by using the allow and deny options in AppLocker.</target>
        </segment>
      </unit>
      <unit id="107">
        <segment state="initial">
          <source>If no AppLocker rules for a specific rule collection exist, all files with that file format are allowed to run.</source>
          <target>If no AppLocker rules for a specific rule collection exist, all files with that file format are allowed to run.</target>
        </segment>
      </unit>
      <unit id="108">
        <segment state="initial">
          <source>However, when an AppLocker rule for a specific rule collection is created, only the files explicitly allowed in a rule are permitted to run.</source>
          <target>However, when an AppLocker rule for a specific rule collection is created, only the files explicitly allowed in a rule are permitted to run.</target>
        </segment>
      </unit>
      <unit id="109">
        <originalData>
          <data id="id1">*</data>
          <data id="id2">*</data>
          <data id="id3">\\</data>
        </originalData>
        <segment state="initial">
          <source>For example, if you create an executable rule that allows .exe files in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">%SystemDrive%<ph dataRef="id3" id="ph1" />FilePath</pc> to run, only executable files located in that path are allowed to run.</source>
          <target>For example, if you create an executable rule that allows .exe files in <pc dataRefEnd="id2" dataRefStart="id1" id="p1">%SystemDrive%<ph dataRef="id3" id="ph1" />FilePath</pc> to run, only executable files located in that path are allowed to run.</target>
        </segment>
      </unit>
      <unit id="110">
        <segment state="initial">
          <source>A rule can be configured to use either an allow or deny action:</source>
          <target>A rule can be configured to use either an allow or deny action:</target>
        </segment>
      </unit>
      <unit id="111">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Allow</pc>.</target>
        </segment>
      </unit>
      <unit id="112">
        <segment state="initial">
          <source>You can specify which files are allowed to run in your environment and for which users or groups of users.</source>
          <target>You can specify which files are allowed to run in your environment and for which users or groups of users.</target>
        </segment>
      </unit>
      <unit id="113">
        <segment state="initial">
          <source>You can also configure exceptions to identify files that are excluded from the rule.</source>
          <target>You can also configure exceptions to identify files that are excluded from the rule.</target>
        </segment>
      </unit>
      <unit id="114">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deny</pc>.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Deny</pc>.</target>
        </segment>
      </unit>
      <unit id="115">
        <segment state="initial">
          <source>You can specify which files are not allowed to run in your environment and for which users or groups of users.</source>
          <target>You can specify which files are not allowed to run in your environment and for which users or groups of users.</target>
        </segment>
      </unit>
      <unit id="116">
        <segment state="initial">
          <source>You can also configure exceptions to identify files that are excluded from the rule.</source>
          <target>You can also configure exceptions to identify files that are excluded from the rule.</target>
        </segment>
      </unit>
      <unit id="117">
        <originalData>
          <data id="id1">**</data>
          <data id="id2">**</data>
        </originalData>
        <segment state="initial">
          <source>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important:</pc>  You can use a combination of allow actions and deny actions.</source>
          <target>
            <pc dataRefEnd="id2" dataRefStart="id1" id="p1">Important:</pc>  You can use a combination of allow actions and deny actions.</target>
        </segment>
      </unit>
      <unit id="118">
        <segment state="initial">
          <source>However, we recommend using allow actions with exceptions because deny actions override allow actions in all cases.</source>
          <target>However, we recommend using allow actions with exceptions because deny actions override allow actions in all cases.</target>
        </segment>
      </unit>
      <unit id="119">
        <segment state="initial">
          <source>Deny actions can also be circumvented.</source>
          <target>Deny actions can also be circumvented.</target>
        </segment>
      </unit>
      <unit id="120">
        <segment state="initial">
          <source>For example, if you configure a deny action for a file or folder path, the user can still run the file from any other path.</source>
          <target>For example, if you configure a deny action for a file or folder path, the user can still run the file from any other path.</target>
        </segment>
      </unit>
      <unit id="121">
        <segment state="initial">
          <source>Related topics</source>
          <target>Related topics</target>
        </segment>
      </unit>
      <unit id="122">
        <segment state="initial">
          <source>How AppLocker works</source>
          <target>How AppLocker works</target>
        </segment>
      </unit>
    </group>
  </file>
</xliff>